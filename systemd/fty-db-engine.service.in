# WARNING: This unit is intended for systems or containers dedicated as
# 42ity execution environments. It disables any existing MySQL server.

[Unit]
Description=MySQL server for 42ity usage
Conflicts=mysql.service mysqld.service mariadb.service
Wants=basic.target network.target

Requires=fty-license-accepted.target
BindsTo=fty-license-accepted.target
After=basic.target network.target fty-license-accepted.target

# Do not start DB if fty-license-accepted.service is not started already
# But do not send it into trying to start (and looping to fail), either
Requisite=fty-license-accepted.service
After=fty-license-accepted.service

# Offload killing of competing mysql implementation instances to where
# its failure would not block this critical unit. Sometimes executions
# of systemctl from units block...
Wants=fty-db-engine-pre.service
After=fty-db-engine-pre.service

PartOf=fty-db.target

[Service]
Type=forking
Restart=always
# Note: explicit User=root is required for $HOME to get set and ~/.my.cnf
# to get used by ExecStartPost self-check below
User=root
# Note: time below must suffice for units that require database to
# have stopped before this service restarts, otherwise we get a
# "failed to schedule restart job: Transaction is destructive" !
RestartSec=5
# Unlimited startup...
TimeoutStartSec=0
# More than 90, less than in bios.service
TimeoutStopSec=100

# Hack to work around systemd deficiencies, where fty-license-accepted.path+service are not enough
# Better ugly than sorry (with DB beginning to start, then getting killed by newly realized dependency unit states, and ending up with corrupted DB files rarely)
ExecStartPre=/bin/dash -c "test -f @ftydatadir@/fty-eula/license"
# If UIDs change between releases, be sure to properly own the database files
ExecStartPre=/bin/dash -c "if [ -d /var/lib/mysql ] ; then /bin/chown -R mysql:mysql /var/lib/mysql ; fi"

# If the database begins starting and systemd decides it should not,
# cache the request to stop if possible and only do so after starting -
# hoping to keep the database files intact.
ExecStart=/bin/dash -c "DO_ABORT=false; trap 'echo Got signal to abort, will do so later ; DO_ABORT=true ;' 0 1 2 3 15; RES=0; /usr/lib/mysql/rcmysql start || RES=$? ; if $DO_ABORT ; then echo 'Received a signal to stop during start-up processing, doing so now' ; /usr/lib/mysql/rcmysql stop ; fi ; trap '-' 0 1 2 3 15; exit $RES"

# Make sure the DB engine responds, before handing off the service to dependents
ExecStartPost=/bin/dash -c "/usr/bin/mysql -e 'show databases;' || /usr/bin/mysql --password='' -e 'show databases;' || { sleep 30 ; /usr/bin/mysql -e 'show databases;' || /usr/bin/mysql --password='' -e 'show databases;' ; }"

ExecStop=/usr/lib/mysql/rcmysql stop
ExecStopPost=-/bin/rm -f /var/run/fty-db-ready
# Make sure dependent services have finished, e.g. if mysqld died ungracefully
ExecStopPost=/bin/dash -c "UNITS=\"$(/bin/systemctl show -p WantedBy -p RequiredBy -p BoundBy -p RequisiteOf %n | cut -d= -f2 | tr ' ' '\\n' | sort | uniq | egrep -v '(^(bios|fty)\\.(service|target)$|(\\.timer|\\.path)$)' | tr '\\n' ' ' | sed -e 's,^ *,,' -e 's, *$,,')\"; if [ -n \"$UNITS\" ] ; then /bin/systemctl stop --no-ask-password --no-block -- $UNITS ; else echo 'No units seem to directly depend on %n to tickle them into stopping' ; fi"

[Install]
RequiredBy=fty-db.target
