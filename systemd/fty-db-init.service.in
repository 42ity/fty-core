# NOTE: This unit also maintains a /var/run/fty-db-ready touch-file
# while it is active, so components can check for its presence rather
# than a systemd status (which is a more expensive operation).

[Unit]
Description=Initialize or update database schema for 42ity services
After=fty-db-engine.service
Requires=fty-db-engine.service
BindsTo=fty-db-engine.service
Conflicts=shutdown.target recovery.target
PartOf=bios.target

[Service]
# Note: a "simple" service causes systemctl to proceed immediately, and
# a "oneshot" can not have "Restart!=no"; for our purposes the "forking"
# with "RemainAfterExit=yes" is what we need, to have the service keep
# trying to start up indefinitely (e.g. initial boot, untouched for days).
Type=forking
User=root
# Unlimited startup...
TimeoutStartSec=0
# More than 90, less than in bios.service
TimeoutStopSec=100
# the service shall be considered active even when all its processes exited
RemainAfterExit=yes
Restart=always
EnvironmentFile=-@prefix@/share/bios/etc/default/bios
EnvironmentFile=-@prefix@/share/bios/etc/default/bios__%n.conf
EnvironmentFile=-@prefix@/share/fty/etc/default/fty
EnvironmentFile=-@prefix@/share/fty/etc/default/fty__%n.conf
EnvironmentFile=-@sysconfdir@/default/bios
EnvironmentFile=-@sysconfdir@/default/bios__%n.conf
EnvironmentFile=-@sysconfdir@/default/fty
EnvironmentFile=-@sysconfdir@/default/fty__%n.conf
Environment="prefix=@prefix@"
ExecStart=@libexecdir@/@PACKAGE@/db-init --db-ready-file /var/run/fty-db-ready
#ExecStartPost=/usr/bin/touch /var/run/fty-db-ready
ExecStop=-/bin/rm -f /var/run/fty-db-ready
ExecStopPost=/bin/dash -c "/bin/systemctl stop -- $(/bin/systemctl show -p WantedBy -p RequiredBy -p BoundTo fty-db-init.service | cut -d= -f2 | tr ' ' '\\n' | egrep -v '^(bios|fty)\\.(service|target)$')"

[Install]
WantedBy=bios.target
Alias=bios-db-init.service
