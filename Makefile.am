# Description: The Makefile (automake template) for the $BIOS project.
# Note: relies on GNU make syntax and features, may fail to work in
# other make programs.

ACLOCAL_AMFLAGS =	-I m4 ${ACLOCAL_FLAGS}
AUTOMAKE_OPTIONS =	color-tests parallel-tests
LDFLAGS_NO_UNDEFS =	-Wl,--no-undefined

# http://www.gnu.org/software/automake/manual/html_node/Basics-of-Distribution.html
# NOTE: "dist" is not "install": The dist rule in the Makefile can be used to
# generate a gzipped tar file and other flavors of archive for distribution.
# Sometimes there are files that must be distributed, but which are not covered
# in the automatic rules. These files should be listed in the EXTRA_DIST
# variable. You can mention files from subdirectories in EXTRA_DIST.
# You can also mention a directory in EXTRA_DIST; in this case the entire
# directory will be recursively copied into the distribution... you can
# use the dist-hook feature to filter the contents (remove ".svn/" etc).
EXTRA_DIST =

bin_PROGRAMS =
check_PROGRAMS =
check_LTLIBRARIES =
client_SCRIPTS =
noinst_LTLIBRARIES =
pkglib_LTLIBRARIES =
check_SCRIPTS =
noinst_SCRIPTS =
dist_noinst_DATA =
# http://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html
# http://www.gnu.org/software/automake/manual/html_node/Sources.html
# A source file listed in BUILT_SOURCES is made on `make all` or `make check`
# (or even `make install`) before other targets are processed. However, such
# a source file is not compiled unless explicitly requested by mentioning it
# in some other _SOURCES variable. 
BUILT_SOURCES =
# http://www.gnu.org/software/automake/manual/html_node/Clean.html
# * If make built it, and it is commonly something that one would want to
#   rebuild (for instance, a .o file), then mostlyclean should delete it.
# * Otherwise, if make built it, then clean should delete it.
# * If configure built it, then distclean should delete it.
CLEANFILES =
DISTCLEANFILES =
DISTCLEANDIRS =
# autoconf does not allow pkglib_PROGRAMS for some reason
clientdir       = ${pkglibexecdir}
client_PROGRAMS =
helperdir       = $(datadir)/@PACKAGE@/scripts
helper_SCRIPTS  =

# test programs executed by CI scripts
# lower-case var with actual list (so targets can be built by explicit request)
# upper-case var picked up by autotools, populated based on configure settings;
#   its relevant "cibindir" is conditionally defined below
cibin_programs =

TESTS =

# Initialize some more variables
pkgconfigdir =			$(libdir)/pkgconfig
pkgconfig_DATA =
pkginclude_HEADERS =
lib_LTLIBRARIES =

# Named by analogy from configure'd myDOXDIR for doxygen
myMANDIR =	docs/man
myDEVDOCDIR =	docs/develop

# Locations of child Makefiles (generated by configure from .am via .in files)
SUBDIRS =	$(myMANDIR) docs/examples tools database/mysql

# These are generated by this Makefile with sed from .in files, and chmod+x'ed
# For many of the scripts here, you also want to update "client_SCRIPTS" below
GENERATEDSCRIPTS = tools/run-test-doc.sh tools/db-init tools/bios-passwd \
	tools/bios-networking tools/verify-fs \
	tools/tntnet-ExecStartPre.sh

# Subdir-distributed file is also generated
GENERATEDDATA =	docs/examples/sudoers.d/bios_00_base
EXTRA_DIST +=	$(GENERATEDSCRIPTS) $(GENERATEDDATA)
CLEANFILES +=	$(GENERATEDSCRIPTS) $(GENERATEDDATA)

# Test data are also part of sources to redistribute
# The COPYING file is symlinked to from the license fixtures
EXTRA_DIST +=	tests/fixtures tests/CI/web/results COPYING

# How to run tntnet from Makefile
RUN_TNTNET_ENVFILE = $(abs_top_builddir)/tests/CI/run_tntnet_make.env
EXTRA_DIST +=	tests/CI/run_tntnet_packaged.env
CLEANFILES +=	$(RUN_TNTNET_ENVFILE)
$(RUN_TNTNET_ENVFILE): $(abs_top_builddir)/Makefile
	mkdir -p "`dirname "$@"`"
	{   echo '# 100% Generated by BIOS Makefile'; \
	     echo 'export LICENSE_DIR="$(abs_top_builddir)/tests/fixtures/license"'; \
	     echo 'export DATADIR_BASE="$(abs_top_builddir)/var"'; \
	     echo 'export TESTPASS="$(abs_top_builddir)/tools/testpass.sh"'; \
	     echo 'export PATH="$(abs_top_builddir)/tools:$(abs_top_srcdir)/tools:$(ci_helperdir):$$PATH"'; \
	     echo 'export NO_SSL="1"'; \
	     echo '[ -z "$$BIOS_LOG_LEVEL" ] && BIOS_LOG_LEVEL="LOG_DEBUG"'; \
	     echo 'export BIOS_LOG_LEVEL'; \
	     echo 'export DATADIR="$$DATADIR_BASE/bios"'; \
	} > $@

RUN_TNTNET = cat "$(RUN_TNTNET_ENVFILE)" || exit; \
	     . "$(RUN_TNTNET_ENVFILE)" || exit; \
	     [ "x${KEEP_LICENSE}" = "xyes" ] || rm -rf "$$DATADIR_BASE"; id; \
	     mkdir -p "$$DATADIR" && ls -la "$$DATADIR" && \
	     [ -d "$$DATADIR" ] && [ -w "$$DATADIR" ] && \
	     ${TNTNET} $(abs_top_builddir)/tntnet.xml

# ----------------------------------------------------------------------
# List of header files. The purpose of this list is not dependency
# tracking (which is automatic), but to ensure these files are
# distributed by "make dist" although not "installed".

dist_noinst_HEADERS = 

# Clean up products of configure script
DISTCLEANFILES += \
		$(addsuffix /Makefile.in,$(SUBDIRS) .) \
		aclocal.m4 config.h.in config.h.in~ config.log \
		m4/libtool.m4 \
		m4/ltoptions.m4 \
		m4/ltsugar.m4 \
		m4/ltversion.m4 \
		m4/lt~obsolete.m4 \
		build-aux/compile* \
		build-aux/config* \
		build-aux/depcomp* \
		build-aux/install* \
		build-aux/ltmain* \
		build-aux/missing* \
		build-aux/test* \
		autom4te.cache/output* \
		autom4te.cache/traces* \
		autom4te.cache/requests \
		tests/CI/web/log/*.log

# These are deleted by "distclean-local-dirs" if they exist and are empty
# The "distclean-generic" with "rm DISTCLEANFILES" is a dependency for this
DISTCLEANDIRS += \
		autom4te.cache \
		build-aux \
		config \
		tests/CI/web/log

# recommended by daemon(7)
DISTCHECK_CONFIGURE_FLAGS = \
        --with-systemdsystemunitdir=$$dc_install_base/$(systemdsystemunitdir) \
        --with-systemdsystempresetdir=$$dc_install_base/$(systemdsystempresetdir) \
        --with-systemdtmpfilesdir=$$dc_install_base/$(systemdtmpfilesdir)

AM_CPPFLAGS = \
		${my_CPPFLAGS} \
		-include $(abs_top_builddir)/config.h \
		-I$(abs_top_builddir)/include \
		-I$(abs_top_srcdir)/include \
		-I$(abs_top_builddir)/src \
		-I$(abs_top_builddir)/src/shared \
		-I$(abs_top_builddir)/src/include \
		-I$(abs_top_srcdir)/src \
		-I$(abs_top_srcdir)/src/shared \
		-I$(abs_top_srcdir)/src/include \
		-I$(abs_top_builddir)/src/msg \
		-I$(abs_top_srcdir)/src/msg \
		-D__STDC_FORMAT_MACROS

AM_CFLAGS = \
		${my_CFLAGS} \
		$(CFLAG_VISIBILITY) \
		-ffunction-sections \
		-fdata-sections \
		$(LIBZMQ_CFLAGS) \
		$(LIBCZMQ_CFLAGS) \
		$(LIBVARIANT_CFLAGS)

AM_CXXFLAGS = \
		${my_CXXFLAGS} \
		$(CXXFLAG_VISIBILITY) \
		-ffunction-sections \
		-fdata-sections

AM_LDFLAGS = \
		${my_LDFLAGS} \
		-L$(abs_top_builddir) \
	 	-Wl,--gc-sections \
		-Wl,--as-needed

########################################################################
# (Shared) Public $BIOS API Library
# While this location in the Makefile hopefully ensures that this is
# built before other objects, please do not neglect proper definition
# of _DEPENDENCIES variables
########################################################################

# Current interface number
LIBBIOSAPI_CURRENT=0
# Revision (implementation number) within current interface
LIBBIOSAPI_REVISION=0
# How many previous interfaces are still supported
LIBBIOSAPI_AGE=0

# copy from autoconf manual, note single suffix rules can't be used there!!
# NOTE: For non-Makefiles (e.g. for sources), .in conversions should be done in
# the Makefiles so as to process all the dependencies as sources are updated!
autopathedit = ${SED} \
	-e 's|@myDBpath[@]|$(myDBpath)|g' \
	-e 's|@top_srcdir[@]|$(top_srcdir)|g' \
	-e 's|@top_builddir[@]|$(top_builddir)|g' \
	-e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \
	-e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \
	-e 's|@mysrcDIR[@]|$(mysrcDIR)|g' \
	-e 's|@srcdir[@]|$(srcdir)|g' \
	-e 's|@myDOXDIR[@]|$(myDOXDIR)|g' \
	-e 's|@mydoxylog[@]|$(mydoxylog)|g' \
	-e 's|@HAVE_DOXYGEN[@]|$(HAVE_DOXYGEN)|g' \
	-e 's|@datadir[@]|$(datadir)|g' \
	-e 's|@datarootdir[@]|$(datarootdir)|g' \
	-e 's|@PACKAGE[@]|$(PACKAGE)|g' \
	-e 's|@PACKAGE_NAME[@]|$(PACKAGE_NAME)|g' \
	-e 's|@PACKAGE_VERSION[@]|$(PACKAGE_VERSION)|g' \
	-e 's|@prefix[@]|$(prefix)|g' \
	-e 's|@sysconfdir[@]|$(sysconfdir)|g' \
	-e 's|@libexecdir[@]|$(libexecdir)|g' \
	-e 's|@libdir[@]|$(libdir)|g'

define process-in-file =
	echo "  SED      $(1) => $(2)"; rm -f $(2); mkdir -p "`dirname "$(2)"`"; $(autopathedit) < "$(1)" > "$(2)" || exit $$?
endef

# Catch-all undetailed recipes for .in files to be converted into sources
# Also used from sub-Makefiles, see docs/examples/Makefile.am for call-syntax
# Note that some files should not be regenerated by the Makefile via SED when
# pulled by EXTRA_DIST, so we just verify it exists
%:: %.in $(abs_top_builddir)/Makefile
	@case "`basename "$@"`" in \
	    config.h|Makefile) \
	        if [ -s "$@" ] ; then \
	            echo "  SKIP-SED $@.in" && exit 0 ; \
	        else echo "ERROR: Missing file $@ that should have been generated by configure script!" >&2; exit 1; \
		fi ;; \
	 esac; \
	 $(call process-in-file,$<,$@) ; \
	 for F in $(GENERATEDSCRIPTS) ; do case "$@" in "$$F"|*/"$$F") echo "  CHMOD+X  $@"; chmod +x "$@" || exit $? ;; esac ; done ; true

# Note the public API binary library files are installed to the system
# common $(libdir), not private $(pkglibdir) like e.g. REST API module
lib_LTLIBRARIES +=		libbiosapi.la

libbiosapi_la_HEADERS_noinst = \
				$(top_srcdir)/include/app.h \
				$(top_srcdir)/include/bios_agent.h \
				$(top_srcdir)/include/bios_export.h \
				$(top_srcdir)/include/agents.h \
				$(top_srcdir)/include/ymsg.h

# where to install the headers on the system
libbiosapi_ladir =		$(includedir)/@PACKAGE@

libbiosapi_la_SOURCES = \
				src/api/app.c \
				src/api/bios_agent.c \
				src/api/agents.c \
				src/api/ymsg.c \
				src/include/defs.h \
				$(libbiosapi_la_HEADERS_noinst)

libbiosapi_la_LIBADD = \
				libpriv-utils-ymsg.la

libbiosapi_la_CPPFLAGS = \
		$(AM_CPPFLAGS) -DBUILDING_LIBBIOSAPI=1

libbiosapi_la_LDFLAGS = \
		$(AM_LDFLAGS) \
		-fPIC -shared \
		${LIBZMQ_LIBS} ${LIBCZMQ_LIBS} ${LIBMLM_LIBS} \
		-version-info $(LIBBIOSAPI_CURRENT):$(LIBBIOSAPI_REVISION):$(LIBBIOSAPI_AGE) \
		$(LDFLAGS_NO_UNDEFS)

if HAVE_LD_VERSION_SCRIPT
libbiosapi_la_LDFLAGS += \
		-Wl,--version-script=$(top_srcdir)/src/api/libbiosapi.sym
else
libbiosapi_la_LDFLAGS += \
		-export-symbols $(top_srcdir)/src/api/libbiosapi.sym
endif

libbiosapi_la_DEPENDENCIES =	$(top_srcdir)/src/api/libbiosapi.sym libpriv-utils-ymsg.la
EXTRA_DIST +=			src/api/libbiosapi.sym

pkgconfig_DATA +=		src/api/libbiosapi.pc
EXTRA_DIST +=			src/api/libbiosapi.pc.in  src/api/libbiosapi.pc
DISTCLEANFILES +=		src/api/libbiosapi.pc

pkginclude_HEADERS += 		$(libbiosapi_la_HEADERS_noinst)
dist_noinst_HEADERS +=		$(libbiosapi_la_HEADERS_noinst)

include/bios_agent++.h: tools/bios_agent++.h.sh tools/bios_agent++.h.in include/bios_agent.h
	abs_top_srcdir=$(abs_top_srcdir) abs_top_builddir=$(abs_top_builddir) "$<"

BUILT_SOURCES += include/bios_agent++.h
EXTRA_DIST += tools/bios_agent++.h.sh tools/bios_agent++.h.in

#----------------------------------------------------------------------
# Some of our code is arranged into private libraries used during
# build, but not published or distributed outside the build-tree.

noinst_LTLIBRARIES += 		libpriv-tntnet-mlm.la

libpriv_tntnet_mlm_la_SOURCES = \
					src/shared/tntmlm.h \
					src/shared/tntmlm.cc

noinst_LTLIBRARIES += 		libpriv-utils-web.la

libpriv_utils_web_la_SOURCES = \
				src/shared/utils_web.h \
				src/shared/utils_web.cc

noinst_LTLIBRARIES += 		libpriv-utils-plusplus.la

libpriv_utils_plusplus_la_SOURCES = \
				src/shared/utils++.cc \
				src/shared/utils++.h \
				src/shared/filesystem.h \
				src/shared/filesystem.cc

noinst_LTLIBRARIES += 		libpriv-utils-ymsg.la

libpriv_utils_ymsg_la_SOURCES = \
				src/shared/utils_ymsg.c \
				src/shared/utils_ymsg.h \
				src/shared/utils_ymsg++.cc \
				src/shared/utils_ymsg++.h \
				src/shared/utils_app.c \
				src/shared/utils_app.h \
				src/include/cleanup.h

libpriv_utils_ymsg_la_LIBADD =  libpriv-utils.la

noinst_LTLIBRARIES += 		libpriv-defs.la

libpriv_defs_la_SOURCES = 	src/include/str_defs.c \
				src/include/str_defs.h

noinst_LTLIBRARIES += 		libpriv-git-details-override.la

libpriv_git_details_override_la_SOURCES = \
				src/include/git_details_override.h \
				src/include/git_details_override.c

libpriv_git_details_override_la_DEPENDENCIES = \
				$(abs_top_builddir)/.git_details

noinst_LTLIBRARIES += 		libpriv-utils.la

libpriv_utils_la_SOURCES = 	src/shared/utils.c \
				src/shared/utils.h \
				src/include/str_defs.h \
				src/include/defs.h

libpriv_utils_la_LIBADD = 	libpriv-defs.la


noinst_LTLIBRARIES += 		libpriv-log.la

libpriv_log_la_SOURCES = 	src/shared/log.h \
				src/shared/log.c

noinst_LTLIBRARIES += \
				libpriv-subprocess.la

libpriv_subprocess_la_SOURCES = src/shared/subprocess.h \
				src/shared/subprocess.cc \
				src/shared/augtool.h \
				src/shared/augtool.cc


libpriv_subprocess_la_LIBADD = ${CXXTOOLS_LIBS}

noinst_LTLIBRARIES += 		libpriv-cidr.la

libpriv_cidr_la_SOURCES = 	src/shared/cidr.h \
				src/shared/cidr.cc

noinst_LTLIBRARIES +=		libpriv-csv.la

libpriv_csv_la_SOURCES =	src/shared/csv.h \
				src/shared/csv.cc

libpriv_csv_la_CPPFLAGS =$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_src_dir)/src/msg

libpriv_csv_la_LIBADD = ${CXXTOOLS_LIBS}

noinst_LTLIBRARIES += 		libpriv-db.la

libpriv_db_la_SOURCES = \
			src/persist/assetcrud.cc \
			src/persist/assetcrud.h \
			src/persist/assettopology.cc \
			src/persist/assettopology.h \
			src/persist/persist_error.cc \
			src/persist/persist_error.h \
			src/persist/monitor.cc \
			src/persist/monitor.h \
			src/persist/dbhelpers.cc \
			src/db/dbhelpers.h \
			src/persist/ymsg-asset.h \
			src/persist/ymsg-asset.cc \
			src/db/agentstate/agentstate.cc \
			src/db/agentstate/agentstate.h \
			src/db/agentstate.h \
			tools/dbpath.cc \
			src/shared/asset_types.cc \
			src/shared/asset_types.h \
			src/shared/dbtypes.h

libpriv_db_la_CPPFLAGS = $(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/ \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_builddir)/src/persist

libpriv_db_la_LIBADD =	libbiosapi.la \
			libpriv-log.la \
			libpriv-csv.la \
			libpriv-db-assets.la \
			libpriv-utils-plusplus.la \
			libpriv-topic-cache.la

noinst_LTLIBRARIES += 	libpriv-db-measurements.la

libpriv_db_measurements_la_SOURCES = \
			src/db/measurements/measurement.cc \
			src/db/measurements/measurement.h \
			src/db/measurements.h \
			src/db/types.h

libpriv_db_measurements_la_CPPFLAGS = $(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_srcdir)/src \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_builddir)/tools

#libpriv_db_measurements_la_LIBADD =	libpriv-utils.la


noinst_LTLIBRARIES += 	libpriv-db-assets.la

HEADERS_ASSETS = \
			src/db/assets.h \
			src/db/assets/assetcr.h \
			src/db/assets/assetr.h \
			src/db/assets/assetu.h \
			src/db/assets/assetd.h \
			src/db/assetdef.h

libpriv_db_assets_la_SOURCES = \
			$(HEADERS_ASSETS) \
			src/db/assets/assetcr.cc \
			src/db/assets/assetr.cc \
			src/db/assets/assetu.cc \
			src/db/assets/assetd.cc \
			src/db/inout.h \
			src/db/inout/importcsv.cc \
			src/db/inout/exportcsv.cc \
			src/db/asset_general.cc \
			src/db/asset_general.h

libpriv_db_assets_la_CPPFLAGS = $(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_srcdir)/src \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_builddir)/tools

#####
noinst_LTLIBRARIES +=	libpriv-proto.la

libpriv_proto_la_SOURCES = \
			src/msg/asset_msg.c \
			src/msg/asset_msg.h \
			src/msg/common_msg.c \
			src/msg/common_msg.h

libpriv_proto_la_LIBADD = ${CXXTOOLS_LIBS} libbiosapi.la

noinst_LTLIBRARIES +=	libpriv-magic.la
libpriv_magic_la_SOURCES = \
			src/shared/magic.cc \
			src/shared/bios-magic.h

noinst_LTLIBRARIES +=	libpriv-topic-cache.la
libpriv_topic_cache_la_SOURCES = \
			src/shared/topic_cache.cc \
			src/shared/topic_cache.h

noinst_LTLIBRARIES += 	libpriv-configure-inform.la

libpriv_configure_inform_la_SOURCES = \
			src/agents/configure_inform/configure_inform.cc \
			src/agents/configure_inform/configure_inform.h

libpriv_configure_inform_la_CPPFLAGS = $(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_srcdir)/src \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_builddir)/src/persist


#----------------------------------------------------------------------

# Tester for the doxygen output sanity
check_SCRIPTS +=	tools/run-test-doc.sh

# Needed at least for the distcheck (post distribution tests)
EXTRA_DIST +=		tools/run-test.sh
LOG_COMPILER =		$(abs_top_srcdir)/tools/run-test.sh


#Test case examples:
#
#thisTestOnly            Matches the test case called, 'thisTestOnly'
#"this test only"        Matches the test case called, 'this test only'
#these*                  Matches all cases starting with 'these'
#exclude:notThis         Matches all tests except, 'notThis'
#~notThis                Matches all tests except, 'notThis'
#~*private*              Matches all tests except those that contain 'private'
#a* ~ab* abc             Matches all tests that start with 'a', except those that
#                        start with 'ab', except 'abc', which is included
#
#Names within square brackets are interpreted as tags. A series of tags form an AND expression wheras a comma-separated sequence forms an OR expression. e.g.:
#
#[one][two],[three]
# setup using AM_LOG_FLAGS see an example
# AM_LOG_FLAGS = 				~[db]

check_LTLIBRARIES += 			libpriv-test-run.la

libpriv_test_run_la_SOURCES = 		tests/include/catch.hpp \
					tests/test-run.cc

libpriv_test_run_la_CPPFLAGS =		$(AM_CPPFLAGS) \
					-I$(abs_top_srcdir)/tests/include/

#----------------------------------------------------------------------
#                        TNTnet
#----------------------------------------------------------------------

SUFFIXES=.ecpp .gif .jpg .css .js .cpp

# Note that apparently "make dist(check)" adds all *.cpp files to its tarball
# including those that are generated here. And does not add *.ecpp by default.
# Not-including the build *.cpp into dist is tricky, but does not matter much.
EXTRA_DIST +=				$(top_srcdir)/src/web/src/*.ecpp

src/web/src/sysinfo.cpp: src/include/git_details_override.h

.ecpp.cpp:
	${ECPPC} ${ECPPFLAGS} ${ECPPFLAGS_CPP} -o $@ $<
.gif.cpp:
	${ECPPC} ${ECPPFLAGS} -m image/gif ${ECPPFLAGS_GIF} -b -o $@ $<
.jpg.cpp:
	${ECPPC} ${ECPPFLAGS} -m image/jpg ${ECPPFLAGS_JPG} -b -o $@ $<
.png.cpp:
	${ECPPC} ${ECPPFLAGS} -m image/png ${ECPPFLAGS_PNG} -b -o $@ $<
.ico.cpp:
	${ECPPC} ${ECPPFLAGS} -m image/x-icon ${ECPPFLAGS_ICO} -b -o $@ $<
.css.cpp:
	${ECPPC} ${ECPPFLAGS} -m text/css ${ECPPFLAGS_CSS} -b -o $@ $<
.js.cpp:
	${ECPPC} ${ECPPFLAGS} -m application/javascript ${ECPPFLAGS_JS} -b -o $@ $<

#----------------------------------------------------------------------
#                        Unit tests
#----------------------------------------------------------------------

###
check_PROGRAMS += test-web-helpers

test_web_helpers_SOURCES = 	tests/web/src/test-helpers.cc \
							src/web/src/helpers.cc

test_web_helpers_LDADD =    libpriv-test-run.la \
				            libpriv-log.la \
				            libpriv-utils-web.la

test_web_helpers_CPPFLAGS =	$(AM_CPPFLAGS) \
							-I$(abs_top_srcdir)/tests/include/ \
							-I$(abs_top_srcdir)/src/web/include

test_web_helpers_LDFLAGS =	-ltntnet ${CXXTOOLS_LIBS} $(LIBCZMQ_LIBS)

###
check_PROGRAMS +=	test-utils-web	

test_utils_web_SOURCES = \
			src/shared/utils_web.h \
			tests/shared/test-utils-web.cc

test_utils_web_LDADD = \
			libpriv-utils-web.la \
			libpriv-test-run.la

test_utils_web_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/

test_utils_web_LDFLAGS =	${CXXTOOLS_LIBS}

###
check_PROGRAMS +=	test-tntmlm	

test_tntmlm_SOURCES = \
			src/shared/tntmlm.h \
			src/shared/tntmlm.cc \
			tests/shared/test-tntmlm.cc

test_tntmlm_LDADD = \
			libpriv-utils-plusplus.la \
			libpriv-log.la \
			libpriv-test-run.la

test_tntmlm_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/shared/

test_tntmlm_LDFLAGS =	${LIBCZMQ_LIBS} ${LIBMLM_LIBS} ${CXXTOOLS_LIBS}

check_PROGRAMS +=	test-utils-plusplus	

test_utils_plusplus_SOURCES = \
			src/shared/utils++.h \
			tests/shared/test-utils++.cc

test_utils_plusplus_LDADD = \
			libpriv-utils-plusplus.la \
			libpriv-test-run.la

test_utils_plusplus_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/

test_utils_plusplus_LDFLAGS =	${LIBCZMQ_LIBS}

check_PROGRAMS += 	test-utils

test_utils_SOURCES = 	src/shared/utils.h \
			tests/shared/test-utils.cc

test_utils_LDADD = 	libpriv-utils.la \
			libpriv-test-run.la \
			libpriv-defs.la \
			libpriv-utils-plusplus.la

test_utils_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/

test_utils_LDFLAGS =	${LIBCZMQ_LIBS}

check_PROGRAMS += 	test-log

test_log_SOURCES = 	src/shared/log.h \
			src/shared/utils.h \
			tests/shared/test-log.cc

test_log_LDADD = 	libpriv-log.la \
			libpriv-utils.la \
			libpriv-test-run.la
test_log_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/

check_PROGRAMS += 			test-subprocess
test_subprocess_SOURCES = 		src/shared/subprocess.h \
					tests/shared/test-subprocess.cc
test_subprocess_LDADD = 		libpriv-subprocess.la \
					libpriv-test-run.la
test_subprocess_CPPFLAGS =		$(AM_CPPFLAGS) \
					-I$(abs_top_srcdir)/tests/include/
test_subprocess_LDFLAGS =		${CXXTOOLS_LIBS} -lczmq

check_PROGRAMS += 	test-cidr
test_cidr_SOURCES = 	src/shared/cidr.cc \
			tests/shared/test-cidr.cc
test_cidr_LDADD = 	libpriv-test-run.la
test_cidr_CPPFLAGS = 	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/
test_cidr_LDFLAGS =	-lcidr


check_PROGRAMS += 	test-csv

test_csv_SOURCES =		src/shared/csv.h \
					    tests/shared/test-csv.cc

test_csv_LDADD = 		libpriv-csv.la \
						libpriv-log.la \
					    libpriv-test-run.la

test_csv_CPPFLAGS =		$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/shared \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_srcdir)/src/msg \
			-I$(abs_top_srcdir)/tests/include

test_csv_LDFLAGS =		${CXXTOOLS_LIBS}  -ltntdb

check_PROGRAMS += 	test-agents

test_agents_SOURCES = \
			tests/api/test-agents.cc

test_agents_LDADD = \
			libpriv-proto.la \
			libpriv-test-run.la \
			libpriv-log.la \
			libpriv-utils.la \
			libpriv-defs.la \
			libpriv-utils-ymsg.la

test_agents_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools

test_agents_LDFLAGS = \
			${CXXTOOLS_LIBS} ${LIBCZMQ_LIBS}

### The unit-tester for some routines from libbiosapi
check_PROGRAMS +=		test-libbiosapiut
test_libbiosapiut_SOURCES =	tests/api/test-libbiosapiut.cc
test_libbiosapiut_CPPFLAGS = \
			-I$(abs_top_srcdir)/tests/include \
			-I$(abs_top_srcdir)/include \
			-I$(abs_top_srcdir)/src/msg \
			-I$(abs_top_srcdir)/src/include
test_libbiosapiut_LDADD =	libpriv-test-run.la libpriv-proto.la -lbiosapi
test_libbiosapiut_DEPENDENCIES = \
				libpriv-test-run.la \
				libpriv-proto.la \
				libbiosapi.la

### agent autoconfig tests

check_PROGRAMS += 	test-autoconfig
test_autoconfig_SOURCES = tests/agents/autoconfig/test-autoconfig.cc \
						  src/agents/autoconfig/Configurator.h \
						  src/agents/autoconfig/RuleConfigurator.h \
						  src/agents/autoconfig/RuleConfigurator.cc \
		         		  src/agents/autoconfig/bits.cc \
						  src/agents/autoconfig/bits.h


test_autoconfig_LDADD = \
			libpriv-defs.la \
			libpriv-log.la \
			libpriv-test-run.la \
			libpriv-subprocess.la \
			libpriv-utils.la \
			libpriv-utils-web.la \
			libpriv-utils-plusplus.la

test_autoconfig_LDFLAGS = $(LIBCZMQ_LIBS) $(CXXTOOLS_LIBS) ${LIBMLM_LIBS} -lbiosapi -ltntdb

test_autoconfig_DEPENDENCIES = $(test_autoconfig_LDADD) \
				libbiosapi.la

test_autoconfig_CPPFLAGS = $(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/shared \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/agents/autoconfig/ \
			-DTDIR=$(abs_top_srcdir)/tests/agents/autoconfig/


###


#----------------------------------------------------------------------
#                        CI tests
#----------------------------------------------------------------------

cibin_programs += 	test-loadcsv

test_loadcsv_SOURCES = 	tests/persist/test-loadcsv.cc

test_loadcsv_LDADD = \
			libpriv-db-assets.la \
			libpriv-db-measurements.la \
			libpriv-db.la \
			libpriv-log.la \
			libpriv-proto.la \
			libpriv-csv.la \
			libpriv-utils.la \
			libpriv-utils-plusplus.la \
			libpriv-test-run.la

test_loadcsv_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/src/ \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools

test_loadcsv_LDFLAGS =	-ltntdb ${CXXTOOLS_LIBS}


cibin_programs += 	test-db2

test_db2_SOURCES = \
			tests/persist/test-realdatamonitor.cc

test_db2_LDADD = \
			libpriv-log.la \
			libpriv-db.la \
			libpriv-proto.la \
			libpriv-db-measurements.la \
			libpriv-utils.la \
			libpriv-defs.la \
			libpriv-test-run.la \
			libpriv-utils-ymsg.la

test_db2_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/src

test_db2_LDFLAGS =	-ltntdb ${CXXTOOLS_LIBS} -lcidr ${LIBCZMQ_LIBS}

cibin_programs += 	test-dbtopology

test_dbtopology_SOURCES = \
			tests/persist/test-topology.cc \
			tests/persist/test-topology-power-to.cc \
			tests/persist/test-topology-power-from.cc \
			tests/persist/test-topology-power-datacenter.cc \
			tests/persist/test-topology-power-group.cc \
			tests/persist/test-topology-location-from.cc \
			tests/persist/test-topology-location-to.cc

test_dbtopology_LDADD = \
			libpriv-db.la \
			libpriv-proto.la \
			libpriv-test-run.la \
			libpriv-log.la

test_dbtopology_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_builddir)/tools

test_dbtopology_LDFLAGS = \
			-ltntdb ${CXXTOOLS_LIBS} -lcidr ${LIBCZMQ_LIBS}


cibin_programs += 	test-db-asset-crud

test_db_asset_crud_SOURCES = \
			tests/persist/test-asset-crud.cc \
			tests/persist/test-asset-crud1.cc

test_db_asset_crud_LDADD = \
			libpriv-db.la \
			libpriv-db-assets.la \
			libpriv-db-measurements.la \
			libpriv-proto.la \
			libpriv-test-run.la \
			libpriv-log.la

test_db_asset_crud_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/ \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools

test_db_asset_crud_LDFLAGS = \
			-ltntdb ${CXXTOOLS_LIBS} -lcidr ${LIBCZMQ_LIBS}


#### total power tests
cibin_programs += 	test-totalpower

test_totalpower_SOURCES = \
			tests/persist/test-rack-power.cc \
			tests/persist/test-dc-power.cc 

test_totalpower_LDADD = \
			libpriv-db.la \
			libpriv-utils.la \
			libpriv-proto.la \
			libpriv-test-run.la \
			libpriv-log.la

test_totalpower_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools

test_totalpower_LDFLAGS = \
			-ltntdb ${CXXTOOLS_LIBS} -lcidr ${LIBCZMQ_LIBS}


# Do we build and install CI programs by default? (see configure)
cibin_programs_list := $(cibin_programs)
cibindir = ${pkgbindir}
if ENABLE_CI_TESTS
cibin_PROGRAMS = $(cibin_programs)
else
# Try to cheat automake into NOT building these programs on simple "make check"
cibin_PROGRAMS =
override cibin_programs =
endif

# These may be built explicitly, so should be removable in any case
CLEANFILES += $(cibin_programs_list)

### Verification that bios_web.so is in fact usable on binary level
### Note that this creates no retainable output file
web-link-test: bios_web.la
			@$(CXX) $(AM_CPPFLAGS) $(AM_CXXFLAGS) -o /dev/null \
			$(abs_top_srcdir)/tests/web-linking-test.cc \
			${CXXTOOLS_LIBS} -ltntnet \
			$(abs_top_builddir)/.libs/bios_web.so && \
			echo "PASS: dynamic-link compilation test: everything for bios_web.so does link ok!" || \
			( R=$$?; echo "FAIL ($$R): dynamic-link compilation test: bios_web.so unusable"; exit $$R; )

EXTRA_DIST +=		tests/web-linking-test.cc

TESTS += $(check_PROGRAMS)
TESTS += $(check_SCRIPTS)

#------------------------------~/bin/$1----------------------------------------
#                        binaries
#----------------------------------------------------------------------

bin_PROGRAMS += 		generate_measurement

generate_measurement_SOURCES =	tools/generate_measurement.cc

generate_measurement_LDFLAGS =	${LIBCZMQ_LIBS} ${LIBMLM_LIBS} ${LIBBIOSPROTO_LIBS}

generate_measurement_CPPFLAGS =	$(AM_CPPFLAGS)

client_SCRIPTS +=	tools/db-init

EXTRA_DIST +=		$(top_srcdir)/tools/dbinit.h
#			$(top_srcdir)/tools/db-init.in \
#			$(top_srcdir)/tools/bios-passwd.in

dist_noinst_HEADERS += \
			src/msg/asset_msg.h \
			src/shared/asset_types.h

client_SCRIPTS +=	tools/systemctl tools/testpass.sh tools/update-rc3
EXTRA_DIST +=		tools/systemctl tools/testpass.sh tools/update-rc3

cibin_programs += bios-csv
bios_csv_SOURCES = tests/db/bios-csv.cc
bios_csv_CPPFLAGS = \
						  $(AM_CPPFLAGS) \
						  -I $(abs_top_srcdir)/src/ \
						  -I $(abs_top_srcdir)/src/persist/ \
						  -I $(abs_top_srcdir)/src/share/
bios_csv_LDADD = \
						 libpriv-db-assets.la \
						 libpriv-db-measurements.la \
						 libpriv-db.la \
						 libpriv-proto.la \
						 libpriv-log.la \
						 libpriv-utils.la \
						 libpriv-utils-plusplus.la \
						 libpriv-csv.la
bios_csv_LDFLAGS = \
						 ${CXXTOOLS_LIBS} -ltntdb


client_PROGRAMS +=	agent-autoconfig

agent_autoconfig_SOURCES = \
			src/agents/autoconfig/agent-autoconfig.cc \
			src/agents/autoconfig/agent-autoconfig.h \
			src/agents/autoconfig/bits.cc \
			src/agents/autoconfig/bits.h \
			src/agents/autoconfig/Configurator.h \
			src/agents/autoconfig/ConfiguratorFactory.h \
			src/agents/autoconfig/ConfiguratorFactory.cc \
			src/agents/autoconfig/DCTHConfigurator.cc \
			src/agents/autoconfig/DCTHConfigurator.h \
			src/agents/autoconfig/RuleConfigurator.h \
			src/agents/autoconfig/RuleConfigurator.cc \
			src/agents/autoconfig/UptimeConfigurator.h \
			src/agents/autoconfig/UptimeConfigurator.cc \
			src/agents/autoconfig/TemplateRuleConfigurator.h \
			src/agents/autoconfig/TemplateRuleConfigurator.cc 

agent_autoconfig_LDADD = \
			libpriv-log.la \
			libpriv-db.la \
			libpriv-proto.la \
			libbiosapi.la \
			libpriv-log.la \
			libpriv-cidr.la \
			libpriv-defs.la \
			libpriv-subprocess.la \
			libpriv-utils-ymsg.la \
			libpriv-utils-web.la \
			libpriv-utils-plusplus.la

# FIXME remove utils ymsg

agent_autoconfig_LDFLAGS =	${LIBCZMQ_LIBS} ${LIBMLM_LIBS} -lcidr -lbiosapi -ltntdb

agent_autoconfig_CPPFLAGS =	$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tools \
				-I$(abs_top_srcdir)/src/persist \
				-I$(abs_top_srcdir)/src/shared \
				-I$(abs_top_srcdir)/src/db \
				-I$(abs_top_builddir)/tools

#XXX: $(localstatedir) did not worked
#FIXME: installing things to /var is not a good idea according FHS or GNU standards
#		so this needs to be reconsidered later on (datadir is preffered location)
template_ruledir = $(datadir)/$(PACKAGE)/agent-autoconfig
RULE_TEMPLATES = \
			src/agents/autoconfig/rule_templates/average.humidity@__datacenter__.rule \
			src/agents/autoconfig/rule_templates/average.temperature@__datacenter__.rule \
			src/agents/autoconfig/rule_templates/charge.battery@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/load.default@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/load.input_1phase@__device_epdu__.rule \
			src/agents/autoconfig/rule_templates/load.input_3phase@__device_epdu__.rule \
			src/agents/autoconfig/rule_templates/lowbattery@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/onbattery@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/onbypass@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/phase_imbalance@__datacenter__.rule \
			src/agents/autoconfig/rule_templates/phase_imbalance@__device_epdu__.rule \
			src/agents/autoconfig/rule_templates/phase_imbalance@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/phase_imbalance@__rack__.rule \
			src/agents/autoconfig/rule_templates/realpower.default_1phase@__rack__.rule \
			src/agents/autoconfig/rule_templates/realpower.default_3phase@__rack__.rule \
			src/agents/autoconfig/rule_templates/realpower.default@__datacenter__.rule \
			src/agents/autoconfig/rule_templates/section_load@__device_epdu__.rule \
			src/agents/autoconfig/rule_templates/temperature.default@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/voltage.input_1phase@__device_epdu__.rule \
			src/agents/autoconfig/rule_templates/voltage.input_1phase@__device_ups__.rule \
			src/agents/autoconfig/rule_templates/voltage.input_3phase@__device_epdu__.rule \
			src/agents/autoconfig/rule_templates/voltage.input_3phase@__device_ups__.rule

template_rule_DATA =	$(RULE_TEMPLATES)
EXTRA_DIST +=		$(RULE_TEMPLATES)

client_PROGRAMS +=	agent-inventory

agent_inventory_SOURCES = \
			src/agents/inventory/agent-inventory.cc \
			tools/dbpath.h

agent_inventory_LDFLAGS =	${LIBCZMQ_LIBS} ${LIBMLM_LIBS} \
							${LIBBIOSPROTO_LIBS} \
							-ltntdb -lbiosapi -lcidr

agent_inventory_LDADD = \
			libpriv-db.la \
			libpriv-cidr.la \
			libpriv-defs.la \
			libpriv-log.la \
			libpriv-proto.la \
			libbiosapi.la \
			libpriv-utils-ymsg.la

agent_inventory_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/src/persist \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/src/persist

client_PROGRAMS += warranty-metric

warranty_metric_SOURCES = src/warranty/warranty-metric.cc

warranty_metric_LDFLAGS = ${CXXTOOLS_LIBS} -ltntdb -lbiosproto -lmlm

warranty_metric_LDADD = \
			libpriv-log.la \
			libpriv-db.la

warranty_metric_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_srcdir)/src/db

client_SCRIPTS +=	tools/bios-passwd \
			tools/bios-networking \
			tools/fake-th \
			tools/verify-fs

helper_SCRIPTS +=	tools/tntnet-ExecStartPre.sh

EXTRA_DIST +=		tools/fake-th

# Recipe needed to fulfill ci-rc-bios.sh logic
fake-th: tools/fake-th


###################################################################
# Web Library (tntnet dynamic module for $BIOS REST API)
###################################################################
pkglib_LTLIBRARIES +=	bios_web.la

# Many but not all of CPP files with bios_web.la are generated from ECPP files
# List them explicitly as separate sets, so that generated files can be cleaned
BUILT_SOURCES_bios_web_la = \
                      src/include/git_details_override.h                      \
                      src/web/src/auth.cpp  src/web/src/auth-verify.cpp       \
                      src/web/src/ssl-redirect.cpp      \
                      src/web/src/topology_power.cpp                          \
                      src/web/src/asset_GET.cpp src/web/src/asset_PUT.cpp     \
                      src/web/src/asset_DELETE.cpp src/web/src/asset_POST.cpp \
                      src/web/src/json.cpp  src/web/src/asset_list.cpp        \
                      src/web/src/time.cpp  src/web/src/sysinfo.cpp           \
                      src/web/src/current.cpp src/web/src/ui_properties.cpp   \
                      src/web/src/rack_total.cpp                              \
                      src/web/src/topology_location_from.cpp                  \
                      src/web/src/topology_location_to.cpp                    \
                      src/web/src/datacenter_indicators.cpp                   \
                      src/web/src/average.cpp src/web/src/asset_import.cpp    \
                      src/web/src/netcfg.cpp           \
                      src/web/src/uptime.cpp src/web/src/iface.cpp            \
                      src/web/src/license.cpp src/web/src/asset_export.cpp    \
                      src/web/src/admin_passwd.cpp src/web/src/systemctl.cpp  \
                      src/web/src/config.cpp src/web/src/alert_rules_list.cpp \
                      src/web/src/alert_rules_detail.cpp src/web/src/alert_rules.cpp \
                      src/web/src/alert_ack.cpp \
                      src/web/src/alert_list.cpp \
                      src/web/src/assets_in.cpp

# Track real-git and nodist (generated) sources SEPARATELY
nodist_bios_web_la_SOURCES = $(BUILT_SOURCES_bios_web_la)

bios_web_la_SOURCES = \
                      src/web/src/location_helpers.cc   \
                      src/web/src/sasl.cc               \
                      src/web/src/tokens.cc             \
                      src/shared/data.cc                \
                      src/shared/upsstatus.cc           \
                      src/web/src/asset_computed_impl.cc \
                      src/web/src/helpers.cc

# Ensure these files are auto-made before others
BUILT_SOURCES +=	$(BUILT_SOURCES_bios_web_la)

# Ensure these files are cleaned away too
CLEANFILES +=		$(BUILT_SOURCES_bios_web_la)

bios_web_la_CPPFLAGS =	$(AM_CPPFLAGS) \
			${LIBCZMQ_CFLAGS} ${CXXTOOLS_CFLAGS} \
			${LIBSODIUM_CFLAGS} ${LIBSASL2_CFLAGS} \
			${LIBBIOSPROTO_CFLAGS} \
			-DSASLAUTHD_MUX=${SASLAUTHD_MUX} \
			-I$(abs_top_srcdir)/src/web/include \
			-I$(abs_top_srcdir)/src/db \
			-I$(abs_top_srcdir)/src \
			-I$(abs_top_builddir)/tools \
			-I$(abs_top_builddir)/src \
			-I$(abs_top_srcdir)/tools \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/agents/configure_inform

bios_web_la_LDFLAGS = 	${LIBCZMQ_LIBS}	${CXXTOOLS_LIBS} \
			${LIBSODIUM_LIBS} ${LIBSASL2_LIBS} \
			${LIBBIOSPROTO_LIBS} \
			$(LDFLAGS_NO_UNDEFS) \
			-module -lm -ltntdb -ltntnet -lcidr -lmagic -lbiosapi

bios_web_la_LIBADD = \
			libpriv-db.la libpriv-cidr.la libpriv-proto.la \
			libpriv-git-details-override.la \
			libpriv-subprocess.la \
			libpriv-utils-ymsg.la \
			libpriv-db-measurements.la \
			libpriv-magic.la \
			libpriv-configure-inform.la \
			libpriv-tntnet-mlm.la \
			libpriv-utils-web.la

dist_noinst_HEADERS += \
			src/shared/data.h \
			src/web/include/sasl.h \
			src/web/include/helpers.h \
			src/web/include/tokens.h \
			src/persist/assetcrud.h \
			tools/dbpath.h

EXTRA_DIST += \
			src/web/tntnet.xml \
			src/web/src/admin_passwd.ecpp.in

CLEANFILES +=		src/web/src/admin_passwd.ecpp

### This file contains the TNTNET settings relevant for our test runs
### Note: in non-daemon mode, stderr is logged to stderr
tntnet.xml: src/web/tntnet.xml
	${SED} -e 's|\(.*\)\(<!--.*<dir>/</dir>.*-->.*\)|\1<dir>$(abs_top_srcdir)/src/web</dir>\n\1<compPath><entry>$(abs_top_builddir)/.libs</entry></compPath>|' $< > $@ || \
	rm -f $@

### This file contains the TNTNET settings distributed as an example for users
### Note: in daemon mode, "stderr > /dev/null" unless errorLog is defined
tntnet.xml.example: src/web/tntnet.xml
	${SED} -e 's|\(.*\)\(<!--.*<dir>/</dir>.*-->.*\)|\1<dir>$(datarootdir)/@PACKAGE@/web</dir>\n\1<compPath>\n\1\ \ \ <entry>$(pkglibdir)</entry>\n\1\ \ \ <entry>$(libdir)</entry>\n\1</compPath>|' \
	       -e 's|<!-- <errorLog>/var/log/tntnet/error.log</errorLog> -->|<errorLog>/var/log/tntnet/error.log</errorLog>|' \
	       -e 's|<port>8000</port>|<port>80</port>|' \
	       -e 's|<port>8443</port>|<port>443</port>|' \
	       -e 's|<!-- ssl start.*|<!-- ssl start -->|' \
	       -e 's|^\([[:blank:]]*\)ssl end -->|\1<!-- ssl end -->|' \
	       -e 's|<!--\ <daemon>0</daemon>\ -->|<daemon>1</daemon>|' $< > $@ || \
	rm -f $@

exampleconfdir =	$(datarootdir)/@PACKAGE@/examples
exampleconf_DATA =	tntnet.xml.example
EXTRA_DIST +=		$(exampleconf_DATA)
dist_noinst_DATA +=	tntnet.xml $(top_srcdir)/src/web/tntnet.xml

CLEANFILES +=		tntnet.xml tntnet.xml.example tests/CI/tntnet.xml

# Make sure needed files are up-to-date to test web-server for $BIOS REST API
web-test-deps: tntnet.xml bios_web.la web-link-test

# TODO (BIOS-1262): the "install-ci_helperSCRIPTS" recipe installs one script
# into "@libexecdir@/@PACKAGE@/bios-passwd" because this is hardcoded in
# admin_passwd.ecpp.in - not very nice regarding in-tree devtesting.
# Another script is "@libexecdir@/@PACKAGE@/db-init" as required by the
# bios-db-init.service definition (installed into OS root /lib in CI builds).
# This is an optional target - without this script working (including the
# sudoers setup), the REST API tests involving password changes will fail.
ci_helper_SCRIPTS =	tools/bios-passwd tools/db-init tools/testpass.sh tools/systemctl
ci_helperdir =	        $(clientdir)

# This wrapper now comes with two faces
ci_helper_SCRIPTS +=    tools/journalctl
tools/journalctl: tools/systemctl
	rm -f $@; ln -s ./$(<F) $@

# TODO: the "tools/testpass.sh" should be invoked via TESTPASS envvar used
# and exported in RUN_TNTNET - but this does not work for bios-passwd :(
web-test-deps-inst: install-ci_helperSCRIPTS

### Execute the test web-server for $BIOS REST API
# LD_PRELOAD=/path/to/libasan.so is needed for fair play with external libs,
# otherwise "new mlm_stuff; throw(exception)" breaks in ASA as a function
# without a proper return code-path (un-instrumented delete/free involved).
# Note that the execution chain below is backslash-concatenated so that we
# can both set, export and use the LD_PRELOAD value (independent lines are
# executed as different shell scripts by make). That is why ultimate exec
# of the tntnet program is done twice in the same manner.

web-test: $(RUN_TNTNET_ENVFILE) web-test-deps
	@echo "=== Running target $@ with credentials of this user: "; \
	id || true; echo "";
if ENABLE_DEBUG_ASAN
	@LD_PRELOAD="$$LD_PRELOAD `ldd $(abs_top_builddir)/.libs/bios_web.so | grep libasan | awk '{print $$3}'`" || true; \
	LD_PRELOAD="$$LD_PRELOAD `ldd $(abs_top_builddir)/.libs/bios_web.so | grep libtsan | awk '{print $$3}'`" || true; \
	echo "===== Using LD_PRELOAD='$$LD_PRELOAD' for Address Sanitizer"; \
	export LD_PRELOAD; \
	$(RUN_TNTNET)
else
	$(RUN_TNTNET)
endif

#----------------------------------------------------------------------
#                        Extra files and sources
#----------------------------------------------------------------------

EXTRA_DIST += \
			$(top_srcdir)/tools/dbinit.h \
			$(top_srcdir)/tools/dbpath.h \
			$(top_srcdir)/include/*.h \
			$(top_srcdir)/src/msg/*.xml \
			$(top_srcdir)/src/include/*.h \
			$(top_srcdir)/src/agents/*/*.h \
			$(top_srcdir)/src/shared/*.h \
			$(top_srcdir)/src/web/include/*.h \
			$(top_srcdir)/tests/shared/test-csv.cc.*sv

# add CI tests to dist
EXTRA_DIST +=		$(top_srcdir)/tests/CI

# This will be removed from the OS image by the preinstallimage-bios.sh script
obsdir		=  $(datadir)/@PACKAGE@/obs
obs_SCRIPTS	=  obs/preinstallimage-bios.sh

EXTRA_DIST	+= $(obs_SCRIPTS)

# SystemD integrations files; if not enabled - variables remain empty
SYSTEMD_UNITS_LOWLEVEL =
SYSTEMD_UNITS_TARGET_BIOS =
SYSTEMD_UNITS =

SYSTEMD_UNITS_NOTPRESET_LOWLEVEL =
SYSTEMD_UNITS_NOTPRESET_TARGET_BIOS =
SYSTEMD_UNITS_NOTPRESET =

SYSTEMD_UNITS_TIMERIMPL_LOWLEVEL =
SYSTEMD_UNITS_TIMERIMPL_TARGET_BIOS =
SYSTEMD_UNITS_TIMERIMPL =

SYSTEMD_TIMERS_LOWLEVEL =
SYSTEMD_TIMERS_TARGET_BIOS =
SYSTEMD_TIMERS =

SYSTEMD_PRESETS =
SYSTEMD_TARGETS =

# Preconfiguration for systemd-tmpfiles service to create needed paths
SYSTEMD_TMPFILES =

# The subdirectory in source (and build) tree where systemd unit files
# and their .in templates reside, starting from workspace (or build) root
# Note: No leading nor trailing slash is expected here!
SYSTEMD_SUBDIR = systemd

# systemd integration enabled?
if HAVE_SYSTEMD

# These units allow to toggle the entirety of BIOS agents and other related
# services on and off (except a few chosen low-level services that remain
# WantedBy=multi-user.target)
SYSTEMD_TARGETS += bios.target bios.service

# These units are not part of the common bios.target etc. but are to be
# considered rather a part of the operating environment independent of
# the BIOS high-level target groupings.
SYSTEMD_UNITS_LOWLEVEL += \
                        bios-reset-button.service \
                        ifplug-dhcp-autoconf.service \
                        bios-ssh-last-resort.service \
                        bios-networking.service

# These service-units are PartOf and WantedBy the "bios.target"
# And also "tntnet@.service" customized by obs/preinstall.sh
# And also some of the timer units and implementations below
SYSTEMD_UNITS_TARGET_BIOS += \
                        bios-db-init.service \
                        bios-agent-autoconfig.service \
                        bios-agent-inventory.service

# Here we list the actual service-definition files that should be compiled
# Enabled as part of BIOS presets
SYSTEMD_UNITS += $(SYSTEMD_UNITS_TARGET_BIOS) $(SYSTEMD_UNITS_LOWLEVEL)

# These units have unit files installed but are not enabled nor disabled
# by default via presets nor timers (may be enabled in OS image generation
# script or during deployment's lifetime)
#SYSTEMD_UNITS_NOTPRESET_LOWLEVEL +=
SYSTEMD_UNITS_NOTPRESET_TARGET_BIOS += \
                        bios-fake-th.service

SYSTEMD_UNITS_NOTPRESET += $(SYSTEMD_UNITS_NOTPRESET_LOWLEVEL) $(SYSTEMD_UNITS_NOTPRESET_TARGET_BIOS)

# These unit files are compiled, but are not enabled via BIOS presets
SYSTEMD_UNITS_TIMERIMPL_LOWLEVEL += \
                        biostimer-verify-fs.service

SYSTEMD_UNITS_TIMERIMPL_TARGET_BIOS += \
                        biostimer-warranty-metric.service

SYSTEMD_UNITS_TIMERIMPL += $(SYSTEMD_UNITS_TIMERIMPL_LOWLEVEL) $(SYSTEMD_UNITS_TIMERIMPL_TARGET_BIOS)

# These files need no processing, delivered verbatim
# Enabled as part of BIOS presets
SYSTEMD_TIMERS_LOWLEVEL += \
                        biostimer-verify-fs.timer

SYSTEMD_TIMERS_TARGET_BIOS += \
                        biostimer-warranty-metric.timer

SYSTEMD_TIMERS += $(SYSTEMD_TIMERS_LOWLEVEL) $(SYSTEMD_TIMERS_TARGET_BIOS)

# This file is generated to toggle the defined units and targets
# (except those in SYSTEMD_UNITS_NOTPRESET list)
SYSTEMD_PRESETS +=      42-bios-systemd.preset

SYSTEMD_TMPFILES +=	bios-agent-autoconfig.conf

### TODO? Add the build info (git commit, timestamp) to the header comment?
$(SYSTEMD_SUBDIR)/42-bios-systemd.preset: Makefile
	@mkdir -p "$(abs_top_builddir)/$(SYSTEMD_SUBDIR)" "`dirname "$@"`" || true
	@( echo "### This is a generated file with a list of all BIOS-related services with their default state"; \
	  for F in $(SYSTEMD_TARGETS) $(SYSTEMD_UNITS) $(SYSTEMD_TIMERS) ; do echo "enable $$F" ; done ) > $@

# The rules to actually "compile" the service definition files
# is part of catch-all %.in recipe above

# $(systemdsystemunitdir) and $(systemdsystempresetdir) may be defined
# externally by automake/autoconf; otherwise they are empty and should
# effectively resolve to the top_builddir
systemdsystemunit_generated =	$(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_UNITS) $(SYSTEMD_UNITS_TIMERIMPL) $(SYSTEMD_UNITS_NOTPRESET))
systemdsystemunit_DATA =	$(systemdsystemunit_generated) $(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_TIMERS) $(SYSTEMD_TARGETS))
systemdsystempreset_generated =	$(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_PRESETS))
systemdsystempreset_DATA =	$(systemdsystempreset_generated)
# Nothing generated so far for TMPFILES
systemdtmpfiles_DATA =	$(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_TMPFILES))

# auto-cleanup and dist targets
CLEANFILES += $(systemdsystemunit_generated) $(systemdsystempreset_generated)
EXTRA_DIST += $(addprefix $(top_srcdir)/$(SYSTEMD_SUBDIR)/,$(SYSTEMD_TIMERS) $(SYSTEMD_TARGETS) $(SYSTEMD_TMPFILES) $(addsuffix .in,$(SYSTEMD_UNITS) $(SYSTEMD_UNITS_TIMERIMPL) $(SYSTEMD_UNITS_NOTPRESET)))
endif

# Quick links to build the systemd files (if enabled)
systemd-units: systemd-daemons systemd-timers systemd-presets systemd-targets systemd-tmpfiles
systemd-daemons: $(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_UNITS) $(SYSTEMD_UNITS_NOTPRESET))
systemd-timers:  $(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_UNITS_TIMERIMPL))
	if [ x"$(abs_top_builddir)/" = x"$(abs_top_srcdir)/" ] ; then true; else \
	mkdir -p "$(abs_top_builddir)/$(SYSTEMD_SUBDIR)"; \
	for F in $(addprefix $(abs_top_srcdir)/$(SYSTEMD_SUBDIR)/,$(SYSTEMD_TIMERS)) ; do \
	    $(call copy-file,$$F,$(abs_top_builddir)/$(SYSTEMD_SUBDIR)/) || exit $$?; \
	done; fi
systemd-presets: $(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_PRESETS))
systemd-targets: $(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_TARGETS))
systemd-tmpfiles: $(addprefix $(SYSTEMD_SUBDIR)/,$(SYSTEMD_TMPFILES))

clean-systemd-units:
	@if [ x"$(abs_top_builddir)/" != x"$(abs_top_srcdir)/" ] ; then \
	    if [ -n "$(SYSTEMD_TIMERS)" ]; then \
	        $(RM) $(addprefix $(abs_top_builddir)/$(SYSTEMD_SUBDIR)/,$(SYSTEMD_TIMERS)) ; fi ; \
	    if [ -n "$(SYSTEMD_TARGETS)" ]; then \
	        $(RM) $(addprefix $(abs_top_builddir)/$(SYSTEMD_SUBDIR)/,$(SYSTEMD_TARGETS)) ; fi ; \
	fi || true

#----------------------------------------------------------------------
#           list of text-based documentation files (rules below)
# Note that the basic filenames in these variables are relative to the
# project sources' root directory, but later in usage and actual targets
# they are prefixed by the build directory (which may or may not be the
# same as the checked-out source directory, both ways SHOULD work).
#----------------------------------------------------------------------

# For legacy/simplicity several types of file list variables are defined
# below to reference the manually maintained and repository-tracked files
# with documentation in text format, including the sources for automated
# conversion from asciidoc to html (i.e. not doxygen, not manpages).
# See comments below for path/extension expectations for different file types.
# Variables below include:
#
# Auto-generated:
#  TEXTS - list of *.txt files that are delivered by the project. Generated
#	from MAPPED_TXT_DOCS_* lists. Required by "docs-txt" target.
#  HTMLS_ASCIIDOC - list of files generated automatically from asciidoc
#	into HTML (1:1 relation, same dirname/basename, changes extension);
#	the list is generated from MAPPED_TXT_DOCS_ASCIIDOC.
#  HTMLS - list of *.html files (except doxygen) that are delivered by the
#	project (built via target rules if needed); currently this only
#	includes HTMLS_ASCIIDOC. Required by "docs-html" target.
#  CLEAN_TEXTS and CLEAN_HTMLS - list of files generated/copied by dynamic
#	rules lower in this Makefile, so they can be cleaned up too.
#
# Half-manual, half automation:
#  MAPPED_TXT_DOCS_PLAINTEXT and MAPPED_TXT_DOCS_ASCIIDOC - lists of all
#	colon-separated couples of source and destination text filenames
#	which may involve a copy to another directory, another naming,
#	changes of extension, etc. Populated manually and then from the
#	other lists (BASE_DOCS_*, TXT_DOCS_*) with simple deterministic
#	conversion rules from list to mapping entry. These mappings are
#	used to dynamically determine make-recipes and targets for files.
#
# Component lists (populated manually, reprocessed into MAPPED_* lists);
# Note that these lists reference files tracked as part of the project
# sources (not auto-copied, named or generated as in some lists above):
#  BASE_DOCS_ASCIIDOC and BASE_DOCS_PLAINTEXT - the text files without
#	extension, saved in the root of project sources. These variables
#	are used to populate the relevant MAPPED_TXT_DOCS_* lists.
#  TXT_DOCS_ASCIIDOC and TXT_DOCS_PLAINTEXT - lists of *.txt files that
#	would actually be installed; as seen below, the list starts with
#	some files already tracked in the needed location (under docs/).
#	These variables are used to populate MAPPED_TXT_DOCS_* lists.
#
# The definition/processing order should be as follows:
# * Populate the manually tracked lists (BASE_DOCS_*, TXT_DOCS_*) and the
#   initial entries in MAPPED_TXT_DOCS_* (set those mappings which rename
#   text files from tracked source to delivery under "docs/develop/").
# * Define as empty (or very exceptionally pre-populated) the lists in
#   HTMLS_ASCIIDOC, HTMLS, TEXTS as well as automated installation targets
#   like develdoc_DATA.
# * Run macros to populate the rest of MAPPED_TXT_DOCS_* with trivial
#   conversions from BASE_DOCS_* and TXT_DOCS_*.
# * Run macros to define the build targets and recipes for all text files
#   (copying) and add to our targets (TEXTS) and other common lists like
#   EXTRA_DIST and DISTCLEAN automatically.
# * Run macros to define the build targets and recipes for the HTML files
#   created from texts by asciidoc (append to HTMLS_ASCIIDOC).
# * Add the resulting HTMLS_ASCIIDOC to HTMLS.
# * Define the practical targets - to build or clean the whole set of our
#   documentation files.

# Documentation files saved in the project source-code root directory
# as text files without extensions in the name (following GNU standards)
# and written in asciidoc markup
# Note these should have paths relative to project root dir.
BASE_DOCS_ASCIIDOC =	INSTALL INSTALL-referenceOS-debian8 \
			CONTRIBUTING 

# Documentation files saved in the project source-code root directory
# as text files without extensions in the name and written in plain
# text with no expected transformation
# Note these should have paths relative to project root dir.
BASE_DOCS_PLAINTEXT =	AUTHORS COPYING NEWS ChangeLog

# These two seem to have some markup or similar structuring,
# but it is not asciidoc so consider them plaintext for now.
# Note these should have paths relative to project root dir.
BASE_DOCS_PLAINTEXT +=	TODO

# The following files are saved into proper subdirectories, have an
# extension in the filename, and contain asciidoc markup.
# Note these should have paths relative to project root dir.
TXT_DOCS_ASCIIDOC = 	$(myDEVDOCDIR)/README-builder.txt \
			$(myDEVDOCDIR)/README-init-os-accounts.txt

# List of text files that are installed as is (none so far, but see
# below for MAPPED_TXT_DOCS_ASCIIDOC and MAPPED_TXT_DOCS_PLAINTEXT)
TXT_DOCS_PLAINTEXT =


#----------------------------------------------------------------------
#  List of source texts dispersed in the code with automated targeting
#----------------------------------------------------------------------
# The list below is a colon-separated map of filenames copied from
# sources relative to project root (first token) into different names
# under the builddir and final installation (the second token, here
# copied into "docs/develop"), and also maybe compiled into HTML
# (as in case of the _ASCIIDOC list).
# Filenames here should not have spaces and should have the '.txt' suffix.

MAPPED_TXT_DOCS_PLAINTEXT = 

MAPPED_TXT_DOCS_ASCIIDOC = \
	tests/CI/web/README.txt:$(myDEVDOCDIR)/README-web-tests-ciAutomation.txt \
	src/web/README.txt:$(myDEVDOCDIR)/README-web-tests-generalInfo.txt

#################################################################
# Items below are intended for automatic generation and appendage
#################################################################
# Historically some original docs have *.txt names and some don't
# but we solve it by having a target to ensure presence of *.txt
# copies now for all needed files in the same docs directory
# See the MAPPED_TXT_DOCS_ASCIIDOC parsing around this Makefile.
# Here we predefine the HTMLS_ASCIIDOC list as anything that is
# not converted from the MAPPED_TXT_DOCS_ASCIIDOC list, so empty.
HTMLS_ASCIIDOC =

# Ultimate list of HTMLs from generally many sources (except doxygen,
# since that list of targets is not known in advance). Predefined (and
# empty) here, appended later on. Similarly for ultimate text files.
HTMLS =
TEXTS =

# These variables track the compiled/generated/etc. text/html files
# so they can be removed in *clean requests
CLEAN_HTMLS =
CLEAN_TEXTS =

##################################################
# Define delivery of developer documentation:
##################################################
# Target directory for developer documentation after installation
develdocdir = $(datadir)/@PACKAGE@/develop

# Install the non-doxygen docs here (doxygen has its subdir defined below).
# Text files are "originals" or copies under a different name and are always
# expected to be available (to fail the make otherwise is correct action).
# Note that other HTML component targets must be listed explicitly as they
# might appear in the project later on; as for example HTMLS_ASCIIDOC needs
# a conditional enablement (try install only if generatable at all).
# Like above, this list is initially empty (or maybe explicit later on)
# and is appended by some macros below.
develdoc_DATA =

###----------------------------------------------------------------------
###   Magic macros to expand the patterns for text to text file copying
###----------------------------------------------------------------------
# Magic below inspired by this blog post (see description/comments):
#   http://blog.jgc.org/2012/01/using-gnu-makes-define-and-eval-to.html

# Copies from "$1" to "$2", making the subdirectories as needed
define copy-file-cp =
	if test x"$(2)" != x"$(1)" ; then \
	    { test -d "`dirname "$(2)"`" || mkdir -p "`dirname "$(2)"`"; } && \
	    echo "Copy '$(1)' to '$(2)'" && \
	    cp -pf "$(1)" "$(2)" || cp -f "$(1)" "$(2)"; \
	else \
	    echo "Not copying '$(1)' to '$(2)': same file"; \
	fi
endef

# Another way to skin the cat...
define copy-file-install =
	$(INSTALL) -D -T -p -v -m 644 "$1" "$2"
endef

# Generalize the two solutions
define copy-file =
	$(call copy-file-install,$1,$2) || $(call copy-file-cp,$1,$2)
endef

# This macro defines the dependencies and rules to copy the text file
# into the build area. Also adds the filename into lists for install,
# cleanup, ultimately used dependencies, etc.
define depend-copy-file =
$(eval override _MAP_SRC_REL :=	$(firstword $(subst :, ,$(1))) )
$(eval override _MAP_DST_REL :=	$(word 2,$(subst :, ,$(1))) )
$(eval override _MAP_SRC_ABS :=	$(addprefix $(abs_top_srcdir)/,$(_MAP_SRC_REL)) )
$(eval override _MAP_DST_ABS :=	$(addprefix $(abs_top_builddir)/,$(_MAP_DST_REL)) )

# Define the dependency and the rule
$(_MAP_DST_ABS): $(_MAP_SRC_ABS)
	@$$(call copy-file,$$<,$$@)

# Fake dependency for subdir/dist builds
$(_MAP_DST_REL): $(_MAP_DST_ABS)
	@#echo "DEBUG-MAKEFILE-FAKEDEP: Mapped target '$$@' to source '$$<'"

### Target as a text file
$(eval TEXTS +=			$(_MAP_DST_REL) )

### Copy for installation:
$(eval develdoc_DATA +=		$(_MAP_DST_REL) )

### Copy in make dist
$(eval EXTRA_DIST +=		$(_MAP_SRC_REL) )
endef

define canclean-txt-file =
$(eval override _MAP_SRC_REL :=	$(firstword $(subst :, ,$(1))) )
$(eval override _MAP_DST_REL :=	$(word 2,$(subst :, ,$(1))) )

### Cleanup in build
$(eval CLEANFILES +=		$(_MAP_DST_REL) )
$(eval CLEAN_TEXTS +=		$(_MAP_DST_REL) )
endef

# Convert the simple lists defined above into the common mapping tables
# for unprocessable and for asciidoc-able text files:

$(foreach m,$(BASE_DOCS_ASCIIDOC), \
	$(eval MAPPED_TXT_DOCS_ASCIIDOC += ${m}:${myDEVDOCDIR}/${m}.txt ))

$(foreach m,$(BASE_DOCS_PLAINTEXT), \
	$(eval MAPPED_TXT_DOCS_PLAINTEXT += ${m}:${myDEVDOCDIR}/${m}.txt ))

# Add to automatic removal ONLY the files which are relocated while mapping
# That is, TXT_DOCS_* which remain in-place should not be removed (i.e. the
# originals during an in-tree build)

$(foreach m,$(MAPPED_TXT_DOCS_PLAINTEXT) $(MAPPED_TXT_DOCS_ASCIIDOC), \
	$(eval $(call canclean-txt-file,$(m))))

# Convert the 1:1 simple lists defined above into the common mapping tables
# for unprocessable and for asciidoc-able text files:

$(foreach m,$(TXT_DOCS_ASCIIDOC), \
	$(eval MAPPED_TXT_DOCS_ASCIIDOC += ${m}:${m} ))

$(foreach m,$(TXT_DOCS_PLAINTEXT), \
	$(eval MAPPED_TXT_DOCS_PLAINTEXT += ${m}:${m} ))

# Finally, run the logic for patterns that define file-copying
# Note that for 1:1 mapped files there may be harmless messages like
# "make: Circular...dependency dropped." during an in-directory build.
$(foreach m,$(MAPPED_TXT_DOCS_PLAINTEXT) $(MAPPED_TXT_DOCS_ASCIIDOC), \
	$(eval $(call depend-copy-file,$(m))))



##################################################
# The stuff HTML docs are made of...
# Similar activity for ASCIIDOC-HTML mapping
# The dependencies for the text file via patterns in the standard dir
# were defined above. Now just add the dependency for HTML building
# into the same basename...
# Per dependencies, all the text files should be available in the
# builddir/docs/develop/*.txt and the *.html will appear nearby

define compile-asciidoc-to-html =
if HAVE_ASCIIDOC
	@test -d "`dirname $(2)`" || mkdir -p "`dirname $(2)`"
	$(ASCIIDOC) -b html -o $(2) $(1)
else
	@echo "SKIP: Missing 'asciidoc' program, generic HTML documentation generation skipped for '$(1)' -> '$(2)'!" >&2
endif
endef

define depend-txt-html =
$(eval override _MAP_DST_REL :=		$(word 2,$(subst :, ,$(1))) )
$(eval override _HTML_DST_REL :=	$(_MAP_DST_REL:%.txt=%.html) )
$(eval override _MAP_DST_ABS :=		$(addprefix $(abs_top_builddir)/,$(_MAP_DST_REL)) )
$(eval override _HTML_DST_ABS :=	$(addprefix $(abs_top_builddir)/,$(_HTML_DST_REL)) )

# Define the dependency and the rule
$(_HTML_DST_ABS): $(_MAP_DST_ABS)
	@$$(call compile-asciidoc-to-html,$$<,$$@)

# Fake dependency for subdir/dist builds
$(_HTML_DST_REL): $(_HTML_DST_ABS)
	@#echo "DEBUG-MAKEFILE-FAKEDEP: Mapped target '$$@' to source '$$<'"

$(eval CLEAN_HTMLS +=		$(_HTML_DST_REL) )

$(eval HTMLS_ASCIIDOC +=	$(_HTML_DST_REL) )
endef

# Some HTMLS_ASCIIDOCs may have been defined above, maybe with other recipes
# Convert the remainder of HTMLS_ASCIIDOC from MAPPED_TXT_DOCS_ASCIIDOC
$(foreach m,$(MAPPED_TXT_DOCS_ASCIIDOC), $(eval $(call depend-txt-html,$(m))))


if HAVE_ASCIIDOC
HTMLS +=		$(HTMLS_ASCIIDOC)
develdoc_DATA +=	$(HTMLS_ASCIIDOC)
CLEANFILES +=		$(HTMLS_ASCIIDOC)
endif



#----------------------------------------------------------------------
#                One rule to generate and wipe documentation
#----------------------------------------------------------------------

all-docs: man-docs doxygen-docs html-docs txt-docs

# alias for manual typing errors
docs-all: all-docs

clean-docs: clean-man clean-doxygen clean-html clean-txt


#----------------------------------------------------------------------
#                        text to text copying
# Some documents are by GNU standard stored in project root, and we
# want to deliver them to common docs/devel subdirectory in install.
#----------------------------------------------------------------------

# A copy of TXT_DOCS_ASCIIDOC in the build area is needed for unified
# rules of asciidoc to html parsing, defined below; see MAPPED_* above.
txt-docs: $(addprefix $(abs_top_builddir)/,$(TEXTS))

# alias for manual typing errors
docs-txt: txt-docs

clean-txt: clean-txt-built clean-txt-txt_docs

clean-txt-built:
	/bin/rm -f $(addprefix $(abs_top_builddir)/,$(CLEAN_TEXTS))

# Only clean up the copies in the builddir, if applicable
# Do not kill the originals in the source tree
clean-txt-txt_docs:
	if test x"$(abs_top_srcdir)" != x"$(abs_top_builddir)" -a \
	    x"$(abs_top_srcdir)" != x -a x"$(abs_top_builddir)" != x ; then \
	    /bin/rm -f $(addprefix $(abs_top_builddir)/,$(TXT_DOCS_ASCIIDOC) $(TXT_DOCS_PLAINTEXT)); \
	else true; fi


#----------------------------------------------------------------------
#                       asciidoc html generation
#----------------------------------------------------------------------

# Technically we only implement building of HTMLS_ASCIIDOC now.
# If others appear and are not handled, they will fail to make.
# That is a good thing by design - we'll know to add more logic ;)


html-docs: txt-docs $(addprefix $(abs_top_builddir)/,$(HTMLS))

# alias for manual typing errors
docs-html: html-docs

clean-html:
	/bin/rm -f $(addprefix $(abs_top_builddir)/,$(CLEAN_HTMLS))


#----------------------------------------------------------------------
#                        doxygen html generation
# Note that unlike many other targets, doxygen seemingly has to use
# relative paths and be generated in a directory near the source code 
#----------------------------------------------------------------------

if HAVE_DOXYGEN
EXTRA_DIST +=		$(top_srcdir)/${myDOXDIR}/html
BUILT_SOURCES +=	$(top_srcdir)/${myDOXDIR}/html
endif
EXTRA_DIST +=		$(top_srcdir)/${myDOXDIR}/Doxyfile.in

CLEANFILES +=		$(top_srcdir)/${myDOXDIR}/doxygen_sqlite3.db \
			$(top_srcdir)/${myDOXDIR}/${mydoxylog} \
			${myDOXDIR}/doxygen_sqlite3.db \
			${myDOXDIR}/Doxyfile \
			${myDOXDIR}/${mydoxylog}

$(top_srcdir)/${myDOXDIR}/html: $(abs_top_srcdir)/${myDOXDIR}/html
doxygen-docs: $(abs_top_srcdir)/${myDOXDIR}/html

# alias for manual typing errors
docs-doxygen: doxygen-docs

clean-doxygen:
	( test -w $(abs_top_srcdir)/${myDOXDIR}/html && \
	  /bin/rm -rf $(abs_top_srcdir)/${myDOXDIR}/html ) || /bin/true

# Copy generated contents of "docs/doxygen/" into "/usr/share/core.../doxygen"
develdocdoxygendir =	$(develdocdir)/doxygen
develdocdoxygen: doxygen-docs

if HAVE_DOXYGEN
develdocdoxygen_DATA =	${myDOXDIR}/html/*

# Such-named target is required by the _DATA above, so have a rule to build it
${myDOXDIR}/html/*: doxygen-docs
$(abs_top_builddir)/${myDOXDIR}/Doxyfile: ${myDOXDIR}/Doxyfile $(abs_top_builddir)/Makefile

$(abs_top_srcdir)/${myDOXDIR}/html: $(abs_top_builddir)/${myDOXDIR}/Doxyfile
	@test -d $(abs_top_srcdir)/${myDOXDIR}/html || \
	{ cd $(abs_top_srcdir)/ && \
	  echo "INFO: Generating Doxygen docs in '`pwd`' according to '$<'" >&2 && \
	  $(DOXYGEN) "$<"; }
	@touch -r "$<" "$@" || true
else
develdocdoxygen_DATA =

${myDOXDIR}/html/*: $(abs_top_srcdir)/${myDOXDIR}/html

$(abs_top_srcdir)/${myDOXDIR}/html:
	@echo "SKIP: Missing 'doxygen' program, sourcecode-documentation generation skipped!" >&2
endif

#----------------------------------------------------------------------
#                 manpage generation (delegated to sub-make)
#----------------------------------------------------------------------

EXTRA_DIST +=		$(top_srcdir)/${myMANDIR}/*.txt
CLEANFILES +=		$(abs_top_builddir)/${myMANDIR}/*.?

man-docs:
	( cd $(abs_top_builddir)/$(myMANDIR) && $(MAKE) all )

# alias for manual typing errors
docs-man: man-docs

clean-man:
	( cd $(abs_top_builddir)/$(myMANDIR) && \
	  { $(MAKE) clean || /bin/true; } && \
	  /bin/rm -f *.[123456789] *.xml *.html )
	/bin/rm -f $(abs_top_builddir)/$(myMANDIR)/*.?

#----------------------------------------------------------------------
#                        hook for make all => generate files too
#----------------------------------------------------------------------

# Just in case we don't have all dependencies properly spelled out,
# try to ensure that certain files are built early in the process
all-local: $(abs_top_builddir)/src/include/git_details_override.c \
            libbiosapi.la bios_web.la $(client_PROGRAMS) \
            all-docs sdk

# Try to build everything buildable, e.g. for further warning counters
all-buildproducts: all-local all sdk-tests web-test-deps \
            $(check_LTLIBRARIES) $(check_PROGRAMS) $(check_SCRIPTS) \
            systemd-units $(cibin_programs_list)

# Note: variable cibin_PROGRAMS may be empty if not enabled via configure
#   The variable cibin_programs holds the actual list of CI programs instead
if ENABLE_CI_TESTS
cibin_PROGRAMS: $(cibin_PROGRAMS)
else
cibin_PROGRAMS:
endif
cibin_programs: $(cibin_programs_list)

#----------------------------------------------------------------------
#                        hook for make check custom verifications
#----------------------------------------------------------------------

# Run compile/link tests defined in this Makefile
# Note that check-gitignore should be the last target
check-local: web-link-test test-sdk \
        check-gitignore \
		test-pool

# If git repo details are not available, or git program does not exist,
# or if everything is properly GitIgnored - then succeed
# If some not-gitignored files are found, then fail
check-gitignore: all-buildproducts
	@(if [ x"$(SKIP_MAKE_CHECK_GITIGNORE)" \!= xno ]; then \
	    echo "SKIP: $@ (by implicit SKIP_MAKE_CHECK_GITIGNORE=yes)"; exit 0 ; \
	  else \
	    if which git >/dev/null 2>&1 ; then \
	        git status -s | egrep '^\?\? ' && \
	        echo "FAIL: $@" && exit 1; \
	        echo "PASS: $@"; exit 0 ; \
	    fi ; \
	    echo "SKIP: $@ (no git)"; exit 0 ; \
	  fi )

#----------------------------------------------------------------------
#                        SDK - currently it is the public API library
#----------------------------------------------------------------------

sdk: libbiosapi.la

sdk-link-test: sdk test-libbiosapiut

sdk-tests: sdk sdk-link-test

test-sdk: sdk sdk-tests
	cd $(abs_top_builddir) && ./test-libbiosapiut

#----------------------------------------------------------------------
#                        clean, what was not removed automatically
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#                        Test mlm client pool via make check
#----------------------------------------------------------------------
test-pool: test-tntmlm
	(valgrind --leak-check=full --show-reachable=yes --error-exitcode=1 --suppressions=$(abs_top_srcdir)/tests/test-mlm.supp $(abs_top_builddir)/test-tntmlm)

EXTRA_DIST += $(top_srcdir)/tests/test-mlm.supp

clean-junit:
	/bin/rm -rf $(abs_top_builddir)/tests/junit

clean-local: clean-docs clean-junit clean-systemd-units

# This may and should complain on non-empty dirs; "distclean-generic"
# with proper list of DISTCLEANFILES should have taken care of that
distclean-local-dirs: distclean-generic
	for D in $(addprefix $(abs_top_builddir)/,$(DISTCLEANDIRS)); do \
	  [ ! -d "$$D" ] || /bin/rmdir "$$D"; done || true

distclean-local-deps: distclean-generic
	cd $(abs_top_builddir)/ && { \
	  find . -type f -name '*.Plo' -exec /bin/rm -f '{}' \; ; \
	  find . -type f -name '*.Po' -exec /bin/rm -f '{}' \; ; \
	  find . -type d -name '.deps' -exec /bin/rmdir '{}' \; || true ; \
	}

# BUILDER_RETAIN_CONFIGURE=yes may be exported by builder.sh
distclean-local: distclean-local-dirs distclean-local-deps
	@if [ x"$(BUILDER_RETAIN_CONFIGURE)" = xyes ]; then \
	    echo "INFO: Retaining the configure script because I was asked to"; \
	else \
	    echo "INFO: Removing the configure script as part of distclean"; \
	    /bin/rm -f $(abs_top_builddir)/configure; \
	fi >&2 || true
	@if [ x"$(abs_top_builddir)/.git_details" != x"$(abs_top_srcdir)/.git_details" ]; then \
	    /bin/rm -f $(abs_top_builddir)/.git_details; \
	fi || true


#----------------------------------------------------------------------
#                        astyle formating
#----------------------------------------------------------------------
if HAVE_ASTYLE
EXTRA_DIST +=		$(top_srcdir)/tools/astyle.conf \
			$(top_srcdir)/tools/astyle-bios
checkstyle:
	$(abs_top_srcdir)/tools/astyle-bios \
	    -c $(abs_top_srcdir)/tools/astyle.conf $(abs_top_srcdir)/src
style:
	$(abs_top_srcdir)/tools/astyle-bios \
	    $(abs_top_srcdir)/tools/astyle.conf $(abs_top_srcdir)/src
endif

#----------------------------------------------------------------------
#                        some popular testing targets
#----------------------------------------------------------------------

ci-test-restapi: test-restapi
test-restapi: all
	$(abs_top_srcdir)/tests/CI/ci-test-restapi.sh


#----------------------------------------------------------------------
#                        SCM details
#----------------------------------------------------------------------

gitdetaildir =	        $(datarootdir)/@PACKAGE@
gitdetail_DATA =	.git_details

EXTRA_DIST +=		.git_details \
			tools/git_details.sh \
			tools/JSON.sh

CLEANFILES +=		src/include/git_details_override.c \
			src/include/git_details_override.h

# The .git_details can be generated by OBS script which does the checkout of
# sources to be packaged, or by the top-level make in a "make dist" running
# in a Git workspace. Namely, this might not be regeneratable in each case,
# i.e. when just a tarball with no SCM data is used for the build - then the
# tarball should contain a current (latest generated) copy of this file.

# This target ensures the .git_details file is always re-evaluated somehow
.PHONY_GIT:

.git_details: $(abs_top_builddir)/.git_details
	@sync || true

# NOTE that in the target routine below we filter out PACKAGE_BUILD_TSTAMP
# changes because if nothing else changed, these don't matter much but do
# cause a rebuild of the C/H files and those which depend on them, on every
# "make" run. Just remove the file (distclean) to regenerate everything truly.
# For tests, can 'export GIT_DETAILS_BLANK=yes' to succeed even on git errors.
$(abs_top_builddir)/.git_details: .PHONY_GIT
	@echo "INFO: Checking that '$@' is up-to-date..."
	@/bin/rm -f "$@.tmp"
	@if test -d $(abs_top_srcdir)/.git && \
	    ( cd $(abs_top_srcdir) && ./tools/git_details.sh > "$@.tmp" ) && \
	    [ -s "$@.tmp" ]; then \
	    if [ ! -s "$@" ] || diff -bu "$@" "$@.tmp" | \
	        egrep -v '^(\-\-\-|\+\+\+|[ @]|[\+\-]PACKAGE_BUILD_TSTAMP)' >/dev/null; then \
	      echo "INFO: Replacing '$@' with newly generated data:" && \
	      diff -bu "$@" "$@.tmp"; \
	      mv -f "$@.tmp" "$@"; touch "$@"; \
	    else echo "INFO: No substantial changes in contents of '$@' (although ignored PACKAGE_BUILD_TSTAMP)"; \
	    fi; \
	 else \
	   [ -s "$@" ] && echo "INFO: Reusing existing '$@'" && ls -la "$@"; \
	 fi || true
	@/bin/rm -f "$@.tmp"
	@if [ -s "$@" ]; then true; else \
	    if [ -s "$(abs_top_srcdir)/.git_details" ]; then \
	      [ x"$(abs_top_srcdir)/.git_details" != x"$@" ] && \
	      echo "INFO: Reusing existing '$(abs_top_srcdir)/.git_details':" && \
	      ls -la "$(abs_top_srcdir)/.git_details" && \
	      cp -f "$(abs_top_srcdir)/.git_details" "$@" ; \
	    else \
	      if [ -f "$@" ]; then echo "WARNING: '$@' is empty already"; else \
	      echo "WARNING: Overriding absent '$@' with empty file to satisfy 'make'"; \
	      touch "$@"; fi; \
	    fi; \
	 fi
	@sync || true

src/include/git_details_override.c: $(abs_top_builddir)/src/include/git_details_override.c
	@sync || true

$(abs_top_builddir)/src/include/git_details_override.c: $(abs_top_builddir)/.git_details $(abs_top_builddir)/src/include/git_details_override.h
	@echo "INFO: Checking that '$@' is up-to-date..."
	@/bin/rm -f "$@.tmp" || true
	@( echo '// WARNING: This file is generated during make, DO NOT EDIT'; \
	  echo '#include <src/include/git_details_override.h>'; \
	  grep '_ESCAPED=' "$<" | sed 's,^\(PACK.*;\)$$,char * \1,'; ) | sed 's,\\,\\\\,g' > "$@.tmp" || \
	 /bin/rm -f "$@.tmp"
	@if [ -s "$@.tmp" ]; then \
	    if [ ! -s "$@" ]; then \
	        echo "INFO: '$@' is missing, so using the newly generated file"; \
	        mv -f "$@.tmp" "$@"; touch "$@"; \
	    else \
	        if  diff -bu "$@" "$@.tmp" | \
	            egrep -v '^(\-\-\-|\+\+\+|[ @]|[\+\-]char . PACKAGE_BUILD_TSTAMP)' \
	        >/dev/null ; then \
	            echo "INFO: Replacing '$@' with newly generated data:"; \
	            diff -bu "$@" "$@.tmp"; \
	            mv -f "$@.tmp" "$@"; touch "$@"; \
	        else echo "INFO: No changes in contents of '$@' (although ignored PACKAGE_BUILD_TSTAMP)"; fi; \
	    fi; \
	 else [ -s "$@" ] && echo "INFO: Reusing existing '$@'" && ls -la "$@"; \
	 fi
	@/bin/rm -f "$@.tmp"
	@[ -s "$@" ] || { echo "WARNING: Overriding absent '$@' with empty file to satisfy 'make'"; \
	  touch -r "$<" "$@"; } || true
	@sync || true

src/include/git_details_override.h: $(abs_top_builddir)/src/include/git_details_override.h
	@sync || true

$(abs_top_builddir)/src/include/git_details_override.h: $(abs_top_builddir)/.git_details
	@echo "INFO: Checking that '$@' is up-to-date..."
	@( echo '// WARNING: This file is generated during make, DO NOT EDIT'; \
	  echo '#ifndef BIOS_GIT_DETAILS_OVERRIDE' && \
	  echo '#define BIOS_GIT_DETAILS_OVERRIDE' && \
	  [ -s "$<" ] && { \
	    { echo '#ifdef HAVE_PACKAGE_GIT'; \
	      echo '#undef HAVE_PACKAGE_GIT'; \
	      echo '#endif'; \
	      egrep 'PACKAGE_GIT_BRANCH_ESCAPED=".+";' "$<" >/dev/null && \
	        echo '#define HAVE_PACKAGE_GIT 1' || true; } && \
	    { echo '#ifdef HAVE_PACKAGE_BUILD_HOST'; \
	      echo '#undef HAVE_PACKAGE_BUILD_HOST'; \
	      echo '#endif'; \
	      egrep 'PACKAGE_BUILD_HOST_OS_ESCAPED=".+";' "$<" >/dev/null && \
	        echo '#define HAVE_PACKAGE_BUILD_HOST 1' || true; } && \
	    { echo '#ifdef HAVE_PACKAGE_BUILD_TSTAMP'; \
	      echo '#undef HAVE_PACKAGE_BUILD_TSTAMP'; \
	      echo '#endif'; \
	      egrep 'PACKAGE_BUILD_TSTAMP_ESCAPED="[0-9]+";' "$<" >/dev/null && \
	        echo '#define HAVE_PACKAGE_BUILD_TSTAMP 1' || true; } && \
	    grep '_ESCAPED=' "$<" | sed 's,^\(PACK[^=]*\)\(=.*\);$$,#ifdef \1\n#undef \1\n#endif\nextern char * \1;,'; \
	  }; echo '#endif // BIOS_GIT_DETAILS_OVERRIDE'; ) > "$@.tmp" || \
	 /bin/rm -f "$@.tmp"
	@{ [ -s "$@.tmp" ] && { diff -bu "$@" "$@.tmp" && \
	    echo "INFO: No changes in contents of '$@'" || \
	    { echo "INFO: Replacing '$@' with newly generated data"; \
	      mv -f "$@.tmp" "$@"; } } } || { \
	  [ -s "$@" ] && echo "INFO: Reusing existing '$@'" && ls -la "$@"; }; \
	  true
	@/bin/rm -f "$@.tmp"
	@[ -s "$@" ] || { echo "WARNING: Overriding absent '$@' with empty file to satisfy 'make'"; \
	  touch -r "$<" "$@"; } || true
	@sync || true
