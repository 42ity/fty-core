#!/bin/sh

#
# Copyright (C) 2017 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    factory-reset-live.sh(.in)
#  \brief   Automation of in-vivo factory-reset effect for volatile data
#           (not system settings like networking or SSH keys)
#  \author  Jim Klimov <EvgenyKlimov@Eaton.com>

TZ=UTC
LANG=C
LC_ALL=C
PATH="@datadir@/@PACKAGE@/scripts:@libexecdir@/@PACKAGE@:/usr/sbin:/sbin:/usr/bin:/bin"
export TZ LANG LC_ALL PATH

# By default all actions re-enable or restart services they impact
[ -n "${ENABLESVC-}" ] || ENABLESVC=yes

die () {
    echo "FATAL: ${@}" >&2
    exit 1
}

logmsg_info() {
    echo "INFO: `date -u`: $*"
    return 0
}

logmsg_error() {
    echo "ERROR: `date -u`: $*"
    return 1
}

usage() {
    cat << EOF
$0: Automation of in-vivo factory-reset effect for
volatile data (not system settings like networking or SSH keys).
NOTE: This script is intended to be run from root privileges during testing and
development, "sudo" integration for other accounts is expressly not provided.

    -FR | --factory-reset   Achieve the full effect of actions listed below
    status                  Display current states of license-dependent stack
                            of services (DB and its consumers) and of tntnet

You can also pick one or more smaller actions explicitly:
    --reset-passwd          Return "admin" password to default value
    --reset-license         Remove the accepted-license file and kick services
    --reset-statefiles      Remove and recreate the state-file file tree and
                            restart IPM services
    --reset-nut             Remove configuration of monitored devices in NUT
                            and restart its services
    --reset-database        Stop database engine, drop database files and
                            restart this life from scratch
EOF
}


if [[ $(id -u) != 0 ]]; then
    # Explicitly no "auto-sudo" here, nor permissions in sudoers presets
    # We do not want some runaway REST API or SSH "admin" user to toggle this
    usage
    die "This script is not intended for ordinary usage by non-root users"
fi

if [[ ! -f /etc/release-details.json ]] ; then
    # Sanity check to not destroy a developer workstation etc. ;)
    die "An /etc/release-details.json file was not found - be sure to run in IPM system!"
fi

if [[ ! -s /etc/release-details.json ]] ; then
    # If the caller just "touched" the file, make it a valid JSON
    echo '{}' > /etc/release-details.json
fi

do_reset_passwd() {
    logmsg_info "Resetting admin password to our very simple default value..."
    if [ -s /mnt/root-ro/etc/shadow ]; then
        OLDPASS="`egrep '^admin:' /mnt/root-ro/etc/shadow | awk -F: '{print $2}'`" || OLDPASS=""
        if [ -n "$OLDPASS" ] ; then
            usermod --password "$OLDPASS" admin && return
        fi
    fi
    yes "admin" | passwd admin && return
    for INITACCT in /usr/share/{fty,bios}/scripts/init-os-accounts.sh ; do
        if [[ -x "$INITACCT" ]] ; then
            usermod --password "`USER_PASS='admin' "$INITACCT" hashPasswd`" admin && return
            break
        fi
    done
    logmsg_error "Failed to reset the admin password to our very simple default value"
    return 1
}

do_unlicense() {
    # TODO: se subst-value to path here
    logmsg_info "Resetting license-accepted state (EULA)..."
    rm -f @ftydatadir@/fty-eula/license @ftydatadir@/license
    if [ "$ENABLESVC" = yes ]; then
        logmsg_info "Restarting services that care about license-accepted state (EULA)..."
        systemctl restart fty-license-accepted.service --no-block
        systemctl restart fty-license-accepted.path --no-block
        systemctl restart fty-license-accepted.target --no-block
        systemctl restart tntnet@bios.service --no-block
    fi
}

do_undatabase() {
    logmsg_info "Stopping database engine..."
    systemctl stop fty-db-init.service || die "Can not ensure database is stopped"
    systemctl stop fty-db-engine.service || die "Can not ensure database is stopped"
    logmsg_info "Clearing database-related files..."
    rm -rf /var/lib/mysql @ftydatadir@/sql/mysql/* @ftydatadir@/sql/mysql/.*.cnf* \
        /etc/default/bios-db-r[ow] /root/.my.cnf
    if [ "$ENABLESVC" = yes ]; then
        logmsg_info "Starting database engine, if possible..."
        systemctl restart fty-db-engine.service --no-block || true # License may forbid startup
        systemctl restart fty-db-init.service --no-block || true
        systemctl restart fty-db.target --no-block || true
        logmsg_info "Restarting webserver..."
        systemctl restart tntnet@bios.service || die "Can not ensure database is running"
    fi
}

do_unstate() {
    logmsg_info "Stopping all IPM services..."
    systemctl stop bios.service || die "Can not ensure IPM daemons are stopped"

    logmsg_info "Wiping IPM service state files and directories..."
    ls -1d @ftydatadir@/* /var/lib/bios/* | \
    while read OBJ ; do
        case "$OBJ" in
        */fty-eula|*/license|*/sql|*/ipc-meta-setup) ;; # Skip these - handled by other actions
        *) rm -rf "$OBJ" ;;
        esac
    done

    logmsg_info "Recreating blank IPM service state files and directories - systemd..."
    systemd-tmpfiles --create

    logmsg_info "Recreating blank IPM service state files and directories - ipc-meta-setup..."
    systemctl restart ipc-meta-setup

    if [ "$ENABLESVC" = yes ]; then
        logmsg_info "Starting IPM services..."
        systemctl start bios.service || die "Can not ensure IPM daemons are running"
    fi
}

do_unnut() {
    # TODO: This will be more complicated when we also have a NUT monitor
    # actually in use.
    logmsg_info "Stopping all NUT services, if possible..."
    systemctl stop nut-monitor || true
    systemctl stop nut-server || true
    systemctl stop nut-driver.target || true

    # Note: This requires our systemctl wrapper
    for D in `systemctl list-ipm-units 'nut-driver@.+\.service'` ; do
        systemctl stop "$D" || true
        systemctl disable "$D" || true
    done

    logmsg_info "Resetting NUT monitored device configs..."
    echo "maxretry = 3" > /etc/nut/ups.conf

    if [ "$ENABLESVC" = yes ]; then
        logmsg_info "Starting all NUT services, if possible..."
        systemctl restart nut-monitor || true
        systemctl restart nut-server || true
        systemctl restart nut-driver.target || true
    fi
}

do_factory_reset() (
    # Combine the above actions
    logmsg_info "Doing full factory reset..."
    ENABLESVC_ORIG="$ENABLESVC"
    ENABLESVC=no
    do_unlicense
    do_unstate
    do_undatabase
    do_reset_passwd
    ENABLESVC="$ENABLESVC_ORIG"
    do_unnut
    # Be sure DB does not fire up in this window of uncertainty for systemd --
    # just to be killed mid-way through DB files creation, leaving them corrupt
    systemctl stop fty-db.target
    systemctl stop fty-db-init.service
    systemctl stop fty-db-engine.service
    logmsg_info "Restarting IPM-related services..."
    systemctl restart fty-license-accepted.path
    systemctl restart fty-license-accepted.service
    systemctl restart fty-license-accepted.target
    systemctl restart malamute.service
    sleep 5 # License check starts with a bit of sleep - supercede that here
    systemctl restart bios.service
    systemctl restart fty-db-engine.service
    systemctl restart fty-db-init.service
    systemctl restart fty-db.target
    # The tntnet server sometimes keeps running while the service gets restarted
    # so it loops complaining that port :80 is occupied already. Try to avoid:
    systemctl stop tntnet@bios.service || true
    killall tntnet || true
    systemctl restart tntnet@bios.service
    logmsg_info "Finished full factory reset..."
)

show_status() {
    /bin/systemctl status -n 3 fty-license-accepted.{service,path,target} fty-db-engine fty-db-init fty-db.target fty-asset tntnet@bios bios-pre-eula.target malamute
}

if [ $# = 0 ] ; then
    usage
    die "Some explicit argument(s) is required"
fi

while [ $# -gt 0 ]; do
    case "$1" in
        -h|-help|--help)
            usage ; exit 0 ;;
        -FR|--factory-reset)
            do_factory_reset ; exit $? ;;
        status|--status|state|--state)
            show_status ;;
        --reset-passwd)
            do_reset_passwd || exit ;;
        --reset-license)
            do_unlicense || exit ;;
        --reset-statefiles)
            do_unstate || exit ;;
        --reset-nut)
            do_unnut || exit ;;
        --reset-database)
            do_undatabase || exit ;;
        *) die "Unsupported option: $1" ;;
    esac
    shift
done
