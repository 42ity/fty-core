#!/bin/bash
#
# Copyright (C) 2016 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    mount_usb | umount_usb
#  \brief   Helper script for (un-)mounting devices
#  \author  Michal Vyskocil <MichalVyskocil@Eaton.com>
#  \author  Jim Klimov <EvgenyKlimov@Eaton.com>
#  \details Helper script for mounting and unmounting the USB devices securely
#

export PATH=/bin:/sbin:/usr/bin

# Use syslog if "logger" is available
LOGGER="$(which logger)" 2>/dev/null || LOGGER=""

write_syslog() {
    # TODO: Extend with config files and/or BIOS_* variables to point
    # logging directly to remote servers. etc?
    if [[ $# -gt 0 ]]; then
        if [[ -n "$LOGGER" ]] && [[ -x "$LOGGER" ]] ; then
            USER_PREFIX=""
            [[ -n "${SUDO_USER-}" ]] && \
                USER_PREFIX="sudo ${SUDO_USER-} (${SUDO_UID-}:${SUDO_GID-})"
            [[ -n "${USER-}" ]] && \
                USER_PREFIX="${USER_PREFIX:+$USER_PREFIX as }$USER (${UID-}/${EUID-}:${GID-})"
            [[ -n "$USER_PREFIX" ]] && USER_PREFIX="$USER_PREFIX:"
            $LOGGER -p auth.notice -t "`basename $0`-wrapper[$$]" "$USER_PREFIX" -- "$@" || true
        fi
        echo "$@" >&2
    fi
    return 0
}

die_ACTION_NOT_ALLOWED() {
    write_syslog "Action not allowed"
    exit 1
}

usage() {
        cat << EOF
Usage: mount_usb [-t FSTYPE] /dev/sdXY
Usage: umount_usb [ /dev/sdXY | $MNT_DIR ]
EOF
}

# We only support one flash stick here, but in any port
MNT_DIR=/mnt/USB
RIGHTEOUS_GID=bios-admin

case "$1" in
    -h|help|-help|--help)
        usage
        exit 0
        ;;
esac

case "`basename $0`" in
    umount_usb)
        case "$1" in
            ""|"${MNT_DIR}") /bin/umount "${MNT_DIR}" ; exit $? ;;
            /dev/sd[a-z]*)
                /bin/umount "$1" ; exit $? ;;
            *)  die_ACTION_NOT_ALLOWED;;
        esac
        ;;
    mount_usb)
        MNT_GID="`getent group "${RIGHTEOUS_GID}" | cut -d ':' -f 3`" || MNT_GID=""
        MNT_DEV="${1}"

        # TODO: those are arguments only for non-Linux native FS,
        # however as we assume 99.9% of users will have usb stick
        # formated to vfat, this is not a big deal imo
        MOUNT_OPTS="umask=0002,nodev,noexec,noatime,nodiratime,sync,nosuid,rw"
        [ -n "$MNT_GID" ] && MOUNT_OPTS="gid=${MNT_GID},$MOUNT_OPTS"
        MOUNT_ARGS="-o ${MOUNT_OPTS}"

        if [ "x${MNT_DEV}" = "x-t" ]; then
            # Verify that ${2} is a single-word token which is present in the
            # /proc/filesystems list (and not a "nodev"), and certainly without
            # any whitespace, semicolons, etc. so extra args can not sneak into
            # this elevated command-line.
            grep -vw nodev /proc/filesystems | sed -e 's,^[\ \t]*,,' -e 's,[\ \t]*$,,' | \
                egrep '^'"${2}"'$' | egrep '^[a-zA-Z0-9\-\.\_]*$' >/dev/null || \
                { echo "ERROR: fstype '$2' is not supported by this kernel" >&2; \
                  die_ACTION_NOT_ALLOWED; }
            MOUNT_ARGS="${MOUNT_ARGS} -t ${2}"
            MNT_DEV="${3}"
        fi

        # NOTE/TODO: At this time we do not allow to specify arbitrary MNT_DIR,
        # so only one removable storage can be mounted at the same time.

        case "$MNT_DEV" in
            /dev/sd[a-z]*) ;; # OK, pass to later steps
            "") echo "ERROR: Bad arguments" >&2
                usage; exit 1 ;;
            *)  die_ACTION_NOT_ALLOWED ;;
        esac

        # Verify that the MNT_DIR and/or MNT_DEV are not already used in
        # mounting, to avoid conflicts and overlaying an existing tree.
        /bin/mount | egrep "^${MNT_DEV} " > /dev/null && \
            { echo "ERROR: device '${MNT_DEV}' is already mounted" >&2; \
              die_ACTION_NOT_ALLOWED; }

        [ -d "$MNT_DIR" ] && /bin/mount | egrep " on ${MNT_DIR} " > /dev/null && \
            { echo "ERROR: there is something already mounted into directory '${MNT_DIR}'" >&2; \
              die_ACTION_NOT_ALLOWED; }

        mkdir -p "$MNT_DIR"
        chown root "$MNT_DIR"
        [ -n "$MNT_GID" ] && chgrp "${MNT_GID}" "$MNT_DIR"
        chmod 0770 "$MNT_DIR"

        # We leave it to the system to check if the device is present
        # (maybe it has to probe some modules first, so in that case
        # the [ -f "$MNT_DEV" ] alone would not be a correct check.
        # Likewise, absense of $MNT_DIR is best checked by that prog.
        write_syslog /bin/mount ${MOUNT_ARGS} ${MNT_DEV} ${MNT_DIR}
        /bin/mount $MOUNT_ARGS ${MNT_DEV} ${MNT_DIR}
        exit $?
        ;;
    *)  die_ACTION_NOT_ALLOWED;;
esac
