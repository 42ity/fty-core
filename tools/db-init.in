#!/bin/sh

# Copyright (C) 2014 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file   db-init(.in)
#  \brief  Inits the BIOS database schema on factory-default installations
#  \author Karol Hrdina <KarolHrdina@Eaton.com>
#  \author Alena Chernikava <AlenaChernikava@Eaton.com>
#  \author Michal Hrusecky <MichalHrusecky@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#

prefix="@prefix@"

INITSQL="@datarootdir@/@PACKAGE@/sql/mysql/initdb.sql"
[ -n "$HOME" ] && [ -d "$HOME" ] && \
	MYCNF="$HOME/.my.cnf" || \
	MYCNF="/root/.my.cnf"
# MySQL-root password is empty by default, otherwise is cached in $MYCNF
# and so it is not needed to specify it explicitly either

# Flag used to set a password, empty if defaults suffice
MYSQL_ROOT_PASSWD=''

do_mysql() {
	mysql -u root "$@"
}

if [ -z "`echo "select 'working';" | do_mysql | grep working`" ]; then
	if [ -z "`echo "select 'working';" | do_mysql --password='' | grep working`" ]; then
		echo "Can't connect to database"
		exit 1
	else
		echo "Config files inconsistent: really MYSQL root password is empty (database recreated?)"
		MYSQL_ROOT_PASSWD='--password='
	fi
fi

if [ ! -s "$MYCNF" ] || [ x"$MYSQL_ROOT_PASSWD" = x"--password=" ]; then
	# ~/.my.cnf missing or empty, or password was detected as empty
	# Note this structure allows a .my.cnf to specify password=''
	echo "Database for BIOS - generating MySQL root password instead of corrupt/empty value..."
	# Just in case, avoid weird chars in the password
	ROOT_PW="`head -c 12 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n],%,g'`"
	cat << EOF | do_mysql $MYSQL_ROOT_PASSWD
SET PASSWORD = PASSWORD('$ROOT_PW');
FLUSH PRIVILEGES;
EOF
	[ $? != 0 ] && echo "Error setting MySQL root password" >&2 && exit 1

	rm -f "$MYCNF"  # Reset access rights, if unsecured earlier
	printf '[client]\nuser=root\npassword=%s\n' "${ROOT_PW}" > "$MYCNF"
	chmod 600 "$MYCNF"
else
	echo "Database for BIOS - not touching MySQL root password - previous value remains in place..."
fi

# From here on, the mysql client should rely on ~/.my.cnf
# so no extra password params are needed
if [ -z "`do_mysql -Ns -e 'show databases;' | egrep '^box_utf8$'`" ]; then
	if [ -r "$INITSQL" ] && \
	   [ -s "$INITSQL" ]; then
		echo "Database for BIOS not found - importing schema..."
		do_mysql < "$INITSQL" || exit 1

		echo "Database for BIOS - generating user passwords..."

		BIOS_RW="`head -c 12 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n],%,g'`"
		BIOS_RO="`head -c 12 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n],%,g'`"

		cat << EOF | do_mysql
GRANT DELETE,INSERT,SELECT,UPDATE ON box_utf8.* TO 'bios-rw'@'localhost' IDENTIFIED BY '$BIOS_RW';
GRANT SELECT                      ON box_utf8.* TO 'bios-ro'@'localhost' IDENTIFIED BY '$BIOS_RO';
FLUSH PRIVILEGES;
EOF
		printf 'DB_USER="%s"\nDB_PASSWD="%s"\n' "bios-rw" "${BIOS_RW}" > /etc/default/bios-db-rw
		printf 'DB_USER="%s"\nDB_PASSWD="%s"\n' "bios-ro" "${BIOS_RO}" > /etc/default/bios-db-ro
		chown bios /etc/default/bios-db-r[wo]
		chmod 600 /etc/default/bios-db-r[wo]

		echo "Database for BIOS - completed the schema import and password generation"
	else
		echo "Can't read '$INITSQL' !!!"
		exit 1
	fi
else
	# TODO: If there are any consistency checks to run on the database -
	# e.g. to detect botched imports, need of upgrades, etc. - do it here
	echo "Database for BIOS - found and deemed sufficient"
fi

exit 0
