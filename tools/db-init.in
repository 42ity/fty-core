#!/bin/bash

# Copyright (C) 2014 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file   db-init(.in)
#  \brief  Inits the 42ity database schema on factory-default installations
#           or do an appropriate update of database schema after reboot
#  \author Karol Hrdina <KarolHrdina@Eaton.com>
#  \author Alena Chernikava <AlenaChernikava@Eaton.com>
#  \author Michal Hrusecky <MichalHrusecky@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \details Caller may export BIOS_DB_INIT envvar set to 'initialize' or
#           'upgrade' to trigger the corresponding function and exit.
#
# In order to recreate the database (all data would be lost) export the
# BIOS_DB_INIT envvar set to "init".

prefix="@prefix@"
DATABASE=box_utf8
# This is where we take current SQL files from updated OS images
INITSQL_DIR="@datarootdir@/@PACKAGE@/sql/mysql"
# This is where we save timestamped copies of applied SQL files that
# are in the database. Note/TODO: currently this may include schema/data
# files from a previous database lifetime, if it is re-initialized.
# Conversely, as part of /var namespace this is erased during factory-reset.
INSTSQL_DIR="/var/lib/@PACKAGE@/sql/mysql"
# While we transition release naming... make sure to use new one if it applies.
if [ "$INSTSQL_DIR" = "/var/lib/bios/sql/mysql" ] && \
   [ -d "@ftydatadir@/sql/mysql" ] ; then
    # Check if any of the default "bios" paths are missing or symlinks (to fty)
    if [ -L /var/lib/bios -o -L /var/lib/bios/sql -o -L /var/lib/bios/sql/mysql \
         -o ! -d /var/lib/bios -o ! -d /var/lib/bios/sql/mysql \
         -o -L /var/lib/bios/sql/mysql/.root-my.cnf ] ; then
        echo "Overriding INSTSQL_DIR from bios to fty"
        INSTSQL_DIR="@ftydatadir@/sql/mysql"
    fi
fi

# This directory also holds the actual database credential files, so they
# live (and die, in case of factory reset) simultaneously with the database
# files. The `/root/.my.cnf` and `/etc/default/bios-db-r[ow]` legacy locations
# are symlinks to actual files in this directory.
CREDSQL_DIR="$INSTSQL_DIR"
# This file is applied first; others (if exist in $INITSQL_DIR) will be applied
# in alphabetic order; all files in $INITSQL_DIR will be version-tested as well
INITSQL_FIRST="${INITSQL_DIR}/initdb.sql"

# TODO: While the script currently supports both initialization of database
# from several SQL files (first and others) and validation of schema versions
# present in the database, it does not support automated addition of new SQL
# files coming with e.g. additional software modules. That is, initialization
# is currently done all at once.

# This is needed for systemd integration which does not have HOME set
# The variable is needed not only for ourselves, but also for "mysql" client
[ -n "$USER" ] || USER="$(id -un)"
[ $? = 0 ] && [ -n "$USER" ] || USER="root"
[ -n "$HOME" ] || HOME="$(getent passwd "`id -un`" | awk -F: '{print $6}')"
# As a fallback, assume "root"
[ $? = 0 ] && [ -n "$HOME" ] && [ -d "$HOME" ] || HOME="/root"
export HOME USER
MYCNF_LEGACY="$HOME/.my.cnf"
MYCNF="$CREDSQL_DIR/.$USER-my.cnf"

BIOS_DB_RO_LEGACY="/etc/default/bios-db-ro"
BIOS_DB_RO="$CREDSQL_DIR/bios-db-ro"
BIOS_DB_RW_LEGACY="/etc/default/bios-db-rw"
BIOS_DB_RW="$CREDSQL_DIR/bios-db-rw"

# MySQL-root password is empty by default, otherwise is cached in $MYCNF
# and so it is not needed to specify it explicitly either

# Flag used to set a password, empty if defaults suffice
MYSQL_ROOT_PASSWD_FLAG=''

# Legacy support - we import data and remove this file if present
[ -s /etc/default/mysql-root-passwd ] && . /etc/default/mysql-root-passwd
# Can set MYSQL_ROOT_PASSWD value

# Currently one value is supported - the first line should be "not-required"
# or "skip" if the service may start in cases which otherwise require an
# upgrade of the database. The difference would be for "skip" to quit the
# routine immediately (even if upgrades are possible, TBD later) and for
# "not-required" to not fail if the upgrade is impossible.
# TODO: Other later upgrades of this mechanism may include processing of
# "sqlbasename: policy" lines to match specific files.
UPGRADE_POLICY_FILE="/etc/default/bios-db-upgradepolicy"
UPGRADE_POLICY="require"

do_mysql() {
	mysql -u root "$@"
}

exec_sql() {
	# NOTE: $1 must be the SQL request; any other params like
	# passwd can follow afterwards as $2 etc.
	# SQL commands should be separated by ';' chars, though last
	# (or single) command may omit it
	do_mysql -Ns -e "$@"
}

exec_sql_db() {
	do_mysql -Ns -D "${DATABASE}" -e "$@"
}

random_password() {
	# Generate a random ASCII string without "confusing" characters
	head -c 12 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n\r\%],_,g'
}

secure_database() {
	# Make sure that credentials for R/O and R/W 42ity services are up to date
	# Also port legacy files from /etc locations to current store in /var,
	# leaving only symlinks in the wake, if needed.
	GOOD_BIOS_RW=no
	GOOD_BIOS_RO=no
	BIOS_RW_PASS=""
	BIOS_RO_PASS=""
	BIOS_RW_USER=""
	BIOS_RO_USER=""

	if [ -s "${BIOS_DB_RW}" ] ; then
		BIOS_RW_PASS="`(. "${BIOS_DB_RW}" && echo "${DB_PASSWD}")`" && \
		BIOS_RW_USER="`(. "${BIOS_DB_RW}" && echo "${DB_USER}")`" && \
		( mysql -u "${BIOS_RW_USER}" --password="${BIOS_RW_PASS}" -D "${DATABASE}" -e "select 'working';" | grep -w working >/dev/null ) && \
		GOOD_BIOS_RW=yes
	fi
	if [ "$GOOD_BIOS_RW" = no ] && [ -s "${BIOS_DB_RW_LEGACY}" ] ; then
		BIOS_RW_PASS="`(. "${BIOS_DB_RW_LEGACY}" && echo "${DB_PASSWD}")`" && \
		BIOS_RW_USER="`(. "${BIOS_DB_RW_LEGACY}" && echo "${DB_USER}")`" && \
		( mysql -u "${BIOS_RW_USER}" --password="${BIOS_RW_PASS}" -D "${DATABASE}" -e "select 'working';" | grep -w working >/dev/null ) && \
		GOOD_BIOS_RW=yes
		if [ "$GOOD_BIOS_RW" = yes ]; then
			echo "Database for BIOS initialization - BIOS_DB_RW_LEGACY pointed to correct password while BIOS_DB_RW did not, rewriting symlink..." >&2 && \
			rm -f "${BIOS_DB_RW}" && \
			cat "${BIOS_DB_RW_LEGACY}" > "${BIOS_DB_RW}" && \
			chown bios "${BIOS_DB_RW}" && \
			chmod 600 "${BIOS_DB_RW}" && \
			rm -f "${BIOS_DB_RW_LEGACY}" && \
			ln -s "${BIOS_DB_RW}" "${BIOS_DB_RW_LEGACY}" \
			|| { GOOD_BIOS_RW=no; rm -f "${BIOS_DB_RW}" "${BIOS_DB_RW_LEGACY}"; }
		fi
	fi
	[ "$GOOD_BIOS_RW" = no ] && BIOS_RW_PASS="" && BIOS_RW_USER=""

	if [ -s "${BIOS_DB_RO}" ] ; then
		BIOS_RO_PASS="`(. "${BIOS_DB_RO}" && echo "${DB_PASSWD}")`" && \
		BIOS_RO_USER="`(. "${BIOS_DB_RO}" && echo "${DB_USER}")`" && \
		( mysql -u "${BIOS_RO_USER}" --password="${BIOS_RO_PASS}" -D "${DATABASE}" -e "select 'working';" | grep -w working >/dev/null ) && \
		GOOD_BIOS_RO=yes
	fi
	if [ "$GOOD_BIOS_RO" = no ] && [ -s "${BIOS_DB_RO_LEGACY}" ] ; then
		BIOS_RO_PASS="`(. "${BIOS_DB_RO_LEGACY}" && echo "${DB_PASSWD}")`" && \
		BIOS_RO_USER="`(. "${BIOS_DB_RO_LEGACY}" && echo "${DB_USER}")`" && \
		( mysql -u "${BIOS_RO_USER}" --password="${BIOS_RO_PASS}" -D "${DATABASE}" -e "select 'working';" | grep -w working >/dev/null ) && \
		GOOD_BIOS_RO=yes
		if [ "$GOOD_BIOS_RO" = yes ]; then
			echo "Database for BIOS initialization - BIOS_DB_RO_LEGACY pointed to correct password while BIOS_DB_RO did not, rewriting symlink..." >&2 && \
			rm -f "${BIOS_DB_RO}" && \
			cat "${BIOS_DB_RO_LEGACY}" > "${BIOS_DB_RO}" && \
			chown bios "${BIOS_DB_RO}" && \
			chmod 600 "${BIOS_DB_RO}" && \
			rm -f "${BIOS_DB_RO_LEGACY}" && \
			ln -s "${BIOS_DB_RO}" "${BIOS_DB_RO_LEGACY}" \
			|| { GOOD_BIOS_RO=no; rm -f "${BIOS_DB_RO}" "${BIOS_DB_RO_LEGACY}"; }
		fi
	fi
	[ "$GOOD_BIOS_RO" = no ] && BIOS_RO_PASS="" && BIOS_RO_USER=""

	if [ "$GOOD_BIOS_RW" = no ] || [ "$GOOD_BIOS_RO" = no ]; then
		echo "Database for 42ity initialization - generating user passwords..."

		[ "$GOOD_BIOS_RW" = yes ] && \
			[ -n "$BIOS_RW_PASS" ] || BIOS_RW_PASS="`random_password`"
		[ -n "$BIOS_RW_USER" ] || BIOS_RW_USER="bios-rw"
		[ "$GOOD_BIOS_RO" = yes ] && \
			[ -n "$BIOS_RO_PASS" ] || BIOS_RO_PASS="`random_password`"
		[ -n "$BIOS_RO_USER" ] || BIOS_RO_USER="bios-ro"

		cat << EOF | do_mysql
GRANT DELETE,INSERT,SELECT,UPDATE ON ${DATABASE}.* TO '$BIOS_RW_USER'@'localhost' IDENTIFIED BY '$BIOS_RW_PASS';
GRANT SELECT                      ON ${DATABASE}.* TO '$BIOS_RO_USER'@'localhost' IDENTIFIED BY '$BIOS_RO_PASS';
FLUSH PRIVILEGES;
EOF
		[ "$GOOD_BIOS_RW" = yes ] || \
			printf 'DB_USER="%s"\nDB_PASSWD="%s"\nDB_SCHEMA="box_utf8"\n' "${BIOS_RW_USER}" "${BIOS_RW_PASS}" > "${BIOS_DB_RW}"
		[ "$GOOD_BIOS_RO" = yes ] || \
			printf 'DB_USER="%s"\nDB_PASSWD="%s"\nDB_SCHEMA="box_utf8"\n' "${BIOS_RO_USER}" "${BIOS_RO_PASS}" > "${BIOS_DB_RO}"
		chown bios "${BIOS_DB_RW}" "${BIOS_DB_RO}"
		chmod 600 "${BIOS_DB_RW}" "${BIOS_DB_RO}"
	else
		echo "Database for 42ity - all existing user passwords are good"
	fi

	if [ -L "${BIOS_DB_RW_LEGACY}" ] && [ -s "${BIOS_DB_RW}" ] && diff -q "${BIOS_DB_RW_LEGACY}" "${BIOS_DB_RW}" ; then
		: # Same file in final location, already a symlink in legacy location
	else
		# Code above should have ensured that BIOS_DB_RW is correct
		echo "Database for BIOS initialization - creating BIOS_DB_RW_LEGACY symlink pointing to correct password file BIOS_DB_RW..." >&2 && \
		rm -f "${BIOS_DB_RW_LEGACY}" && \
			ln -s "${BIOS_DB_RW}" "${BIOS_DB_RW_LEGACY}"
		# Our web-server should be able to read these credentials, at least per current implementation of license_POST
		chgrp www-data "${BIOS_DB_RW}"
		chmod g+r "${BIOS_DB_RW}"
		chgrp www-data "${CREDSQL_DIR}"
	fi

	if [ -L "${BIOS_DB_RO_LEGACY}" ] && [ -s "${BIOS_DB_RO}" ] && diff -q "${BIOS_DB_RO_LEGACY}" "${BIOS_DB_RO}" ; then
		: # Same file in final location, already a symlink in legacy location
	else
		# Code above should have ensured that BIOS_DB_RO is correct
		echo "Database for BIOS initialization - creating BIOS_DB_RO_LEGACY symlink pointing to correct password file BIOS_DB_RO..." >&2 && \
		rm -f "${BIOS_DB_RO_LEGACY}" && \
		ln -s "${BIOS_DB_RO}" "${BIOS_DB_RO_LEGACY}"
	fi

}

# Common variable fir this run, even if several schema updates are uploaded
# in different seconds
SQLINSTALL_TIMESTAMP="t=`date -u '+%Y%m%dT%H%M%SZ'`"

install_sql_file() {
	# Currently we allow to install all SQLs at once. But later we can add
	# a way to install additional schemas in standard manner - this is it.
	# $1 = SQL pathname
	# $2 = comment to echo
	local INITSQL="$1"
	local COMMENT="$2"

	if  [ -r "$INITSQL" ] && \
	    [ -s "$INITSQL" ] \
	; then
		echo "Database for 42ity initialization - importing $COMMENT `basename $INITSQL`..."
		do_mysql < "$INITSQL" || return 1
		SQLINSTALL_SCHEMA_VERSION="v=`grep_sql_version < "$INITSQL"`." || SQLINSTALL_SCHEMA_VERSION=""
		[ -n "$INSTSQL_DIR" ] && [ -d "$INSTSQL_DIR" ] && \
			gzip -c < "$INITSQL" > "$INSTSQL_DIR/`basename "$INITSQL"`.$SQLINSTALL_SCHEMA_VERSION$SQLINSTALL_TIMESTAMP.gz"
		return 0
	else
		echo "Error: Can't read '$INITSQL' !!!" >&2
		return 1
	fi
}

generate_database() {
	local INITSQL=""
	# Imports the 42ity database files, sets up and saves passwords
	install_sql_file "$INITSQL_FIRST" "base schema" || return $?

	secure_database

	for INITSQL in $(ls -1 "${INITSQL_DIR}"/*.sql | grep -v "`basename $INITSQL_FIRST`" | sort) ; do
		install_sql_file "$INITSQL" "extra schema" || return $?
	done

	echo "Database for 42ity initialization - completed the schema import and password generation"
	return 0
}

upgrade_database() {
	# Parameters: $1 refers to full filename of new SQL data file
	local SQL_FILE="$1"
	# If there is no parameter, use first initialization sql script
	[ -z "$SQL_FILE" ] && SQL_FILE="$INITSQL_FIRST"
	# Get file base name without the path
	local SQL_FILE_BASENAME="`basename "$SQL_FILE"`"
	# If we got only basename of the file, we will SUPPOSE that it is in the default directory
	[ x"$SQL_FILE" = x"$SQL_FILE_BASENAME" ] && SQL_FILE="$INITSQL_DIR/$SQL_FILE_BASENAME"

	if [ -s "${UPGRADE_POLICY_FILE}" ]; then
		# TODO: Maybe later parse per-schema "sqlbasename: policy"
		# lines vs. the default policy in first line
		UPGRADE_POLICY="`head -1 "${UPGRADE_POLICY_FILE}"`" || \
		UPGRADE_POLICY="required"
	fi

	if [ "${UPGRADE_POLICY}" = skip ] ; then
		echo "WARNING: Database upgrade is disabled since policy is '$UPGRADE_POLICY' and so we proceed..." >&2
		return 0
	fi

	# TODO The method may depend on "${UPGRADE_POLICY}" ...
	install_sql_file "$SQL_FILE" "applying patch '${SQL_FILE}'" || return $?

	# Currently we prohibit service startup with inconsistent database,
	# so exit at this point and force a human to take a look at it
	if [ "${UPGRADE_POLICY}" = not-required ]; then
		echo "WARNING: Database upgrade failed, but policy is '$UPGRADE_POLICY' and so we proceed..." >&2
		return 0
	fi
	return 0
}

grep_sql_version() {
	# Prints e.g. 20151015 from stddin that contains
	# ASSUMPTION: every sql file SHOULD contain the string according the following TEMPLATE
	# SET @bios_db_schema_version = '20151015' ;
	egrep -i '^[ \t]*set[ \t]+@bios_db_schema_version[ \t]*=' | head -1 | \
	sed -e 's,^.*[ \t]*=[ \t]*\(.*\)[ \t]*;$,\1,' \
		-e 's,^"\(.*\)"$,\1,' -e "s,^'\(.*\)'.*$,\1,"
}

ensure_root_password() {
	if [ -L "${MYCNF_LEGACY}" ] && [ -s "${MYCNF}" ] && diff -q "${MYCNF_LEGACY}" "${MYCNF}" ; then
		: # Same file in final location, already a symlink in legacy location
	else
		if [ -s "${MYCNF_LEGACY}" ] && [ ! -L "${MYCNF_LEGACY}" ] && [ ! -s "${MYCNF}" ]; then
			# Legacy is a real file, new standard does not exist, move it over
			echo "Database for 42ity initialization - moving an existing password file MYCNF_LEGACY to MYCNF, and a symlink in its place pointing to the new location..." >&2 && \
			rm -f "${MYCNF}" && \
			mv -f "${MYCNF_LEGACY}" "${MYCNF}" && \
			ln -s "${MYCNF}" "${MYCNF_LEGACY}"
		fi
	fi

	# The first attempt uses the $MYCNF_LEGACY file or symlink (in homedir)
	# The second attempt tries the empty password just in case
	# Then fall back to try MYCNF if present and different from MYCNF_LEGACY
	# Then fall back to a very legacy file if present
	if [ -z "`echo "select 'working';" | do_mysql | grep working`" ]; then
		if [ -z "`echo "select 'working';" | do_mysql --password='' | grep working`" ]; then
			if [ -s "$MYCNF" ] && ! diff -q "$MYCNF" "$MYCNF_LEGACY" ; then
				# Data in the legacy location was verified to be invalid above
				# Try to move the old file away (backup just in case of scripting error)
				[ -s "${MYCNF_LEGACY}" ] && mv -f "${MYCNF_LEGACY}" "${MYCNF_LEGACY}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
				rm -f "${MYCNF_LEGACY}" && \
				ln -s "${MYCNF}" "${MYCNF_LEGACY}"
				chmod 600 "$MYCNF"
				if echo "select 'working';" | do_mysql | grep -w working > /dev/null; then
					echo "Database for 42ity initialization - created a symlink MYCNF_LEGACY pointing to valid password file MYCNF" >&2
				else # Both data are invalid
					[ -s "${MYCNF_LEGACY}" ] && mv -f "${MYCNF_LEGACY}" "${MYCNF_LEGACY}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
					[ -s "${MYCNF}" ] && mv -f "${MYCNF}" "${MYCNF}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
					rm -f "${MYCNF_LEGACY}" "${MYCNF}"
				fi
			else # No file(s) or same invalid data
				[ -s "${MYCNF_LEGACY}" ] && mv -f "${MYCNF_LEGACY}" "${MYCNF_LEGACY}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
				[ -s "${MYCNF}" ] && mv -f "${MYCNF}" "${MYCNF}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
				rm -f "${MYCNF_LEGACY}" "${MYCNF}"
			fi

			if [ ! -s "${MYCNF_LEGACY}" ] && [ -n "$MYSQL_ROOT_PASSWD" ] \
			&& [ -n "`echo "select 'working';" | do_mysql --password="$MYSQL_ROOT_PASSWD" | grep working`" ] \
			; then
				[ -s "${MYCNF}" ] && mv -f "${MYCNF}" "${MYCNF}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
				rm -f "$MYCNF"  # Reset access rights, if unsecured earlier
				printf '[client]\nuser=%s\npassword=%s\n' "${USER}" "${MYSQL_ROOT_PASSWD}" > "$MYCNF" && \
				rm -f /etc/default/mysql-root-passwd # No more legacy
				chmod 600 "$MYCNF"
				[ -s "${MYCNF_LEGACY}" ] && mv -f "${MYCNF_LEGACY}" "${MYCNF_LEGACY}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
				rm -f "${MYCNF_LEGACY}"
				ln -s "${MYCNF}" "${MYCNF_LEGACY}"
			else
				echo "Error: Can't connect to database" >&2
				return 1
			fi
		else
			echo "Config files inconsistent: really MYSQL root password is empty (was database recreated?)" >&2
			MYSQL_ROOT_PASSWD_FLAG='--password='
		fi
	fi

	if [ ! -s "$MYCNF" ] || [ ! -s "$MYCNF_LEGACY" ] || [ x"$MYSQL_ROOT_PASSWD_FLAG" = x"--password=" ]; then
		# ~/.my.cnf missing or empty, or password was detected as empty
		# Note this structure allows a .my.cnf to specify password=''
		echo "Database for 42ity - generating MySQL root password instead of corrupt/empty value..."
		# Just in case, avoid weird chars in the password
		ROOT_PW="`random_password`"
		cat << EOF | do_mysql $MYSQL_ROOT_PASSWD_FLAG
SET PASSWORD = PASSWORD('$ROOT_PW');
FLUSH PRIVILEGES;
EOF
		[ $? != 0 ] && echo "Error setting MySQL root password" >&2 && return 1

		[ -s "${MYCNF}" ] && mv -f "${MYCNF}" "${MYCNF}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
		rm -f "$MYCNF"  # Reset access rights, if unsecured earlier
		printf '[client]\nuser=%s\npassword=%s\n' "${USER}" "${ROOT_PW}" > "$MYCNF"
		chmod 600 "$MYCNF"
		[ -s "${MYCNF_LEGACY}" ] && mv -f "${MYCNF_LEGACY}" "${MYCNF_LEGACY}.bad-`date -u '+%Y%m%dT%H%M%SZ'`"
		rm -f "${MYCNF_LEGACY}"
		ln -s "${MYCNF}" "${MYCNF_LEGACY}"
	else
		echo "Database for 42ity - not touching MySQL root password - previous value remains in place..."
	fi

	if [ -z "`echo "select 'working';" | do_mysql | grep working`" ]; then
		echo "Database for 42ity - final check for MySQL root password failed!" >&2
		ls -la "${MYCNF}" "${MYCNF_LEGACY}" >&2
		return 1
	fi

	if [ -x "@datadir@/@PACKAGE@/setup/90-mylogin.everytime.sh" ]; then
		echo "Try to arrange that our new login is known by OS-provided tools and scripts"
		"@datadir@/@PACKAGE@/setup/90-mylogin.everytime.sh" || true
	fi

	return 0
}

verify_schema_version() {
	# For full filename path referenced by $1, checks presence and
	# consistency of versions set by the base filename (in DB) and
	# against the version specified in the SQL file itself
	# If "$1" is just a short name (e.g. coming from database) and is
	# missing in INITSQL_DIR we do not compare against in-file version.
	local SQL_FILE="$1"
	[ -z "$SQL_FILE" ] && SQL_FILE="$INITSQL_FIRST"
	local SQL_FILE_BASENAME="`basename "$SQL_FILE"`"
	[ x"$SQL_FILE" = x"$SQL_FILE_BASENAME" ] && SQL_FILE="$INITSQL_DIR/$SQL_FILE_BASENAME"

	# Verify that our SQL file has the information about its version
	# So verify, if this file fulfills the ASSUMPTION
	local SCHEMA_VERSION_SQL=""
	if [ -r "$SQL_FILE" ] && [ -s "$SQL_FILE" ] \
	; then
		SCHEMA_VERSION_SQL="`grep_sql_version < "$SQL_FILE"`" \
			|| SCHEMA_VERSION_SQL=""
	fi
	if [ -z "$SCHEMA_VERSION_SQL" ]; then
		echo "ERROR: File '$SQL_FILE' is in the inconsistent state, because it doesn't contain the string 'SET @bios_db_schema_version = 'YYYYMMDD' '" >&2
		# this error should not appear on the customer side, unless someone touch sql files
		# abort immediately
		exit 2
	fi

	# Select import tags from database
	local SCHEMA_VERSION_DB_1=$(exec_sql_db "SELECT version FROM t_bios_schema_version WHERE tag='begin-import' AND filename='$SQL_FILE_BASENAME' ORDER BY id DESC LIMIT 1;") || \
		SCHEMA_VERSION_DB_1="begin-NA"
	local SCHEMA_VERSION_DB_2=$(exec_sql_db "SELECT version FROM t_bios_schema_version WHERE tag='finish-import' AND filename='$SQL_FILE_BASENAME' ORDER BY id DESC LIMIT 1;") || \
		SCHEMA_VERSION_DB_2="finish-NA"

	# Verify if this database and version information are available
	if [ x"$SCHEMA_VERSION_DB_1" = x"begin-NA" ] || \
	   [ x"$SCHEMA_VERSION_DB_2" = x"finish-NA" ] \
	; then
		echo "ERROR: 1. Mysql is not running or 2. There are problems with t_bios_schema_version table. Fix them manually" >&2
		# abort immediately
		exit 2
	fi

	# Verify if this particular file wasn't imported yet at all
	if [ -z "$SCHEMA_VERSION_DB_1" ] && \
	   [ -z "$SCHEMA_VERSION_DB_2" ] \
	; then
		echo "File '$SQL_FILE' wasn't imported yet, import it now"
		upgrade_database "$SQL_FILE"
		return $?
	fi

	# Verify that begin-import and finish-import version tags are the same
	if [ x"$SCHEMA_VERSION_DB_1" != x"$SCHEMA_VERSION_DB_2" ] || \
	   [ -z "$SCHEMA_VERSION_DB_1" ] || [ -z "$SCHEMA_VERSION_DB_2" ] \
	; then
		echo "Error: Schema version for '$SQL_FILE' is not consistent in the database ('$SCHEMA_VERSION_DB_1' vs '$SCHEMA_VERSION_DB_2'). Investigate and fix it manually" >&2
		# abort immediately
		exit 2
	fi

	# Verify if version of the file is the same as version of the file in the database
	if [ x"$SCHEMA_VERSION_DB_2" != x"$SCHEMA_VERSION_SQL" ]; then
		echo "Error: Schema version for '$SQL_FILE' in the database is not the same as in current SQL schema file ('$SCHEMA_VERSION_DB_2' vs '$SCHEMA_VERSION_SQL')" >&2
		echo "NOT IMPLEMENTED"
		# abort immediately
		exit 2
	fi

	echo "Schema component '$SQL_FILE' version '$SCHEMA_VERSION_DB_2' is up-to-date"
	return 0
}

trap_exit() {
    RET_CODE=$?

    if [ "$RET_CODE" = 0 ] && [ -n "$DB_READY_FILE" ] ; then
        echo "Trying to touch the '$DB_READY_FILE' to mark successful completion of init/verification of DB schema, database is ready to use by IPM applications" >&2
        mkdir -p "`dirname "$DB_READY_FILE"`" && touch "$DB_READY_FILE" || echo "WARNING : Failed to touch the '$DB_READY_FILE'!" >&2
    fi

    echo "Syncing changes (if any) to stable storage..."
    sync
    return $RET_CODE
}

trap 'trap_exit' 0 1 2 3 15

DB_READY_FILE=""
while [ $# -gt 0 ]; do
	case "$1" in
		--db-ready-file)
			shift
			case "$1" in
				/*)	DB_READY_FILE="$1" ;;
				*)	echo "DB_READY_FILE must be a fully qualified path" >&2 ; exit 1 ;;
			esac
			;;
		*) echo "Unsupported argument, ignored: $1" >&2 ;;
	esac
	shift
done

case "$INSTSQL_DIR" in
	/*) [ -d "$INSTSQL_DIR" ] || { \
			echo "Creating INSTSQL_DIR='$INSTSQL_DIR' to save copies of applied SQL files..."; \
			mkdir -p "$INSTSQL_DIR" && chown bios:root "$INSTSQL_DIR" && chmod 750 "$INSTSQL_DIR"; }
		[ ! -d "$INSTSQL_DIR" -o ! -w "$INSTSQL_DIR" ] && \
			echo "WARNING: Can not use INSTSQL_DIR='$INSTSQL_DIR', copies of applied SQL files will not be stashed" >&2 && \
			INSTSQL_DIR=""
		;;
	"") echo "WARNING: Empty INSTSQL_DIR provided, copies of applied SQL files will not be stashed" >&2 ;;
	*)  echo "ERROR: Non-absolute INSTSQL_DIR='$INSTSQL_DIR' provided, copies of applied SQL files will not be stashed" >&2
		INSTSQL_DIR=""
		;;
esac

case "$CREDSQL_DIR" in
	/*) [ -d "$CREDSQL_DIR" ] || { \
			echo "Creating CREDSQL_DIR='$CREDSQL_DIR' to save applied database credentials..."; \
			mkdir -p "$CREDSQL_DIR" && chown bios:root "$CREDSQL_DIR" && chmod 750 "$CREDSQL_DIR"; }
		;;
	"") ;;
	*)  echo "ERROR: Non-absolute CREDSQL_DIR='$CREDSQL_DIR' provided" >&2
		CREDSQL_DIR=""
		;;
esac
[ -z "$CREDSQL_DIR" ] && [ ! -d "$CREDSQL_DIR" -o ! -w "$CREDSQL_DIR" ] && \
	echo "WARNING: Can not use CREDSQL_DIR='$CREDSQL_DIR' to save database credentials!" >&2 && \
	exit 2

ensure_root_password || exit $?

# Note that BIOS_DB_INIT is very optional and mostly intended
# for development. Production code does not set it.
case "${BIOS_DB_INIT-}" in
	generate|initialize|flush|init) generate_database; exit $? ;;
	upgrade|update) upgrade_database "$@"; exit $? ;;
esac

# From here on, the mysql client should rely on ~/.my.cnf
# so no extra password params are needed
if [ -z "`exec_sql 'show databases;' | egrep '^'"${DATABASE}"'$'`" ]; then
	generate_database
	exit $?         # Success or failure - we exit here anyway
else
	# Just make sure user passwords are okay
	secure_database
fi

# If there are any consistency checks to run on the database -
# e.g. to detect botched imports, need of upgrades, etc. - do it here
# Here we pick basenames from foth INITSQL_DIR and database, and also
# make sure to verify INITSQL_FIRST (whether the file exists or not)
for F in "$INITSQL_FIRST" \
	`{ ls -1 "${INITSQL_DIR}"/*.sql | sed 's,^.*/\([^\/]*$\),\1,'; exec_sql_db 'SELECT DISTINCT filename FROM t_bios_schema_version;' ; } | sort | uniq | grep -v "$(basename $INITSQL_FIRST)"` \
; do
	# Note that policy and activity regarding SQL schema files distributed
	# with the current product vs. files and versions registered in the
	# database is defined in verify_schema_version(). In particular, it
	# currently would trigger an import of newly found files that were
	# not seen before (schema upgrade for newer product version), calling
	# upgrade_database(), and will complain fatally about changed versions
	# of files that were already imported before.
	verify_schema_version "$F" || exit $?
done

echo "Database for 42ity - found and deemed sufficient"
exit 0
