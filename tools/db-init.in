#!/bin/sh

# Copyright (C) 2014 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file   db-init(.in)
#  \brief  Inits the BIOS database schema on factory-default installations
#  \author Karol Hrdina <KarolHrdina@Eaton.com>
#  \author Alena Chernikava <AlenaChernikava@Eaton.com>
#  \author Michal Hrusecky <MichalHrusecky@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \details Caller may export BIOS_DB_INIT envvar set to 'initialize' or
#           'upgrade' to trigger the corresponding function and exit.
#

prefix="@prefix@"
DATABASE=box_utf8
INITSQL="@datarootdir@/@PACKAGE@/sql/mysql/initdb.sql"
[ -n "$HOME" ] && [ -d "$HOME" ] && \
	MYCNF="$HOME/.my.cnf" || \
	MYCNF="/root/.my.cnf"
# MySQL-root password is empty by default, otherwise is cached in $MYCNF
# and so it is not needed to specify it explicitly either

# Flag used to set a password, empty if defaults suffice
MYSQL_ROOT_PASSWD=''

do_mysql() {
	mysql -u root "$@"
}

exec_sql() {
	# NOTE: $1 must be the SQL request; any other params like
	# passwd can follow afterwards as $2 etc.
	# SQL commands should be separated by ';' chars, though last
	# (or single) command may omit it
	do_mysql -Ns -e "$@"
}

exec_sql_db() {
	do_mysql -Ns -D "${DATABASE}" -e "$@"
}

random_password() {
	# Generate a random ASCII string without "confusing" characters
	head -c 12 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n],%,g'
}

generate_database() {
	# Imports the BIOS database files, sets up and saves passwords
	if [ -r "$INITSQL" ] && \
	   [ -s "$INITSQL" ]; then
		echo "Database for BIOS initialization - importing schema..."
		do_mysql < "$INITSQL" || exit 1

		echo "Database for BIOS initialization - generating user passwords..."

		BIOS_RW="`random_password`"
		BIOS_RO="`random_password`"

		cat << EOF | do_mysql
GRANT DELETE,INSERT,SELECT,UPDATE ON ${DATABASE}.* TO 'bios-rw'@'localhost' IDENTIFIED BY '$BIOS_RW';
GRANT SELECT                      ON ${DATABASE}.* TO 'bios-ro'@'localhost' IDENTIFIED BY '$BIOS_RO';
FLUSH PRIVILEGES;
EOF
		printf 'DB_USER="%s"\nDB_PASSWD="%s"\n' "bios-rw" "${BIOS_RW}" > /etc/default/bios-db-rw
		printf 'DB_USER="%s"\nDB_PASSWD="%s"\n' "bios-ro" "${BIOS_RO}" > /etc/default/bios-db-ro
		chown bios /etc/default/bios-db-r[wo]
		chmod 600 /etc/default/bios-db-r[wo]

		echo "Database for BIOS initialization - completed the schema import and password generation"
		return 0
	else
		echo "Error: Can't read '$INITSQL' !!!" >&2
		return 1
	fi
}

upgrade_database() {
	echo "Error: Database upgrade not currently implemented (TODO), but was required (see above)!" >&2
	echo "Consider running 'BIOS_DB_INIT=init $0' to flush and reinitialize the database" >&2
	exit 1
}

grep_sql_version() {
	# Prints e.g. 20151015 from stddin that contains
	# SET @bios_db_schema_version = '20151015' ;
	egrep -i '^[ \t]*set[ \t]+@bios_db_schema_version[ \t]*=' | head -1 | \
	sed -e 's,^.*[ \t]*=[ \t]*\(.*\)[ \t]*;$,\1,' \
		-e 's,^"\(.*\)"$,\1,' -e "s,^'\(.*\)'.*$,\1,"
}

if [ -z "`echo "select 'working';" | do_mysql | grep working`" ]; then
	if [ -z "`echo "select 'working';" | do_mysql --password='' | grep working`" ]; then
		echo "Error: Can't connect to database"
		exit 1
	else
		echo "Config files inconsistent: really MYSQL root password is empty (database recreated?)"
		MYSQL_ROOT_PASSWD='--password='
	fi
fi

if [ ! -s "$MYCNF" ] || [ x"$MYSQL_ROOT_PASSWD" = x"--password=" ]; then
	# ~/.my.cnf missing or empty, or password was detected as empty
	# Note this structure allows a .my.cnf to specify password=''
	echo "Database for BIOS - generating MySQL root password instead of corrupt/empty value..."
	# Just in case, avoid weird chars in the password
	ROOT_PW="`random_password`"
	cat << EOF | do_mysql $MYSQL_ROOT_PASSWD
SET PASSWORD = PASSWORD('$ROOT_PW');
FLUSH PRIVILEGES;
EOF
	[ $? != 0 ] && echo "Error setting MySQL root password" >&2 && exit 1

	rm -f "$MYCNF"  # Reset access rights, if unsecured earlier
	printf '[client]\nuser=root\npassword=%s\n' "${ROOT_PW}" > "$MYCNF"
	chmod 600 "$MYCNF"
else
	echo "Database for BIOS - not touching MySQL root password - previous value remains in place..."
fi

case "${BIOS_DB_INIT-}" in
	generate|initialize|flush|init) generate_database; exit $? ;;
	upgrade|update) upgrade_database; exit $? ;;
esac

# From here on, the mysql client should rely on ~/.my.cnf
# so no extra password params are needed
if [ -z "`exec_sql 'show databases;' | egrep '^'"${DATABASE}"'$'`" ]; then
	generate_database
	exit $?         # Success or failure - we exit here anyway
fi

# If there are any consistency checks to run on the database -
# e.g. to detect botched imports, need of upgrades, etc. - do it here

# Verify that begin-import and finish-import version tags are the same
BIOS_SCHEMA_VERSION_DB_1=$(exec_sql_db "SELECT version FROM t_bios_schema_version WHERE tag='begin-import';") || \
	BIOS_SCHEMA_VERSION_DB_1="begin-NA"
BIOS_SCHEMA_VERSION_DB_2=$(exec_sql_db "SELECT version FROM t_bios_schema_version WHERE tag='finish-import';") || \
	BIOS_SCHEMA_VERSION_DB_2="finish-NA"

if [ -n "$BIOS_SCHEMA_VERSION_DB_1" ] && [ -n "$BIOS_SCHEMA_VERSION_DB_2" ]; then
	if [ x"$BIOS_SCHEMA_VERSION_DB_1" != x"$BIOS_SCHEMA_VERSION_DB_2" ]; then
		echo "Error: Schema version is not consistent in BIOS database ('$BIOS_SCHEMA_VERSION_DB_1' vs '$BIOS_SCHEMA_VERSION_DB_2')" >&2
		upgrade_database        # DB initialization crashed mid-way
		exit $?
	fi
else
	echo "Error: Schema version is not available in BIOS database" >&2
	upgrade_database        # DB is too old or import failed VERY early
	exit $?
fi

# Verify that our SQL file has the same schema version as the database
if [ -r "$INITSQL" ] && [ -s "$INITSQL" ] && \
	BIOS_SCHEMA_VERSION_SQL="`grep_sql_version < "$INITSQL"`" \
; then
	if [ -z "$BIOS_SCHEMA_VERSION_SQL" ]; then
		echo "Warning: Can't find BIOS database schema version in '$INITSQL', but some BIOS database is available with version '$BIOS_SCHEMA_VERSION_DB_2'; skipping the test for need of upgrades" >&2
	else
		# Database version is consistent and not empty; what about SQL file version?
		if [ x"$BIOS_SCHEMA_VERSION_DB_2" != x"$BIOS_SCHEMA_VERSION_SQL" ]; then
			echo "Error: Schema version in BIOS database is not the same as in current SQL schema file ('$BIOS_SCHEMA_VERSION_DB_2' vs '$BIOS_SCHEMA_VERSION_SQL')" >&2
			upgrade_database        # DB is older/different than the SQL file
			exit $?
		fi
	fi
else
	echo "Warning: Can't read '$INITSQL' but some BIOS database is available" >&2
	echo "Not verifying database schema version vs. initialization SQL file"
fi

echo "Database for BIOS - found and deemed sufficient, with schema version '$BIOS_SCHEMA_VERSION_DB_2'"
exit 0
