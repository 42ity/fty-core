#!/bin/bash

#
# Copyright (C) 2014 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


#! \file   envvars-ExecStartPre.sh(.in)
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \brief  Not yet documented file

echo "Generate common run-time environment variables file for 42ity"

LANG=C
LC_ALL=C
TZ=UTC
export LANG LC_ALL TZ

set -e

while [ "$#" -gt 0 ]; do
    case "$1" in
        -O) OUTFILE="$2"; shift;;
        --sql) OUTFMT="sql" ;;
        *)  echo "Unknown argument: $1" >&2 ; exit 1 ;;
    esac
    shift
done
[ -n "$OUTFMT" ] || OUTFMT="env"
    # Note: several services expect to include an EnvironmentFile=/run/fty-envvars.env
[ -n "$OUTFILE" ] || OUTFILE="/run/fty-envvars.$OUTFMT"
J="/etc/release-details.json"
JO="/etc/bios-release.json" # Backwards compatibility
echo "Make sure the current OS image name and other details are populated into '$OUTFILE'..."
JSONSH="@datadir@/@PACKAGE@/scripts/JSON.sh"
#JSONSH="/usr/share/bios/scripts/JSON.sh"
OSIMAGE_BASENAME="OS image name is not available"
OSIMAGE_DISTRO="" ### OS base distribution name is not available (?)
HARDWARE_CATALOG_NUMBER="Hardware catalog number is not available"
HARDWARE_SPEC_REVISION="Hardware spec revision is not available"
HARDWARE_SERIAL_NUMBER="Hardware serial number is not available"
HARDWARE_UUID="Hardware generated UUID is not available"

# Empty value means "Virtualization status is not available",
# e.g. no systemd on this box... A successfully resolved status
# of no virtualization of this type is "none".
VIRT_CONTAINER=""
VIRT_HYPERVIZOR=""

{ [[ -s "$J" ]] || [[ -s "$JO" ]] ; } && \
if [[ -x "$JSONSH" ]] ; then
    if [[ -n "${BASH-}" ]]; then
        . "$JSONSH"
        get_a_string_arg() { jsonsh_cli_subshell --get-string "$1" ; }
    else
        logmsg_info "systemctl: Will fork to use JSON.sh from '$JSONSH' to cook strings"
        get_a_string_arg() { "$JSONSH" --get-string "$1" ; }
    fi
    get_detail() {
        local _TMPSTR=""
        [[ -s "$J" ]] && \
            _TMPSTR="$(get_a_string_arg '"release-details","'"$1"'"' < "$J")" && [[ -n "${_TMPSTR}" ]] || \
            _TMPSTR=""
        if [[ -z "${_TMPSTR}" ]] && [[ ! -s "$J" ]] && [[ -s "$JO" ]] ; then
            # Legacy fallback: new OS image, old uImage - no release-details yet
            _TMPSTR="$(get_a_string_arg '"bios-release","'"$1"'"' < "$JO")" && [[ -n "${_TMPSTR}" ]] || \
                _TMPSTR=""
        fi
        echo "${_TMPSTR}"
        if [[ -n "${_TMPSTR}" ]] ; then return 0 ; else return 1; fi
    }

    TMPSTR="$(get_detail "osimage-name")" || \
    { TMPSTR="$(get_detail "osimage-filename")" && \
        TMPSTR="`basename "$TMPSTR" | sed 's/\.\(squashfs\|tar\|tar\..*\|tgz\|tbz2\|txz\)$//'`" ; } || \
    TMPSTR=""
    [[ -n "$TMPSTR" ]] && OSIMAGE_BASENAME="$TMPSTR" || true

    TMPSTR="$(get_detail "osimage-distro")" && \
        OSIMAGE_DISTRO="$TMPSTR" || true

    TMPSTR="$(get_detail "hardware-catalog-number")" && \
        HARDWARE_CATALOG_NUMBER="$TMPSTR" || true
    TMPSTR="$(get_detail "hardware-spec-revision")" && \
        HARDWARE_SPEC_REVISION="$TMPSTR" || true
    TMPSTR="$(get_detail "hardware-serial-number")" && \
        HARDWARE_SERIAL_NUMBER="$TMPSTR" || true
    TMPSTR="$(get_detail "uuid")" && \
        HARDWARE_UUID="$TMPSTR" || true
    unset TMPSTR
fi

# Note: no fallback "empty on error", and ignore error codes, as per manpage:
#    EXIT STATUS
# If a virtualization technology is detected, 0 is returned, a non-zero code
# otherwise. => we lose the "none" string value where c/h virt is not found.
if [ -x /usr/bin/systemd-detect-virt ]; then
    VIRT_CONTAINER="$(/usr/bin/systemd-detect-virt -c)" || true # not VIRT_CONTAINER=""
    VIRT_HYPERVIZOR="$(/usr/bin/systemd-detect-virt -v)" || true # not VIRT_HYPERVIZOR=""
fi

ENV_HOSTNAME="$(hostname | tr '[A-Z]' '[a-z]' )" || ENV_HOSTNAME=""
ENV_DOMAINNAME="$(domainname | tr '[A-Z]' '[a-z]' | grep -v '(none)')" || ENV_DOMAINNAME=""
ENV_DNSDOMAINNAME="$(dnsdomainname | tr '[A-Z]' '[a-z]' | grep -v '(none)')" || ENV_DNSDOMAINNAME=""
# A one-per-line list of unique values for "domain" or "search" keywords
# from /etc/resolv.conf; not exported at this time (see ENV_KNOWNDOMAINS)
ENV_RESOLVDOMAINS="$(egrep '^[[:blank:]]*(search|domain)[[:blank:]]+' /etc/resolv.conf | while read K V ; do echo $V ; done | sed -e 's,[[:blank:]]+,\n,g' -e 's,\.$,,g' | tr '[A-Z]' '[a-z]' | sort | uniq)"
# A comma-separated list (required for SQL magic, usable in shell) of
# current non-loopback IP addresses, IPv4 and IPv6 alike, without masks
ENV_IPADDRS="$(ip addr show | egrep '^[[:blank:]]*inet6?[[:blank:]]' | awk '{print $2}' | tr '[A-Z]' '[a-z]' | egrep -v '^(127\..*|0\.|255\.|::1/128)$' | sed 's,/[0-9]*$,,' | sort -nr | uniq | tr '\n' ',' | sed 's/,$//')" || ENV_IPADDRS=""

# Similarly, extract comma-separated lists of just IPv4 and IPv6 addresses
ENV_IP4ADDRS=""
ENV_IP6ADDRS=""
IFS_OLD="$IFS"
IFS=","
for IP in $ENV_IPADDRS ; do
    case "$IP" in
        "") ;;
        [0123456789]*.[0123456789]*.[0123456789]*.[0123456789]*) # Not pedantically correct expression, but should be good enough
            [ -n "$ENV_IP4ADDRS" ] && ENV_IP4ADDRS="$ENV_IP4ADDRS,$IP" || ENV_IP4ADDRS="$IP" ;;
        *)  [ -n "$ENV_IP6ADDRS" ] && ENV_IP6ADDRS="$ENV_IP6ADDRS,$IP" || ENV_IP6ADDRS="$IP" ;;
    esac
done
IFS="$IFS_OLD"
unset IFS_OLD

# A comma-separated list of domain names (if any) that can be part of
# this machine's FQDN when coupled with the hostname above. Note that
# generally definition of "domain" is domain-dependent (pun intended).
ENV_KNOWNDOMAINS="$(echo $ENV_DOMAINNAME $ENV_DNSDOMAINNAME $ENV_RESOLVDOMAINS | tr ' ' '\n' | sort -n | uniq | tr '\n' ',' | sed 's/,$//')"

list_hostnames_raw() {
    # Map known "this-host" IP addresses to known hostnames
    getent hosts 127.0.0.1 "::1" `echo "$ENV_IPADDRS" | tr ',' ' '` \
    | while read K V ; do echo $V ; done
}

list_fqdns() {
    for H in `list_hostnames_raw` $ENV_HOSTNAME `cat /etc/hostname 2>/dev/null || true` ; do
        H="`echo "$H" | tr '[A-Z]' '[a-z]'`"
        case "$H" in
            localhost*|bios|loghost|mailhost) ;; # skip
            *.*) echo "$H" ;; # Already a dot-separated string
            *) if [ -z "$ENV_KNOWNDOMAINS" ]; then echo "$H"; else
                   echo "$ENV_KNOWNDOMAINS" | while IFS="," read D; do
                       echo "$H.$D"
                   done
               fi
               ;; # Generate dot-separated strings
        esac
    done | tr '[A-Z]' '[a-z]' | sort | uniq
}

# A comma-separated list of this host's fully qualified domain names
ENV_KNOWNFQDNS="$(list_fqdns | tr '\n' ',' | sed 's/,$//')"

RES=255
case "$OUTFMT" in
    env) cat << EOF > "$OUTFILE"
OSIMAGE_BASENAME='$OSIMAGE_BASENAME'
OSIMAGE_DISTRO='$OSIMAGE_DISTRO'
HARDWARE_CATALOG_NUMBER='${HARDWARE_CATALOG_NUMBER}'
HARDWARE_SPEC_REVISION='${HARDWARE_SPEC_REVISION}'
HARDWARE_SERIAL_NUMBER='${HARDWARE_SERIAL_NUMBER}'
HARDWARE_UUID='${HARDWARE_UUID}'
VIRT_HYPERVIZOR='${VIRT_HYPERVIZOR}'
VIRT_CONTAINER='${VIRT_CONTAINER}'
ENV_HOSTNAME='${ENV_HOSTNAME}'
ENV_DOMAINNAME='${ENV_DOMAINNAME}'
ENV_DNSDOMAINNAME='${ENV_DNSDOMAINNAME}'
ENV_IPADDRS='${ENV_IPADDRS}'
ENV_IP4ADDRS='${ENV_IP4ADDRS}'
ENV_IP6ADDRS='${ENV_IP6ADDRS}'
ENV_KNOWNDOMAINS='${ENV_KNOWNDOMAINS}'
ENV_KNOWNFQDNS='${ENV_KNOWNFQDNS}'
EOF
        RES=$?
        ;;
    sql) cat << EOF | sed "s,='';$,=NULL;," > "$OUTFILE"
set @ENV_OSIMAGE_BASENAME='$OSIMAGE_BASENAME';
set @ENV_OSIMAGE_DISTRO='$OSIMAGE_DISTRO';
set @ENV_HARDWARE_CATALOG_NUMBER='${HARDWARE_CATALOG_NUMBER}';
set @ENV_HARDWARE_SPEC_REVISION='${HARDWARE_SPEC_REVISION}';
set @ENV_HARDWARE_SERIAL_NUMBER='${HARDWARE_SERIAL_NUMBER}';
set @ENV_HARDWARE_UUID='${HARDWARE_UUID}';
set @ENV_VIRT_HYPERVIZOR='${VIRT_HYPERVIZOR}';
set @ENV_VIRT_CONTAINER='${VIRT_CONTAINER}';
set @ENV_HOSTNAME='${ENV_HOSTNAME}';
set @ENV_DOMAINNAME='${ENV_DOMAINNAME}';
set @ENV_DNSDOMAINNAME='${ENV_DNSDOMAINNAME}';
set @ENV_IPADDRS='${ENV_IPADDRS}';
set @ENV_IP4ADDRS='${ENV_IP4ADDRS}';
set @ENV_IP6ADDRS='${ENV_IP6ADDRS}';
set @ENV_KNOWNDOMAINS='${ENV_KNOWNDOMAINS}';
set @ENV_KNOWNFQDNS='${ENV_KNOWNFQDNS}';
EOF
        RES=$?
        ;;
    *) echo "Unknown output format: $OUTFMT" >&2 ; exit 1 ;;
esac

[ "$RES" = 0 ] && echo "OK" || echo "FAILED ($RES)" >&2
exit $RES
