#!/bin/bash
#
# Copyright (C) 2015 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    rc-bios
#  \brief   Tool for starting processes with proper dependencies and in a
#  \brief   user/developer friendly way
#  \author  Michal Vyskocil <MichalVyskocil@Eaton.com>
#  \author  Jim Klimov <EvgenyKlimov@Eaton.com>
#  \author  Tomas Halman <TomasHalman@Eaton.com>
#  \details Tool for starting processes with proper dependencies and in a
#           user/developer friendly way
#   It has two main modes of operations:
#       1.) priviledged user under systemd - unit files are installed to /run
#           and executed
#       2.) non-priviledged user or non systemd - dependencies and arguments
#           are extracted and script run them on its own
#
#  \todo    it will be convenient if stdout/stderr of manually started processes will be duplicated to 
#           what about mysql?

PATH=/usr/bin:/bin:/usr/sbin:/sbin
export PATH

BASE_PATH=`dirname $0`
BASE_PATH=`realpath ${BASE_PATH}/../`

### System-provided daemons (available as systemd units)
DAEMONS_OS_SYSTEMD="malamute nut-client nut-driver nut-monitor mysql saslauthd"
### 42ity-provided daemons (available as systemd units)
DAEMONS_OUR_SYSTEMD="tntnet@bios bios-agent-alert bios-agent-alert-smtp bios-agent-cm"

# Simple check for whether sudo is needed for high-privilege tasks
# We assume here that the non-privileged user running this command
# does have "sudo" permissions set up per 42ity documentation.
RUNAS=""
CURID="`id -u`" || CURID=""
[ "$CURID" = 0 -o "$CURID" = root ] || RUNAS="sudo"

### List of daemons that we manage as one mega-unit by default
[ -z "$DAEMONS" ] && \
    DAEMONS="$DAEMONS_OS_SYSTEMD $DAEMONS_OUR_SYSTEMD"

logmsg_die() {
    [ -z "$CODE" ] || [ "$CODE" -ge 0 ] 2>/dev/null || CODE=1
    echo "FATAL: ${@}" >&2
    exit $CODE
}

logmsg_warn() {
    echo "WARNING: ${@}" >&2
}

logmsg_info() {
    echo "INFO: ${@}"
}

usage() {
    echo "Usage: rc-bios [{start|stop}] [names [of [daemons]]]" >&2
    if can_use_sysd; then
        echo "       systemd activation WILL BE used" >&2
    else
        echo "       systemd activation WILL NOT BE used" >&2
    fi
    echo "       Tool supports short names, so rc-bios nut == rc-bios bios-agent-nut" >&2
    echo "       If no action is given, assume 'start' of given parameters" >&2
    echo "       If no daemons are given, assume all of: $DAEMONS" >&2
    exit 1
}

my_systemctl() {
    $RUNAS /usr/bin/systemctl --system --no-pager --full "$@"
}

systemctl_start() {
    my_systemctl start "$@"
}

systemctl_stop() {
    my_systemctl stop "$@" || true
    sleep 2
    pidof "$@" >/dev/null 2>&1 && return 1
    return 0
}

systemctl_status() {
    my_systemctl status "$@"
}

is_external_unit() {
    local unit
    unit=${1}

    for U in $DAEMONS_OS_SYSTEMD $DAEMONS_OUR_SYSTEMD ; do
	if [ x"$unit" = x"$U" ]; then
		return 0
	fi
    done

    return 1
}

# find a proper name for a systemd unit file, if any
# unit_name nut -> bios-agent-nut
# unit_name malamute -> malamute
# unit_name mysql.service -> mysql
unit_name() {
    local arg
    arg=${1}

    [ -n "${arg}" ] || logmsg_die "unit name must not be empty"

    arg=$(basename "${arg}" .service)

    if is_external_unit "${arg}"; then
        echo "${arg}"
        return 0
    fi

    for i in ${arg} bios-${arg} bios-driver-${arg} bios-agent-${arg}; do
        if [ -r "${BASE_PATH}/tools/${i}.service.in" ] || \
	   [ -r "/usr/lib/systemd/system/${i}.service" ] \
	; then
            echo "${i}"
            return 0
        fi
    done

    return 1
}

find_buildsubdir() {
    local buildsubdir
    [ -d "${BASE_PATH}" ] || \
        logmsg_die "${BASE_PATH} is not directory"

    buildsubdir=`/usr/bin/find -P ${BASE_PATH}/ -xdev -type f -executable -name 'config.status' -print -quit`
    buildsubdir=`dirname "${buildsubdir}"`
    buildsubdir=`realpath "${buildsubdir}"`
    echo "${buildsubdir}"
}

subst_unit() {
    local unit buildsubdir
    unit=$(unit_name ${1})

    buildsubdir=$(find_buildsubdir)
    [ -d "${buildsubdir}" ] || \
        logmsg_die "can't find config.status in ${BASE_PATH}"

    [ -n "${unit}" ] || \
        logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"

    sed -e "s|@libdir[@]/bios|${buildsubdir}|" \
        -e "s|@libexecdir[@]/bios|${buildsubdir}|" \
        -- "${BASE_PATH}/tools/${unit}.service.in" | \
    sed 's|//|/|g'
}

# install unit file
install_unit_sysd() {
    local unit
    unit=$(unit_name ${1})

    [ -n "${unit}" ] || \
        logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"

    subst_unit "${unit}" > /tmp/.${unit}.$$.service && \
    $RUNAS mv -f /tmp/.${unit}.$$.service /run/systemd/system/${unit}.service
    my_systemctl daemon-reload
}

get_unit_dependencies() {
    local unit
    unit=$(unit_name ${1})

    [ -n "${unit}" ] || \
        logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"

    grep '^Requires=' "${BASE_PATH}/tools/${unit}.service.in" | \
        cut -d '=' -f 2 | sed -e 's/.service\>//g' -e 's/[ \t]\+/\n/'
}

get_unit_exec() {
    local unit
    unit=$(unit_name ${1})

    [ -n "${unit}" ] || \
        logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"

    subst_unit "${unit}" | grep -e '^ExecStart=' | cut -d '=' -f 2
}

is_daemon_running() {
    local name pid pidfile
    name=${1}
    pidfile="${BASE_PATH}/${name}.pid"
    
    [ ! -r "${pidfile}" ] && return 1
    pid=$(head -1 "${pidfile}")
    if [ -z "$pid" -o ! -d "/proc/${pid}" ]; then
        logmsg_warn "stale pid file ${pidfile} found, removing"
        rm -f ${pidfile}
        return 1
    fi

    logmsg_info "Service '`basename ${name}`' is already running: PID ${pid}" >&2
    return 0
}

start_daemon() {
    local name args pid pidfile buildsubdir exe
    name="${1}"
    shift 1
    args="${@}"
    pidfile="${BASE_PATH}/${name}.pid"
 
    buildsubdir=$(find_buildsubdir)
    [ -d "${buildsubdir}" ] || \
        logmsg_die "Can't find config.status in ${BASE_PATH}"

    is_daemon_running "${name}" && return 0

    if [ -x "${buildsubdir}/${name}" ]; then
        exe=${buildsubdir}/${name}
    elif type "${name}" &>/dev/null; then
        exe=${name}
    else
        logmsg_die "Can't find executable ${name} in ${buildsubdir}, neither $PATH"
    fi

    logmsg_info "START-DAEMON: ${exe} ${args}"
    ${name} ${args} &
    pid=$!
    logmsg_info "START-DAEMON: ${exe}[${pid}] started"
    echo "${pid}" > "${pidfile}"

    # nasty hack to check if pid is still alive - we assume no daemonization
    # will be done by a program! this was script reports success or a fail
    sleep 3
    logmsg_info "START-DAEMON: Testing if PID $pid is still alive..."
    [ -d /proc/${pid} ] && kill -0 ${pid}
}

stop_daemon() {
    local name pid pidfile
    name="${1}"
    shift 1
    pidfile="${BASE_PATH}/${name}.pid"

    if ! is_daemon_running "${name}"; then
        rm -f "${pidfile}"
        return 0
    fi

    pid=$(cat ${pidfile})
    kill -TERM ${pid}
    sleep 1
    kill -0 ${pid} 2>/dev/null && sleep 5
    kill -0 ${pid} 2>/dev/null && kill -KILL ${pid}
    rm -f "${pidfile}"
}

run_malamute_user() {
    [ -x /usr/bin/malamute ] || logmsg_die "can't find /usr/bin/malamute"

    if killall -0 malamute &>/dev/null; then
        logmsg_info "malamute already running"
    fi

    start_daemon malamute /etc/malamute/malamute.cfg
}

run_unit_user() {
    local unit args
    unit=$(unit_name ${1})

    [ -n "${unit}" ] || \
        logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"

    if [ "${unit}" = "malamute" ]; then
        run_malamute_user || logmsg_die "cant run malamute"
        return 0
    fi

    if [ "${unit}" = "mysql" ]; then
        pgrep mysql >/dev/null || \
            logmsg_die "starting of mysql is not yet implemented! run it manually"
        return 0
    fi

    is_daemon_running "${unit}" && return 0

    for dep_unit in $(get_unit_dependencies "${unit}"); do
        run_unit_user "${dep_unit}"
    done

    args=$(get_unit_exec "${unit}")
    start_daemon "${args}"
}

run_unit_sysd() {
    local unit
    unit=$(unit_name ${1})

    if [[ ! -d "${BASE_PATH}/tools" ]]; then
        my_systemctl start ${unit}.service
        return $?
    fi

    [ -n "${unit}" ] || \
        logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"

    if ! is_external_unit "${unit}"; then
        install_unit_sysd ${unit} || logmsg_die "Can't install unit file for ${unit}"
    fi
    my_systemctl start ${unit}.service
}

can_use_sysd() {
    [ -x /usr/bin/systemctl ] && \
    readlink -f /proc/1/exe | egrep -q "/lib/systemd/systemd$"
}

stop_unit_sysd() {
    local unit

    if [ -n "${1}" ]; then
        unit=$(unit_name ${1})
        [ -n "${unit}" ] || \
            logmsg_die "${BASE_PATH}/tools/${unit}.service.in does not exist"
        my_systemctl stop ${unit}.service
        return $?
    fi

    for unit in ${DAEMONS_OUR_SYSTEMD}; do
        stop_unit_sysd "${unit}" || :
    done
}

stop_unit_user() {
    if [ -n "${1}" ]; then
        stop_daemon "${1}"
        return $?
    fi

    for name in ${DAEMONS_OUR_SYSTEMD}; do
        stop_daemon "${name}" || :
    done
}

do_start() {
    local run
    if can_use_sysd; then
        run=run_unit_sysd
    else
        run=run_unit_user
    fi

    for i in "$@"; do
        ${run} "${i}"
    done
}

do_stop() {
    local stop
    if can_use_sysd; then
        stop=stop_unit_sysd
    else
        stop=stop_unit_user
    fi

    if [ -n "${1}" ]; then
        for i in "$@"; do
            ${stop} "${i}"
        done
    else
        for i in ${DAEMONS}; do
            ${stop} "${i}"
        done
    fi
}

main() {

    [ -n "${1}" ] || usage

    [ "${1}" = "--kill" ] && logmsg_die "Switch --kill is obsoleted. To stop use ${0} stop"

    case "${1}" in
        start)
            shift 1
            do_start "$@"
            ;;
        stop)
            shift 1
            do_stop "$@"
            ;;
        *)
            logmsg_info "Unknown option '${1}', defaulting to start"
            do_start "$@"
            ;;
    esac
}

main "$@"
