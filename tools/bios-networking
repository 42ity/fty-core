#!/bin/sh
#
# Copyright (C) 2015 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    bios-networking
#  \brief   Helper script for networking part of REST API /admin/systemctl
#  \author  Michal Vyskocil <MichalVyskocil@Eaton.com>
#  \details Helper script for networking part of REST API /admin/systemctl
#           Really calling networking services synchronously is not possible
#           as changes in network config tends to close connection, therefore
#           the REST API call would never reply to caller.
#           This script is called by systemd via "bios-networking.service",
#           thus not running in webserver context, which can report success
#           using the old HTTP(S) connection.

# to ensure REST API call at least replies before actually changing the network
sleep 3

NTP_SYSTEMD_NAME=""
{ NTP_SYSTEMD_ENABLED="`/bin/systemctl is-enabled ntpd 2>/dev/null`" && NTP_SYSTEMD_NAME="ntpd" ; } \
|| { NTP_SYSTEMD_ENABLED="`/bin/systemctl is-enabled ntp 2>/dev/null`" && NTP_SYSTEMD_NAME="ntp" ; } \
||  if [ $? != 1 -o -z "$NTP_SYSTEMD_ENABLED" ]; then
        NTP_SYSTEMD_ENABLED="unknown"
    fi

revive_ntp() {
    if [ "$NTP_SYSTEMD_ENABLED" = "enabled" ] ; then
        /bin/systemctl enable "$NTP_SYSTEMD_NAME"
        /bin/systemctl start "$NTP_SYSTEMD_NAME"
    fi
}

if [ "$NTP_SYSTEMD_ENABLED" = "enabled" ] ; then
    # Pre-emptively stop ntpd so it does not pick up different
    # time sources as DHCP etc. goes up and down
    # Note we can not use "disable --runtime" because ntp is sysv init script
    # so we do our best to revive it if the script is interrupted... but still
    # things can happen during untimely reboot etc. :\
    trap 'revive_ntp' 0 1 2 3 15
    /bin/systemctl stop "$NTP_SYSTEMD_NAME"
    /bin/systemctl disable "$NTP_SYSTEMD_NAME"
fi

# restart all network interfaces except lo and kill dhcp client too
# Note that (our) "ifdown --force" causes "ifconfig ... down" or equivalent
# and then the "ethtool-static-nolink" called from "ifup" would refuse the
# static interfaces. With WAS_ADMIN_UP below we track if the interface was
# administratively-UP before we downed it, to restore this state before
# requesting to configure it.
for IFACE in `ls -1 /sys/class/net/`; do
    [ "${IFACE}" = "lo" ] && continue

    (
    WAS_ADMIN_UP="$(ip link show ${IFACE} | grep '<' | sed -e 's,^.*<,,' -e 's,>.*$,,' | tr ',' '\n' | fgrep -x UP)" ; \
    WAS_ADMIN_DOWN="$(ip link show ${IFACE} | grep '<' | sed -e 's,^.*<,,' -e 's,>.*$,,' | tr ',' '\n' | fgrep -x DOWN)" ; \
    ifdown --force $IFACE ;\
    if [ -s /run/udhcpc.${IFACE}.pid ]; then \
        kill -9 `cat /run/udhcpc.${IFACE}.pid`; \
        rm /run/udhcpc.${IFACE}.pid; \
    fi ;\
    sleep 5; \
    [ "$WAS_ADMIN_UP" = "UP" ] || [ -z "$WAS_ADMIN_DOWN" ] && { ip link set $IFACE up ; sleep 5 ; } ; \
    ifup --force $IFACE; \
    ) &
done

wait
/bin/systemctl restart networking.service
/bin/systemctl restart ifplugd.service
