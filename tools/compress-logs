#!/bin/bash

#
# Copyright (C) 2016 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#! \file verify-fs.sh
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \brief  Compress the previously rotated logs under LOGDIR
#

LANG=C
LC_ALL=C
TZ=UTC
export LANG LC_ALL TZ

# By default we compress all not-compressed logs with a single-char suffix
# LOGFILE_BASENAME (or rather CLI arg #1) allows to do it for just one log
# file family, e.g. "messages" or "/var/log/commands.log"
# TODO: Should defaults be settable via service envvars (/etc/default/bios*)?
LOGFILE_BASENAME="${1-}"
[ -z "$LOGFILE_BASENAME" ] && LOGFILE_BASENAME='/var/log/*'

LOGDIR="`dirname "$LOGFILE_BASENAME"`" || LOGDIR=""
[ -n "$LOGDIR" ] && [ x"$LOGDIR" != x"." ] && [ x"$LOGDIR" != x"./" ] || \
    LOGDIR="/var/log"
LOGDIR="`cd "$LOGDIR" && pwd`" || exit 1

LOGFILE_BASENAME="`basename "$LOGFILE_BASENAME"`"
[ -z "$LOGFILE_BASENAME" ] && LOGFILE_BASENAME='*'

# The script does potentially dangerous things at location that can be
# specified by the caller, so limit its impact
case "$LOGDIR" in
    /var/log|/var/log/*|/var/adm|/var/adm/*|/tmp|/tmp/*|/var/tmp|/var/tmp/*|/home/*) ;; # OK
    *)  echo "ERROR: The log compression should be targeted to a system log directory ('$LOGDIR' is not acceptable)" >&2
        exit 1
        ;;
esac

EXTWIP="__WRITING__"
EXTARCH="bz2"
CMDARCH="bzip2 -c -9"

set -o pipefail || true

cd "$LOGDIR" || exit $?
echo "`date`: $0 starting in `pwd`" >&2

COUNT_OK=0
COUNT_FAIL=0
COUNT_USED=0
COUNT_WIP_KEEP=0
COUNT_WIP_WIPE=0
COUNT_WIP_WIPE_FAIL=0

find . -type f -name "$LOGFILE_BASENAME.$EXTWIP" | while read F ; do
    [ -f "$F" ] && [ -s "$F" ] || continue

    echo "`date`: Checking if $F is abandoned: `ls -lad "$F"`" >&2
    # Linux Fuser returns 1 if the file is not opened by anyone,
    # and prints PIDs and returns 0 if the file is accessed ATM.
    # On other OSes and/or other implementation may return 0 if
    # the file/dir just exists, and the difference is if stdout
    # is empty (nobody accesses it) or not empty. This is portable.
    if [ -n "`fuser "$F" 2>/dev/null`" ]; then
        echo "`date`: Keeping $F" >&2
        COUNT_WIP_KEEP=$(($COUNT_WIP_KEEP+1))
    else
        echo "`date`: Wiping $F as not-accessed partial write" >&2
        rm -f "$F" \
            && COUNT_WIP_WIPE=$(($COUNT_WIP_WIPE+1)) \
            || COUNT_WIP_WIPE_FAIL=$(($COUNT_WIP_WIPE_FAIL+1))
    fi
done

# Assumption: no whitespace in filenames
for F in `find . -type f -name "$LOGFILE_BASENAME"'.?'`; do
    [ -f "$F" ] && [ -s "$F" ] || continue

    echo "`date`: Checking if $F is abandoned: `ls -lad "$F"`" >&2
    if [ -n "`fuser "$F" 2>/dev/null`" ]; then
        echo "`date`: Keeping $F for now" >&2
        COUNT_USED=$(($COUNT_USED+1))
        continue
    fi

    echo "`date`: Compressing $F ..." >&2
    rm -f "$F.$EXTARCH.$EXTWIP" || continue
        # skip this file if we can't remove its temporary for some reason
        # note that for 'rm -f' absence of the file should not be a problem
    RIGHTS_DEFAULT=yes
    # This is the GNU chmod/chown feature; others might not have it (for
    # portability can work around by e.g. parsing "ls -lan" output if needed)
    /bin/chmod --reference "$F" "$F.$EXTARCH.$EXTWIP" && \
    /bin/chown --reference "$F" "$F.$EXTARCH.$EXTWIP" && \
        RIGHTS_DEFAULT=no
    if [ "$RIGHTS_DEFAULT" = yes ]; then
        chmod 640 "$F.$EXTARCH.$EXTWIP"
        chown root:bios-logread "$F.$EXTARCH.$EXTWIP"
    fi

    time $CMDARCH < "$F" > "$F.$EXTARCH.$EXTWIP" && \
    mv -f "$F.$EXTARCH.$EXTWIP" "$F.$EXTARCH" && \
    rm -f "$F"
    RES=$?

    if [ "$RES" = 0 ]; then
        echo "`date`: [--OK--] : Compressed $F: `ls -lad "$F.$EXTARCH"`" >&2
        COUNT_OK=$(($COUNT_OK+1))
    else
        echo "`date`: [-FAIL-] ($RES): Not compressed $F: `ls -lad "$F"*`" >&2
        COUNT_FAIL=$(($COUNT_FAIL+1))
    fi
done

echo "Compressed $COUNT_OK files; failed to compress $COUNT_FAIL files; did not compress $COUNT_USED files due to being used" >&2
echo "Old abandoned writes: $COUNT_WIP_KEEP kept as accessed, $COUNT_WIP_WIPE removed and $COUNT_WIP_WIPE_FAIL failed to remove" >&2
echo "`date`: $0 Done"
# TOTHINK: Should we fail the service or not, if COUNT_FAIL>0?
