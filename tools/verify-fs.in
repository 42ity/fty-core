#!/bin/bash

# NOTE: Bash-specific syntax IS used in this codebase

#
# Copyright (C) 2015 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#! \file verify-fs.sh
#  \author Michal Vyskocil <MichalVyskocil@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \author Clement Perrette <ClementPerrette@Eaton.com>
#  \brief Verify the filesystem and report suspicious things
#

OVERLAY=@OVERLAY_PATH@
DEFAULT=/etc/default/verify-fs
IMAGES=@IMAGES_PATH@

JSONSH="@datadir@/@PACKAGE@/scripts/JSON.sh"
get_a_string_arg() { "$JSONSH" --get-string "$1" ; }

syslogger () {
    /usr/bin/logger -i -p security.err -t "verify-fs" "${@}"
}

logboth () {
    echo "${@}" >&2
    syslogger "${@}"
}

die () {
    logboth "$@"
    exit 1
}

is_tree_empty () {
    local dir excludes
    dir=${1}
    shift 1

    # build chain of -not -path foo -or -not -path bar from args
    while [[ -n ${1} ]]; do
        excludes=("${excludes[@]}" -path "$dir/$1" -prune -or)
        shift 1
    done

    [[ $(find "${dir}" -xdev "${excludes[@]}" -type f -print | wc -l) == 0 ]]
}

# By default, go to stderr (e.g. systemd unit journal)
interactive=true
log () {
    if $interactive; then
        echo "$@" >&2
    else
        syslogger "${@}"
    fi
}

cat_default () {
    if [[ ! -f "${DEFAULT}" ]]; then
        cat <<EOF
bin:
sbin:
lib:modules
lib64:
usr:local
EOF
        return
    fi
    /bin/grep -v '^#' "${DEFAULT}"
}

##### MAIN #####

if tty -s; then
    interactive=true
else
    interactive=false
fi
#echo "D: interactive=$interactive" >&2

# Failed or not - how many data points did we have available to actively check?
CHECKEDCOUNT=0
PROBLEMCOUNT=0
MISSINGCOUNT=0

## 1.) Verify the images
if [[ -d ${IMAGES} ]] ; then
 if pushd "${IMAGES}" >/dev/null ; then
  if [ "`ls -1d *.squashfs | wc -l`" -eq 0 ] ; then
   logboth "No squashfs images were found in ${IMAGES}"
  else
   for ROOTFS in *.squashfs; do

    if [ -s "${ROOTFS}.md5" ] ; then
        CHECKEDCOUNT=$(($CHECKEDCOUNT+1))
        if /usr/bin/md5sum -c "${ROOTFS}.md5" 2>/dev/null; then
            log "Good integrity of ${ROOTFS}, MD5 checksum is valid"
        else
            log "Bad integrity of ${ROOTFS}, MD5 checksum is not valid"
            PROBLEMCOUNT=$(($PROBLEMCOUNT+1))
        fi
    else
        log "Missing MD5 checksum file: '${ROOTFS}.md5'"
        MISSINGCOUNT=$(($MISSINGCOUNT+1))
    fi

    # TODO: Check the cksum file for length (and weak CRC)
    # TODO: Check the length of OS image file from manifest
    if [ -s "${ROOTFS}.sha256" ] ; then
        CHECKEDCOUNT=$(($CHECKEDCOUNT+1))
        if /usr/bin/sha256sum -c "${ROOTFS}.sha256" 2>/dev/null; then
            if [ -s "${ROOTFS}-manifest.json" ] ; then
                CHECKEDCOUNT=$(($CHECKEDCOUNT+1))
                SHA256_COMPUTED=$(cut -d ' ' -f1 < "${ROOTFS}.sha256")
                SHA256_MANIFEST=$(get_a_string_arg '^"application","ShaChecksum"$' < "${ROOTFS}-manifest.json")

                if [ "${SHA256_COMPUTED}" = "${SHA256_MANIFEST}" ]; then
                    if [ -s "${ROOTFS}-manifest.json.p7s" ] ; then
                        CHECKEDCOUNT=$(($CHECKEDCOUNT+1))
                        SIGNED_BY=$(get_a_string_arg '^"application","SignedBy"$' < "${ROOTFS}-manifest.json")

                        if openssl cms -verify -binary -inform der -CAfile "/usr/share/authorities/${SIGNED_BY}/rootCa1.pem" -purpose any -out /dev/null -content "${ROOTFS}-manifest.json" -in "${ROOTFS}-manifest.json.p7s"; then
                            log "Image signature is valid for ${ROOTFS}"
                        else
                            log "Image signature is invalid for ${ROOTFS}"
                            PROBLEMCOUNT=$(($PROBLEMCOUNT+1))
                        fi
                    else
                        log "Manifest signature not found for ${ROOTFS}"
                        MISSINGCOUNT=$(($MISSINGCOUNT+1))
                    fi
                else
                    log "Manifest sha256 hash does not match with the sha256 hash for ${ROOTFS}"
                    PROBLEMCOUNT=$(($PROBLEMCOUNT+1))
                fi
            else
                log "Manifest not found for ${ROOTFS}"
                MISSINGCOUNT=$(($MISSINGCOUNT+1))
            fi
        else
            log "Bad integrity of ${ROOTFS}, SHA256 checksum is not valid"
            PROBLEMCOUNT=$(($PROBLEMCOUNT+1))
        fi
    else
        log "Missing SHA256 checksum file: '${ROOTFS}.sha256'"
        MISSINGCOUNT=$(($MISSINGCOUNT+1))
    fi

   done # loop over all *.squashfs files in $IMAGES dir

  fi # if have *.squashfs files
  popd >/dev/null
 fi # if pushd
else
  logboth "Can't find images ${IMAGES}"
fi

PROBLEMCOUNT_RO_INTEGRITY=$PROBLEMCOUNT

## 2.) Verify the overlayfs
if [[ $(< /proc/mounts) =~ upperdir=${OVERLAY} ]] ; then
  while read LINE; do
    TREE=${LINE%%:*}
    EXCLUDES=${LINE#*:}

    [[ -d "${OVERLAY}/${TREE}" ]] || continue

    CHECKEDCOUNT=$(($CHECKEDCOUNT+1))
    is_tree_empty "${OVERLAY}/${TREE}" ${EXCLUDES//:/ } || \
        { log "Overlay subpath ${OVERLAY}/${TREE} contains suspicious files." ; PROBLEMCOUNT=$(($PROBLEMCOUNT+1)); }
  done < <(cat_default)
else
  logboth "Can't find overlay path ${OVERLAY}"
fi

if [ "$CHECKEDCOUNT" = 0 ] ; then
    die "FAILED: Completed verify-fs at `date -u` with no checks done at all, probably due to missing data sources or filesystem objects to inspect and compare"
fi

if [ "$PROBLEMCOUNT" = 0 ] ; then
    logboth "SUCCESS: Completed verify-fs at `date -u` with no problems to report ($CHECKEDCOUNT data points inspected overall while $MISSINGCOUNT inspected sources were missing)"
else
    die "FAILED: Completed verify-fs at `date -u` with $PROBLEMCOUNT problem(s) to report (of which $PROBLEMCOUNT_RO_INTEGRITY were issues with read-only archive integrity, and $CHECKEDCOUNT data points inspected overall while $MISSINGCOUNT inspected sources were missing)"
fi
