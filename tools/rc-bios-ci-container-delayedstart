#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          bios-containers
# Required-Start:    
# Required-Stop:
# Should-Start:      $network
# Should-Stop:       $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop the 42ity containers on CI hosts
# Description:       Starts 42ity containers on CI hosts during boot
### END INIT INFO
#

# Copyright (C) 2015 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    rc-bios-ci-container-delayedstart
#  \brief   Auto-start wrapper for 42ity containers delayed start up
#  \author  Jim Klimov <EvgenyKlimov@Eaton.com>
#  \details /etc/init.d/rc-bios-ci-container-delayedstart
#           Auto-start wrapper for 42ity containers to start up a bit
#           after the host OS is up, so they can pull new images (if any).
#           Intended for hosts involved in CI and test infrastructure.

[ -s /etc/default/bios-ci-container-delayedstart.conf ] && \
	. /etc/default/bios-ci-container-delayedstart.conf

[ -n "$CONTAINERS" ] || \
	CONTAINERS="`virsh -c lxc:// list --all | tail -n +3 | awk '{print $2}' | egrep '^latest$|^demo$|^test-debian-|^bios-|^fty-'`" || \
	CONTAINERS="latest"
[ -z "$STARTDELAY_DL" ] && STARTDELAY_DL="2 min"
[ -z "$STARTDELAY" ] && STARTDELAY="3 min"
[ -z "$DOWNLOAD_ROUTINE" ] && DOWNLOAD_ROUTINE=download_default

# The real script is part of 42ity CI suite
[ -z "$CI_RESET_VM" ] && CI_RESET_VM="/root/ci-reset-virtual-machine.sh"
[ ! -x "$CI_RESET_VM" ] && echo "ERROR: CI_RESET_VM script not found at '$CI_RESET_VM'" && exit 1

# Note this script can handle several other demo VM types too, automatically
[ -z "$CI_UPDATE_DEMO_VM" ] && CI_UPDATE_DEMO_VM="`dirname "$CI_RESET_VM"`/update_demo"
[ ! -x "$CI_UPDATE_DEMO_VM" -a -x /root/update_demo ] && CI_UPDATE_DEMO_VM="/root/update_demo"

# Run apt-get to set up packages which we need?
# Needs "ci-setup-test-machine.sh" in same dir as $CI_RESET_VM
[ -z "$INSTALL_DEV_PKGS" ] && \
[ -x "`dirname "$CI_RESET_VM"`/ci-setup-test-machine.sh" ] && \
    INSTALL_DEV_PKGS=yes

# Set via config/env to a token starting NOT with a slash to avoid logging.
# Note that by default logging is enabled with a line like the following;
# be sure to enable some sort of log rotation if you use that in persistent
# config!
#[ -n "$LOGFILE_BASENAME" ] || \
#    LOGFILE_BASENAME="/var/log/rc-bios-ci-container-delayedstart"
[ -n "$LOGFILE_BASENAME" ] || LOGFILE_BASENAME="no"

LANG=C
LC_ALL=C
export LANG LC_ALL

start_delayed() {
	echo "Queuing '$0 download' to refresh the images in $STARTDELAY_DL..." >&2
	case "${LOGFILE_BASENAME}" in
		/*) LOGCMD_DL=">> '${LOGFILE_BASENAME}.downloads' 2>&1";;
		*)  echo "Not logging the queued download/startup tasks outputs"
		    LOGCMD_DL="" ; LOGCMD_VM="" ;;
	esac
	echo "$0 download $LOGCMD_DL" | at -M "now + $STARTDELAY_DL"
	for C in $CONTAINERS ; do
		echo "Queuing '$C' container to autoboot and update in $STARTDELAY..." >&2
		case "${LOGFILE_BASENAME}" in
			/*) LOGCMD_VM=">> '${LOGFILE_BASENAME}.$C.log' 2>&1" ;;
			*)  echo "Not logging the queued download/startup tasks outputs"
			    LOGCMD_VM="" ;;
		esac
		case "$C" in
		    demo)
			[ -x ${CI_UPDATE_DEMO_VM} ] && \
			    echo "${CI_UPDATE_DEMO_VM} $LOGCMD_VM"  | at -M "now + $STARTDELAY" || \
			    echo "INSTALL_DEV_PKGS=no $CI_RESET_VM -m '$C' -b deploy $LOGCMD_VM" | at -M "now + $STARTDELAY"
			;;
		    test-debian-[6789]) # VTEs need only the default image
			echo "INSTALL_DEV_PKGS=no $CI_RESET_VM -m '$C' -b deploy $LOGCMD_VM" | at -M "now + $STARTDELAY" ;;
		    test-debian-[012345]|latest) # In devel-images we do updates
			echo "$CI_RESET_VM -m '$C' -b devel --install-dev $LOGCMD_VM" | at -M "now + $STARTDELAY" ;;
		    *) # By default we do no definite IMGTYPE (use default or VM config)
			echo "$CI_RESET_VM -m '$C' $LOGCMD_VM" | at -M "now + $STARTDELAY" ;;
		esac
	done
}

start_instant() {
	download
	for C in $CONTAINERS ; do
		echo "(Re-)starting and updating '$C' container..." >&2
		case "$C" in
		    demo)
			( if [ -x ${CI_UPDATE_DEMO_VM} ]; then
			    ${CI_UPDATE_DEMO_VM} ; else
			    INSTALL_DEV_PKGS=no $CI_RESET_VM -m "$C" -b deploy --attempt-download no; fi ) &
			;;
		    test-debian-[6789]) # VTEs need only the default image
			INSTALL_DEV_PKGS=no $CI_RESET_VM -m "$C" -b deploy --attempt-download no & ;;
		    test-debian-[012345]|latest) # In devel-images we do updates
			$CI_RESET_VM -m "$C" -b devel --install-dev --attempt-download no & ;;
		    *) # By default we do no definite IMGTYPE (use default or VM config)
			$CI_RESET_VM -m "$C" --attempt-download no & ;;
		esac
	done
	wait
}

restart_virtnet() {
	[ x"${RESTART_VIRTNET-}" = xno ] && return 0
	echo "Restarting virtnet-related services..." >&2
	/bin/systemctl restart networking libvirtd
}

start() {
	if /etc/init.d/atd status || /etc/init.d/atd restart || /bin/systemctl status atd || /bin/systemctl restart atd ; then
		start_delayed
	else
		start_instant
	fi
	restart_virtnet
}

restart() {
	start_instant
	restart_virtnet
}

reboot() {
	restart_virtnet
	for C in $CONTAINERS ; do
		echo "Rebooting the '$C' container with whatever it has..." >&2
		( virsh -c lxc:// reboot "$C" ) &
	done
	wait; sync; wait
}

reset() {
	restart_virtnet
	for C in $CONTAINERS ; do
		echo "Destroying and starting the '$C' container with whatever it has..." >&2
		( virsh -c lxc:// destroy "$C" ; sleep 5 ; virsh -c lxc:// start "$C" ) &
	done
	wait; sync; wait
}

stop() {
	for C in $CONTAINERS ; do
		( $CI_RESET_VM -m "$C" --stop-only --attempt-download no || \
		  virsh -c lxc:// destroy "$C" 2> /dev/null > /dev/null ) &
	done >/dev/null 2>&1
}

download_default() {
	for T in devel deploy ; do
		# Note: legacy "--no-overlayfs" referred to tarballs
		# Since Feb 2018 this also means squashfs archives
#		$CI_RESET_VM --download-only -m '' -b "$T" --with-overlayfs || true
		$CI_RESET_VM --download-only -m '' -b "$T" --no-overlayfs
	done
}

download_tailored() {
	# Use VM config, if any
	for C in $CONTAINERS ; do
		$CI_RESET_VM --download-only -m "$C"
	done
}

download() {
	if [ "$DOWNLOAD_ROUTINE" = download_tailored ] ; then
		download_tailored
		return $?
	fi
	download_default
}

refresh() {
	# TODO: This is not helpful if one of the image types did not change
	# but others did
	download 2>&1 | \
	grep 'The file is already fully retrieved; nothing to do' || \
	restart
}

status() {
	LIST="`virsh -c lxc:// list --all | tail -n +3`"
	RES=$?
	echo "$LIST"

	[ "$RES" = 0 ] && \
	for C in $CONTAINERS ; do
		echo "$LIST" | ( \
		RES=-1	# Container not defined
		while read _ID _NAME _STATE ; do
			if [ "$_NAME" = "$C" ]; then
				RES=0
				[ "$_ID" = "-" -o "$_STATE" != running ] && RES=2 # Container not up
			fi
			[ $RES -ge 0 ] && exit $RES
		done; exit 127 ) || RES=$?
		[ $RES != 0 ] && return $RES	# At least one VM is not found, or found and not up
	done

	return $RES
}

case "$1" in
help|-h)
	echo "$0 {start|start_delayed|start_instant|restart|reboot|reset|stop|refresh|download|download_default|download_tailored|restart_virtnet|status}"
	exit 0
	;;
start|start_delayed|start_instant|restart|reboot|reset|stop|refresh|download|download_default|download_tailored|restart_virtnet|status)
	"$@"
	exit $?
	;;
esac
