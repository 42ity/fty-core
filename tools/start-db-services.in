#!/bin/bash
#
# Copyright (C) 2017 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file   start-db-services(.in)
#  \brief  Start and enable all services dependent on bios-db-init/fty-db-init
#          services; this helper is called from REST API for license acceptance
#  \author Michal Vyskocil <MichalVyskocil@eaton.com>
#  \author Jim Klimov <EvgenyKlimov@eaton.com>

# Save original file descriptors and set up logging
exec 3>&1 4>&2 >/tmp/start-db-services.log 2>&1
set -x

onExit() {
    EXITCODE=$?
    # Restore original file descriptors and post the stderr log
    exec 1>&3 2>&4 3>&- 4>&-
    cat /tmp/start-db-services.log >&2 || true
    echo "`date -u` : $0 finished with exit-code $EXITCODE" >&2
    return $EXITCODE
}

trap 'onExit' 0 1 2 3 15

### Prefer to use our wrapper that limits impact to permitted targets
SYSTEMCTL=@libexecdir@/@PACKAGE@/systemctl
#SYSTEMCTL=/usr/libexec/fty/systemctl
#SYSTEMCTL=/usr/libexec/bios/systemctl
#SYSTEMCTL=/bin/systemctl

### Note: starting the systemctl wrapper on ARM has noticeable overhead, so we
### clump several targets to act upon, rather than do a "clean" one-by-one run.
### This value can be set by envvar files pulled by the service, e.g. the clean
### mode is useful to debug problems, and has negligible overhead on X86.
### Final default for unknown systems is to not coalease (so to run one by one).
### Note that separately we process the SYSTEMCTL_COALESCE_INITIAL for the root
### dependency services that sometimes lock up while running systemctl (on ARM
### at least), maybe due to systemd changing state of those services at the
### same time?..
GUESSED_SYSTEMCTL_COALESCE=no
case "${SYSTEMCTL_COALESCE-}" in
    [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]) SYSTEMCTL_COALESCE=yes ;;
    [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]) SYSTEMCTL_COALESCE=no ;;
    *)  if [[ -n "${SYSTEMCTL_COALESCE-}" ]] ; then
            echo "WARNING: Unknown value of SYSTEMCTL_COALESCE='$SYSTEMCTL_COALESCE', will guess one" >&2
        fi
        case "`uname -m | tr '[A-Z]' '[a-z]'`" in
            *arm*)  SYSTEMCTL_COALESCE=yes ;;
            *86*|amd64) SYSTEMCTL_COALESCE=no ;;
            *)      SYSTEMCTL_COALESCE=no ;;
        esac
        GUESSED_SYSTEMCTL_COALESCE=yes
        ;;
esac

case "${SYSTEMCTL_COALESCE_INITIAL-}" in
    [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]) SYSTEMCTL_COALESCE_INITIAL=yes ;;
    [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]) SYSTEMCTL_COALESCE_INITIAL=no ;;
    *) # Default to SYSTEMCTL_COALESCE value if caller provided it
        if [ "$GUESSED_SYSTEMCTL_COALESCE" = no ] && [ -n "$SYSTEMCTL_COALESCE" ] ; then
            SYSTEMCTL_COALESCE_INITIAL="${SYSTEMCTL_COALESCE}"
        else
            SYSTEMCTL_COALESCE_INITIAL=no
        fi
        ;;
esac
unset GUESSED_SYSTEMCTL_COALESCE

die () {
    echo "ERROR: `date -u`: ${@}" >&2
    exit 1
}

if [[ -f /etc/default/bios-db-rw ]]; then
    echo "SKIPPED: /etc/default/bios-db-rw exists" >&2
    exit 0
fi

[[ -s @ftydatadir@/fty-eula/license ]] || [[ -s @ftydatadir@/license ]] || echo "WARNING: the @ftydatadir@/license file is missing or empty" >&2

# Just in case the service is disabled by preinstall or other means,
# make it be active (as long as the license acceptance criteria are met).
# Otherwise it should have come up as soon as the file(s) appeared, etc.

if [[ "$SYSTEMCTL_COALESCE_INITIAL" = no ]] ; then
    echo "INFO: `date -u`: enable and start fty-license-accepted.path"
    sudo ${SYSTEMCTL} unmask fty-license-accepted.path || die "Unmasking fty-license-accepted.path failed ($?)"
    sudo ${SYSTEMCTL} enable fty-license-accepted.path || die "Enabling fty-license-accepted.path failed ($?)"
    ### UPDATE: Do not REstart these, to avoid racing on slower systems
    ### where the normal dependency codepath to start up the units has
    ### progressed far enough, and only too much later this fallback
    ### script catches up to "help" and kills the DB mid-initialization.
    #sudo ${SYSTEMCTL} restart fty-license-accepted.path || die "Restarting fty-license-accepted.path failed ($?)"
    sudo ${SYSTEMCTL} start fty-license-accepted.path || die "Starting fty-license-accepted.path failed ($?)"

    echo "INFO: `date -u`: enable and start fty-license-accepted.service"
    sudo ${SYSTEMCTL} unmask fty-license-accepted.service || die "Unmasking fty-license-accepted failed ($?)"
    sudo ${SYSTEMCTL} enable fty-license-accepted.service || die "Enabling fty-license-accepted failed ($?)"
    #sudo ${SYSTEMCTL} restart fty-license-accepted.service || die "Restarting fty-license-accepted failed ($?)"
    sudo ${SYSTEMCTL} start fty-license-accepted.service || die "Starting fty-license-accepted failed ($?)"

    sudo ${SYSTEMCTL} unmask fty-license-accepted.target || die "Unmasking fty-license-accepted.target failed ($?)"
    sudo ${SYSTEMCTL} enable fty-license-accepted.target || die "Enabling fty-license-accepted.target failed ($?)"
    #sudo ${SYSTEMCTL} restart fty-license-accepted.target || die "Restarting fty-license-accepted.target failed ($?)"
    sudo ${SYSTEMCTL} start fty-license-accepted.target || die "Starting fty-license-accepted.target failed ($?)"

    # Technically this all should not be needed, as the standard processing
    # of the now-active fty-license-accepted should trigger startup of the
    # database engine, then our schema, then the services which need it all.
    # But just in case, make sure they all are up before we return...
    echo "INFO: `date -u`: enable and start fty-db-engine"
    sudo ${SYSTEMCTL} unmask fty-db-engine || die "Unmasking fty-db-engine failed ($?)"
    sudo ${SYSTEMCTL} enable fty-db-engine || die "Enabling fty-db-engine failed ($?)"
    # Try twice, to avoid the possibility that an attempt to start the
    # fty-db-engine.service did begin before, due to external circumstances,
    # and this call to systemctl would return failure of that run (e.g. the
    # license file missing at the point that copy of startup was evaluated).
    # Note that by current product layout, only fty-db-engine is expected to
    # fall into this trap.
    sudo ${SYSTEMCTL} start fty-db-engine \
        || (sleep 1; sudo ${SYSTEMCTL} start fty-db-engine) \
        || die "Starting fty-db-engine failed ($?)"

    echo "INFO: `date -u`: enable and start fty-db-init"
    sudo ${SYSTEMCTL} enable fty-db-init || die "Enabling fty-db-init failed ($?)"
    sudo ${SYSTEMCTL} start fty-db-init || die "Starting fty-db-init failed ($?)"

    echo "INFO: `date -u`: enable and start fty-db.target"
    sudo ${SYSTEMCTL} enable fty-db.target || die "Enabling fty-db.target failed ($?)"
    sudo ${SYSTEMCTL} start fty-db.target || die "Starting fty-db.target failed ($?)"
else
    echo "INFO: `date -u`: unmask core database-related services"
    sudo ${SYSTEMCTL} unmask fty-license-accepted.target fty-license-accepted.path fty-license-accepted.service fty-db-engine.service fty-db-init.service fty-db.target \
        || die "Unmasking a core database-related service failed ($?)"

    echo "INFO: `date -u`: enable core database-related services"
    sudo ${SYSTEMCTL} enable fty-license-accepted.target fty-license-accepted.path fty-license-accepted.service fty-db-engine.service fty-db-init.service fty-db.target \
        || die "Enabling a core database-related service failed ($?)"

    #echo "INFO: `date -u`: tickle fty-license-accepted related units"
    #sudo ${SYSTEMCTL} restart fty-license-accepted.path || die "Restarting fty-license-accepted.path failed ($?)"
    #sudo ${SYSTEMCTL} restart fty-license-accepted.service || die "Restarting fty-license-accepted failed ($?)"
    #sudo ${SYSTEMCTL} restart fty-license-accepted.target || die "Restarting fty-license-accepted.target failed ($?)"
    #sleep 3

    sleep 1

    # See comment above about trying to start twice
    echo "INFO: `date -u`: start core database-related services"
    sudo ${SYSTEMCTL} start fty-license-accepted.path fty-license-accepted.service fty-db-engine.service fty-db-init.service fty-license-accepted.target fty-db.target \
        || (sleep 1; sudo ${SYSTEMCTL} start fty-license-accepted.path fty-license-accepted.service fty-db-engine.service fty-db-init.service fty-license-accepted.target fty-db.target) \
        || die "Starting a core database-related service failed ($?)"
fi

sleep 2

[[ -s /etc/default/bios-db-rw ]] || die "/etc/default/bios-db-rw is missing or empty"

# Note: This loop enables and starts all services for which we have a unit file
# and that match our query (consumers of database or their further consumers).
# This is slightly different from the "bios.service" starting all services that
# are part of "bios.target" (some DB consumer units may be not defined as part
# of this target) and which are currently considered by "systemd show" state.
# So we do both, to be certain. Belt and suspenders, man. Never trust just one.

list_svc_consumers() {
    # $1 : regex of service name which the inspected service should require
#    echo "DEBUG: list_svc_consumers($1)..." >&2
    for DIR in /lib/systemd/system /usr/lib/systemd/system /run/systemd/system /etc/systemd/system/; do
        if [[ ! -d "${DIR}" ]]; then
            continue
        fi

        egrep '(Requires|Wants|BindsTo|Requisite).*'"$1" "${DIR}"/*.service "${DIR}"/*.timer 2>/dev/null \
        | cut -d ':' -f 1 \
        | xargs -L1 basename 2>/dev/null
    done
}

declare -a ARR_GRAND_CONSUMERS=( )
find_svc_consumers_recursive() {
    # List services which require regex '$1' and then those which would
    # require these discovered services, until there are no unique hits.
    local SERVICE ix
#    echo "DEBUG: find_svc_consumers_recursive( '$1' )..." >&2
    for SERVICE in `list_svc_consumers "$1"` ; do
        SEEK_SERVICE="${SERVICE}"
        case "${SERVICE}" in
            "") continue ;;
            *.timer|*.service|*.path|*.target) ;;
            *.*) ;;
            *) SEEK_SERVICE="(${SERVICE}|${SERVICE}.(service|timer|path|target))" ;;
        esac
        for ix in ${!ARR_GRAND_CONSUMERS[*]} ; do
            if [[ x"${ARR_GRAND_CONSUMERS[$ix]}" = x"${SERVICE}" ]] ; then
                # This service is already detected, go process next one
#                echo "DEBUG: find_svc_consumers_recursive( '$1' ): SKIPPED ${SERVICE}..." >&2
                continue 2
            fi
        done
#        echo "DEBUG: find_svc_consumers_recursive( '$1' ): ADDED ${SERVICE}..." >&2
        ARR_GRAND_CONSUMERS+=( "${SERVICE}" )
        find_svc_consumers_recursive "${SEEK_SERVICE}"
    done
}

list_db_consumers() {
    ARR_GRAND_CONSUMERS=( )
    find_svc_consumers_recursive '((fty|bios)-db-init.service|fty-db.target)' || return
    if [[ 0 == "${#ARR_GRAND_CONSUMERS[@]}" ]] ; then
        return 22
    fi
    echo "${ARR_GRAND_CONSUMERS[@]}"
}

echo "INFO: `date -u`: Finding database services and their consumers to ensure their startup..."

DB_CONSUMERS="`list_db_consumers`" || DB_CONSUMERS=""
if [[ -z "$DB_CONSUMERS" ]] ; then
    echo "WARNING: No services were found to be direct or further consumers of ((fty|bios)-db-init.service|fty-db.target)" >&2
else
    echo "INFO: The following DB_CONSUMERS services were found to be direct or further consumers of ((fty|bios)-db-init.service|fty-db.target): $DB_CONSUMERS" >&2
    if [[ "$SYSTEMCTL_COALESCE" = no ]] ; then
        for SERVICE in $DB_CONSUMERS ; do
            echo "INFO: `date -u`: enable and start ${SERVICE}"
            sudo ${SYSTEMCTL} enable "${SERVICE}" || echo "WARNING: Could not enable '${SERVICE}', is it a component of IPM Infra?"
            sudo ${SYSTEMCTL} start "${SERVICE}" || echo "WARNING: Could not start '${SERVICE}', is it a component of IPM Infra?"
        done
    else
        echo "INFO: `date -u`: enable DB_CONSUMERS"
        sudo ${SYSTEMCTL} enable $DB_CONSUMERS || echo "WARNING: Could not enable one of DB_CONSUMERS, is it a component of IPM Infra?"

        echo "INFO: `date -u`: start DB_CONSUMERS"
        sudo ${SYSTEMCTL} start $DB_CONSUMERS || echo "WARNING: Could not enable one of DB_CONSUMERS, is it a component of IPM Infra?"
    fi
fi
echo "INFO: `date -u`: Done starting database services and their consumers: OK"

echo "INFO: `date -u`: enable and start bios.service and bios.target for the remaining IPM Infra services"
if [[ "$SYSTEMCTL_COALESCE" = no ]] ; then
    sudo ${SYSTEMCTL} enable bios.service
    sudo ${SYSTEMCTL} enable bios.target
    sudo ${SYSTEMCTL} start bios.service --no-block || die "Could not issue startup request for bios.service ($?)"
    sudo ${SYSTEMCTL} start bios.target --no-block || die "Could not issue startup request for bios.target ($?)"
else
    sudo ${SYSTEMCTL} enable bios.service bios.target
    sudo ${SYSTEMCTL} start bios.service bios.target --no-block || die "Could not issue startup request for bios.target or bios.service ($?)"
fi

# NOTE: we have tntnet@bios.service officially aliased by fty-tntnet@bios.service
# They happen to conflict if both are "enabled", so we "sed" away to collapse 'em
# Note that at this point units that are prerequisites of fty-db.target and
# fty-license-accepted.target and bios-pre-eula.target are supposed to be running.

BIOS_DEPS="`/bin/systemctl show -p Wants -p ConsistsOf bios.target | cut -d= -f2 | tr ' ' '\n' | sed -e 's,^fty-tntnet,tntnet,' | sort | uniq`" || BIOS_DEPS=""
if [[ -n "$BIOS_DEPS" ]] ; then
    echo "INFO: `date -u`: Request to start BIOS_DEPS units WantedBy and/or PartOf bios.target, if any were missed by previous attempts: $BIOS_DEPS"
    if [[ "$SYSTEMCTL_COALESCE" = no ]] ; then
        for SERVICE in $BIOS_DEPS ; do
            echo "INFO: `date -u`: enable and start ${SERVICE}"
            ( sudo ${SYSTEMCTL} enable "${SERVICE}" ) || echo "WARNING: Could not enable '${SERVICE}', is it a component of IPM Infra?"
            ( sudo ${SYSTEMCTL} start "${SERVICE}"  ) || echo "WARNING: Could not start '${SERVICE}', is it a component of IPM Infra?"
        done
    else
        echo "INFO: `date -u`: enable BIOS_DEPS"
        sudo ${SYSTEMCTL} enable $BIOS_DEPS || echo "WARNING: Could not enable one of BIOS_DEPS, is it a component of IPM Infra?"

        echo "INFO: `date -u`: start BIOS_DEPS"
        sudo ${SYSTEMCTL} start $BIOS_DEPS || echo "WARNING: Could not start one of BIOS_DEPS, is it a component of IPM Infra?"
    fi
fi

echo "INFO: `date -u`: Done starting IPM Infra services: OK"
exit 0
