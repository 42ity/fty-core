#!/bin/bash
# NOTE: Bash-specific syntax is used in "case"s below
#
#   Copyright (c) 2016 - 2020 Eaton
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# \file loghost-rsyslog
# \brief   Manage the "loghost" entry in /etc/hosts and toggle remote logging
#          in our rsyslog presets, and provide integration for netconsole
# \author  Jim Klimov <EvgenyKlimov@Eaton.com>

HOSTSFILE="/etc/hosts"
# This is for entries set by user explicitly - highest priority for things
# this script would manage (not-fenced manual settings are even higher).
HOSTSFENCE_MANUAL='### Entry managed by loghost-rsyslog.sh ###'
# This is for entries set by dynamic netconsole setup (e.g. via timer unit)
HOSTSFENCE_NETCONSOLE='### Entry managed by loghost-rsyslog.sh for dynamic netconsole setup ###'

RSYSLOG_TOGGLE_FILE_ACTIVE="/etc/rsyslog.d-early/10-ipc-remote-loghost.conf"
RSYSLOG_TOGGLE_FILE_BACKUP="$RSYSLOG_TOGGLE_FILE_ACTIVE.laststate"

RSYSLOG_TARGET_FILE_ACTIVE="/etc/rsyslog.d-early/10-ipc-remote-loghost-tgt.conf"
RSYSLOG_TARGET_FILE_BACKUP="$RSYSLOG_TARGET_FILE_ACTIVE.laststate"

# Common config file snippets
RSYSLOG_CONFIG_DIR="/etc/rsyslog.d"

# The hostname hardcoded in our rsyslog pre-configuration as the remote sink
RSYSLOG_LOGHOST="loghost"

CONFIGFS_ROOT="/sys/kernel/config"
CONFIGFS_NETCONSOLE="$CONFIGFS_ROOT/netconsole"

LOCKFILE="/tmp/.`basename $0`.lock"
RESTART_RSYSLOGD="auto"

usage() {
    cat <<EOF
This script manages remote logging to "$RSYSLOG_LOGHOST" by maintaining an entry
in $HOSTSFILE and toggling the preset block in rsyslog configuration.
Note that these are independent, e.g. an organization may have a "$RSYSLOG_LOGHOST"
defined in the default local DNS domain.
Also note that this configuration assumes that the name-service switching
prefers local $HOSTSFILE over remote naming databases like DNS, NIS, LDAP, etc.

Usages:
    $0 {-q|--query} [ loghost | toggle | netconsole ]

    $0 --set-loghost IP-ADDRESS
    $0 --del-loghost
    $0 --toggle-rsyslog { LAST_STATE | DEFAULT = ON | off | ipc-audit | ipc-audit+snoopy | all | none }
Note: You may specify both a loghost and a toggle-rsyslog command on the same
line, e.g. "loghost-rsyslog --del-loghost --toggle-rsyslog none" to disable the
sending of logs off-host in one blow (and block --netconsole intergation timer
from reviving it).

    $0 --netconsole

    -q|--query          Report current status of the configuration data.
                        Optionally query just one/some of these items.
    --set-loghost IP-ADDRESS   Set IP address as the "loghost" in $HOSTSFILE
                        (if the entry is absent or is managed by us)
    --del-loghost       Remove the value (if managed by us)
    --{SET,DEL}-loghost Do the above even if local value was managed not by us
    --udp | --tcp       Specify protocol (default UDP)
    --port NUMBER       Specify port number (default 514)
    --toggle-rsyslog VAL       Sets the configuration variable for rsyslog
                        to one of the supported values, or to the last state
                        used (if a backup or old config file is found), and
                        restarts the rsyslog service to enable the change.
                        The "off" state renames the present config (if any)
                        to the backup file, to disable the pre-integrated
                        remote logging. "none" is a flag value that is set
                        into the active config, e.g. to forbid --netconsole
                        from re-enabling the logging when you don't want it.
                        The default is LAST_STATE if present, or 'ipc-audit'.
    --netconsole        Follows the dynamic (configfs) setup of netconsole.
                        If there is an enabled entry ("default" is preferred)
                        then use the first one found as the current "loghost"
                        and toggle rsyslog (as with DEFAULT).
                        If no entries are found, toggle rsyslog flag to "off"
                        and try to do the --del-loghost activities.
                        Both activities with netconsole have lower precedence
                        than actions done explicitly by using the flags above.
EOF
}

isIPv4() {
    # Lazily check if "$1" is an IPv4 address, including legal zero fields
    # or leading zeroes; no numeric check that components are <= 255.
    echo "$1" | egrep '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' > /dev/null
}

isIPv6() {
    # Lazily check if "$1" is an IPv6 address
    echo "$1" | egrep '^[0-9a-fA-F\:]+$' > /dev/null
}

isIPaddr() {
    if isIPv4 "$1" || isIPv6 "$1" ; then
        return 0
    fi
    echo "ERROR: '$1' is not an IPv4 nor IPv6 address" >&2
    return 1
}

query_loghost_name() {
    # Prints the loghost IP address and returns the status of "loghost"
    # resolution:
    # 22        Hostname currently not found anywhere
    # 53        Local value not present but resolution succeeded (DNS?)
    # 0         Managed by this script (value present and fenced in /etc/hosts) as a manual setting
    # 2         Managed by this script (value present and fenced in /etc/hosts) as a dynamic netconsole setting
    # 1         Local value present, but not managed by this script (no fence)
    getent hosts "$RSYSLOG_LOGHOST" 2>/dev/null || return 22
    G="`egrep -A1 -B1 '^[[:blank:]]*[0-9a-fA-F:].*[[:blank:]]'"$RSYSLOG_LOGHOST"'([[:blank:]]|$)' "$HOSTSFILE"`" || return 53
    [ "`echo "$G" | fgrep -c "$HOSTSFENCE_MANUAL"`" -eq 2 ] && return 0
    [ "`echo "$G" | fgrep -c "$HOSTSFENCE_NETCONSOLE"`" -eq 2 ] && return 2
    return 1
}

query_rsyslog_toggle() {
    # Prints the content of active or backup configuration file and
    # returnes exitcode values:
    # 0         Active config file was present and printed
    # 1         Backup config file was present and printed
    # 22        Neither file was found or other errors happened
    [ -s "$RSYSLOG_TOGGLE_FILE_ACTIVE" ] && cat "$RSYSLOG_TOGGLE_FILE_ACTIVE" && return 0
    [ -s "$RSYSLOG_TOGGLE_FILE_BACKUP" ] && cat "$RSYSLOG_TOGGLE_FILE_BACKUP" && return 1
    return 22
}

query_rsyslog_target() {
    # Prints the content of active or backup configuration file and
    # returnes exitcode values:
    # 0         Active config file was present and printed
    # 1         Backup config file was present and printed
    # 22        Neither file was found or other errors happened
    [ -s "$RSYSLOG_TARGET_FILE_ACTIVE" ] && cat "$RSYSLOG_TARGET_FILE_ACTIVE" && return 0
    [ -s "$RSYSLOG_TARGET_FILE_BACKUP" ] && cat "$RSYSLOG_TARGET_FILE_BACKUP" && return 1
    return 22
}

get_active_rsyslog_toggle() {
    egrep '^set \$.use_remote_logsink = ' "$RSYSLOG_TOGGLE_FILE_ACTIVE" | sed 's,^set \$.use_remote_logsink *= *\"\(.*\)\" *;$,\1,'
}

get_active_rsyslog_target() {
    egrep '^set \$.tgt_remote_logsink = ' "$RSYSLOG_TARGET_FILE_ACTIVE" | sed 's,^set \$.tgt_remote_logsink *= *\"\(.*\)\" *;$,\1,'
}

remove_loghost_name() {
    # This removes an entry with "loghost" (and our fencing) from
    # the /etc/hosts file.
    # NOTE: Any matching entry, fenced or not. Use query() to make
    # sure you call this routine only when you deem fit.
    [ -n "$1" ] && isIPaddr "$1" \
        && PAT_IPADDR="$1" && echo "INFO: Removing only loghost entries for IP $PAT_IPADDR" >&2 \
        || PAT_IPADDR='[0-9a-fA-F:]'
    G="`cat "$HOSTSFILE" | egrep -v '^[[:blank:]]*'"$PAT_IPADDR"'.*[[:blank:]]'"$RSYSLOG_LOGHOST"'([[:blank:]]|$)' | fgrep -v "$HOSTSFENCE_MANUAL" | fgrep -v "$HOSTSFENCE_NETCONSOLE"`"
    [ -n "$G" ] && echo "$G" | grep -w localhost > /dev/null || return 1
    echo "$G" > "$HOSTSFILE"
}

process_action_hosts() {
    # Caller should set HOSTSFENCE to either $HOSTSFENCE_MANUAL
    # or $HOSTSFENCE_NETCONSOLE according to situation.
    case "$ACTION_HOSTS" in
        _SKIP_)
            if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi
            return 0 ;;
        tryset|forceset)
            query_loghost_name >/dev/null
            RES=$?
            case "$RES" in
                1)  if [ "$ACTION_HOSTS" = tryset ]; then
                        echo "WARN: Will not change $RSYSLOG_LOGHOST in $HOSTSFILE because it is not managed by us" >&2
                        if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi
                        return 1
                    else
                        echo "WARN: Forced to change $RSYSLOG_LOGHOST in $HOSTSFILE which was not managed by us" >&2
                    fi
                    ;& # BASH: Fall through to next block
                0|2) # We manage this name locally:
                     # 0: as end-user's manual setting
                     # 2: as dynamic netconsole setting
                    [ "$RES" != 1 ] && [ -n "$VALUE_HOSTS" ] && \
                        egrep '^[[:blank:]]*'"$VALUE_HOSTS"'[[:blank:]]+(.*[[:blank:]]+|)'"$RSYSLOG_LOGHOST"'([[:blank:]]+.*|[[:blank:]]*)$' "$HOSTSFILE" >/dev/null && \
                        echo "INFO: $RSYSLOG_LOGHOST in $HOSTSFILE is already up-to-date and managed by this script, got nothing to do" >&2 && \
                        { if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi; true; } && \
                        return 0
                    [ "$RES" = 0 ] && [ "$HOSTSFENCE" = "$HOSTSFENCE_NETCONSOLE" ] && \
                        [ "$ACTION_HOSTS" = tryset ] && \
                        echo "WARN: $RSYSLOG_LOGHOST in $HOSTSFILE is set by user, not overriding with netconsole" >&2 && \
                        return 1
                    [ "$RES" = 2 ] && [ "$HOSTSFENCE" = "$HOSTSFENCE_MANUAL" ] && \
                        [ "$ACTION_HOSTS" = tryset ] && \
                        echo "WARN: $RSYSLOG_LOGHOST in $HOSTSFILE was set by netconsole; overriding with manual setting" >&2
                    remove_loghost_name
                    ;& # BASH: Fall through to next block
                22|53) # This name is absent locally - can add freely
                    RESTART_RSYSLOGD=yes_if_active
                    ( echo "$HOSTSFENCE"; echo "$VALUE_HOSTS	$RSYSLOG_LOGHOST"; echo "$HOSTSFENCE" ) >> "$HOSTSFILE"
                    return $?
                    ;;
                *)  echo "ERROR: Unknown result for hostname resolution" >&2
                    return 22
                    ;;
            esac
            ;;
        trydel|forcedel)
            query_loghost_name >/dev/null
            RES=$?
            case "$RES" in
                22|53)
                    if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi
                    return 0 ;; # This name is absent locally - nothing to do
                1)  if [ "$ACTION_HOSTS" = trydel ]; then
                        echo "WARN: Will not change $RSYSLOG_LOGHOST in $HOSTSFILE because it is not managed by us" >&2
                        if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi
                        return 1
                    else
                        echo "WARN: Forced to change $RSYSLOG_LOGHOST in $HOSTSFILE which was not managed by us" >&2
                    fi
                    ;&
                0|2) # We manage this name locally:
                     # 0: as end-user's manual setting
                     # 2: as dynamic netconsole setting
                    [ "$RES" != 1 ] && [ -n "$VALUE_HOSTS" ] && \
                        if egrep '^[[:blank:]]*'"$VALUE_HOSTS"'[[:blank:]]+(.*[[:blank:]]+|)'"$RSYSLOG_LOGHOST"'([[:blank:]]+.*|[[:blank:]]*)$' "$HOSTSFILE" >/dev/null \
                        ; then : ; else \
                            echo "INFO: $RSYSLOG_LOGHOST in $HOSTSFILE has no mappings to IP address $VALUE_HOSTS, got nothing to do" >&2 && \
                            { if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi; true; } && \
                            return 0
                        fi
                    [ "$RES" = 0 ] && [ "$HOSTSFENCE" = "$HOSTSFENCE_NETCONSOLE" ] && \
                        [ "$ACTION_HOSTS" = trydel ] && \
                        echo "WARN: $RSYSLOG_LOGHOST in $HOSTSFILE is set by user, not overriding with netconsole" >&2 && \
                        return 1
                    RESTART_RSYSLOGD=yes_if_active
                    remove_loghost_name "$VALUE_HOSTS"
                    return $?
                    ;;
                *)  echo "ERROR: Unknown result for hostname resolution" >&2
                    return 22
                    ;;
            esac
            ;;
    esac
    return 255
}

process_action_toggle() {
    [ -n "$RESTART_RSYSLOGD" ] || RESTART_RSYSLOGD=no
    [ "$RESTART_RSYSLOGD" != auto ] || RESTART_RSYSLOGD=no
    case "$ACTION_TOGGLE" in
        _SKIP_)
            if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi
            return 0;;
        enable-backup)
            [ -s "$RSYSLOG_TOGGLE_FILE_ACTIVE" ] && \
                return 0
            [ -s "$RSYSLOG_TOGGLE_FILE_BACKUP" ] && \
                mv -f "$RSYSLOG_TOGGLE_FILE_BACKUP" "$RSYSLOG_TOGGLE_FILE_ACTIVE" && \
                RESTART_RSYSLOGD=yes || \
                case "$VALUE_TOGGLE" in
                    LAST_STATE) echo "WARN: No last state found to re-enable!" >&2; return 1;;
                    DEFAULT|on|ON) VALUE_TOGGLE='ipc-audit' ;;
                esac
            ;& # BASH fall through
        enable)
            if [ "$RESTART_RSYSLOGD" != yes ]; then
                NEWVAL='set $.use_remote_logsink = "'"$VALUE_TOGGLE"'";'
                if [ -s "$RSYSLOG_TOGGLE_FILE_ACTIVE" ] ; then
                    fgrep "$NEWVAL" "$RSYSLOG_TOGGLE_FILE_ACTIVE" >/dev/null && \
                        echo "INFO: $RSYSLOG_TOGGLE_FILE_ACTIVE is already up-to-date and managed by this script, got nothing to do" >&2 && \
                        { if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi; true; } && \
                        return 0

                    [ "$HOSTSFENCE" = "$HOSTSFENCE_NETCONSOLE" ] && \
                        fgrep "$HOSTSFENCE_MANUAL" "$RSYSLOG_TOGGLE_FILE_ACTIVE" && \
                        echo "WARN: $RSYSLOG_TOGGLE_FILE_ACTIVE was enabled by user with a different mode, not overriding with netconsole" >&2 && \
                        return 1
                fi

                ( echo "$HOSTSFENCE"; echo "$NEWVAL"; echo "$HOSTSFENCE" ) > "$RSYSLOG_TOGGLE_FILE_ACTIVE" && \
                    RESTART_RSYSLOGD=yes
            fi
            [ "$RESTART_RSYSLOGD" = yes ]
            return $? # if flag == yes, config was definitively changed
            ;;
        disable)
            if [ -s "$RSYSLOG_TOGGLE_FILE_ACTIVE" ] ; then
                if [ "$HOSTSFENCE" = "$HOSTSFENCE_NETCONSOLE" ] && \
                    fgrep "$HOSTSFENCE_MANUAL" "$RSYSLOG_TOGGLE_FILE_ACTIVE" >/dev/null \
                ; then
                    echo "WARN: $RSYSLOG_TOGGLE_FILE_ACTIVE was enabled by user, not overriding with netconsole" >&2
                    return 1
                fi
                mv -f "$RSYSLOG_TOGGLE_FILE_ACTIVE" "$RSYSLOG_TOGGLE_FILE_BACKUP" && \
                RESTART_RSYSLOGD=yes
            fi
            ;;
        *)  return 255 ;;
    esac

    # Should not get here if there were changes to enable
    return 1
}

process_action_target() {
    [ -n "$RESTART_RSYSLOGD" ] || RESTART_RSYSLOGD=no
    [ "$RESTART_RSYSLOGD" != auto ] || RESTART_RSYSLOGD=no
    case "$ACTION_TARGET" in
        _SKIP_)
            if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi
            return 0;;
        enable-backup)
            [ -s "$RSYSLOG_TARGET_FILE_ACTIVE" ] && \
                return 0
            [ -s "$RSYSLOG_TARGET_FILE_BACKUP" ] && \
                mv -f "$RSYSLOG_TARGET_FILE_BACKUP" "$RSYSLOG_TARGET_FILE_ACTIVE" && \
                RESTART_RSYSLOGD=yes || \
                case "$VALUE_TARGET" in
                    LAST_STATE) echo "WARN: No last state found to re-enable!" >&2; return 1;;
                    DEFAULT|on|ON) VALUE_TARGET='@loghost:514' ;;
                esac
            ;& # BASH fall through
        enable)
            if [ "$RESTART_RSYSLOGD" != yes ]; then
                for F in "$RSYSLOG_CONFIG_DIR"/*.conf ; do
                    if grep "@LOGSINK@" "$F" > /dev/null \
                    && ! grep "$VALUE_TARGET" "$F" > /dev/null \
                    ; then
                        tr '\n' '\r' < "$F" \
                        | sed -e 's,\r#*\([\ \t]*\)\([^\r]*\)\(@LOGSINK@\)\r[^\r]*\r,\r#\1\2\3\r\1\2 '"$VALUE_TARGET"'\r,g' \
                        | tr '\r' '\n' > "$F.tmp" \
                        && [ -s "$F.tmp" ] \
                        && { echo "Updating '$F' with new log target: $VALUE_TARGET ..." && mv -f "$F.tmp" "$F" && RESTART_RSYSLOGD=yes ; } \
                        || rm -f "$F.tmp"
                    fi
                done

                NEWVAL='set $.tgt_remote_logsink = "'"$VALUE_TARGET"'";'
                if [ -s "$RSYSLOG_TARGET_FILE_ACTIVE" ] ; then
                    fgrep "$NEWVAL" "$RSYSLOG_TARGET_FILE_ACTIVE" >/dev/null && \
                        echo "INFO: $RSYSLOG_TARGET_FILE_ACTIVE is already up-to-date and managed by this script, got nothing to do" >&2 && \
                        { if [ "$RESTART_RSYSLOGD" = auto ]; then RESTART_RSYSLOGD=no_changes; fi; true; } && \
                        return 0

                    [ "$HOSTSFENCE" = "$HOSTSFENCE_NETCONSOLE" ] && \
                        fgrep "$HOSTSFENCE_MANUAL" "$RSYSLOG_TARGET_FILE_ACTIVE" && \
                        echo "WARN: $RSYSLOG_TARGET_FILE_ACTIVE was enabled by user with a different mode, not overriding with netconsole" >&2 && \
                        return 1
                fi

                ( echo "$HOSTSFENCE"; echo "$NEWVAL"; echo "$HOSTSFENCE" ) > "$RSYSLOG_TARGET_FILE_ACTIVE" && \
                    RESTART_RSYSLOGD=yes
            fi
            [ "$RESTART_RSYSLOGD" = yes ]
            return $? # if flag == yes, config was definitively changed
            ;;
        disable)
            if [ -s "$RSYSLOG_TARGET_FILE_ACTIVE" ] ; then
                if [ "$HOSTSFENCE" = "$HOSTSFENCE_NETCONSOLE" ] && \
                    fgrep "$HOSTSFENCE_MANUAL" "$RSYSLOG_TARGET_FILE_ACTIVE" >/dev/null \
                ; then
                    echo "WARN: $RSYSLOG_TARGET_FILE_ACTIVE was enabled by user, not overriding with netconsole" >&2
                    return 1
                fi
                mv -f "$RSYSLOG_TARGET_FILE_ACTIVE" "$RSYSLOG_TARGET_FILE_BACKUP" && \
                RESTART_RSYSLOGD=yes
            fi
            ;;
        *)  return 255 ;;
    esac

    # Should not get here if there were changes to enable
    return 1
}

optional_restart_rsyslogd() {
    if [ "$RESTART_RSYSLOGD" = yes_if_active ]; then
        # No changes done because of toggle, but hostname was redefined
        # We only need to restart rsyslogd if off-host logging is active
        if [ -s "$RSYSLOG_TOGGLE_FILE_ACTIVE" ] ; then
            OLDVAL="`get_active_rsyslog_toggle`" || OLDVAL=""
            if [ -n "$OLDVAL" ] && [ "$OLDVAL" != none ]; then
                RESTART_RSYSLOGD=yes
            fi
        fi
        if [ -s "$RSYSLOG_TARGET_FILE_ACTIVE" ] ; then
            OLDVAL="`get_active_rsyslog_target`" || OLDVAL=""
            if [ -n "$OLDVAL" ] && [ "$OLDVAL" != none ]; then
                RESTART_RSYSLOGD=yes
            fi
        fi
    fi

    if [ "$RESTART_RSYSLOGD" = yes ]; then
        unset RESTART_RSYSLOGD
        echo "INFO: Restarting the rsyslog service for new settings to take effect" >&2
        /bin/systemctl restart rsyslog
        return $?
    fi

    if [ "$RESTART_RSYSLOGD" = no_changes ]; then
        unset RESTART_RSYSLOGD
        return 0
    fi

    # Should not get here if there were changes to enable
    unset RESTART_RSYSLOGD
    return 1
}

###########################################################################
# Parse the actual kernel-formatted "netconsole" argument, if provided
# netconsole=[src-port]@[src-ip]/[<dev>],[tgt-port]@<tgt-ip>/[tgt-macaddr]
# Note: we do not support syntax for a list of netconsole sink targets
NETCONSOLE_LOCAL_PORT=""
NETCONSOLE_LOCAL_IP=""
NETCONSOLE_LOCAL_DEV=""
NETCONSOLE_REMOTE_PORT=""
NETCONSOLE_REMOTE_IP=""
NETCONSOLE_REMOTE_MAC=""
# House-keeping variables:
NETCONSOLE_CONFIG=""
NETCONSOLE_ENABLED="no"
NETCONSOLE_KERNELARG=""
NETCONSOLE_KERNELARG_RAW=""

reactivate_netconsole() {
    # Initial activation of a configfs setup for dynamic netconsole,
    # or a change to existing previous such setup.
    [ -n "$1" ] && NETCONSOLE_CONFIG_="$1" || NETCONSOLE_CONFIG_="default"
    if [ "$NETCONSOLE_ENABLED" = yes ] && \
       [ -d "$CONFIGFS_NETCONSOLE" ] && \
       [ -n "$NETCONSOLE_LOCAL_DEV" ] \
    ; then
        D="$CONFIGFS_NETCONSOLE/$NETCONSOLE_CONFIG_"
        [ -d "$D" ] && \
            echo "INFO: Netconsole: replacing the following old settings in $D/:"  "`cd "$D" && for F in * ; do [ -f "$F" ] && echo "=== $F :" && cat "$F"; done`" >&2
        mkdir -p "$D"
        [ -f "$D/enabled" ] && [ x"`cat "$D/enabled"`" = x1 ] && \
            echo 0 > "$D/enabled"
        echo "INFO: Netconsole: activating the following new settings in $D/:" "`set | egrep '^NETCONSOLE_'`" >&2
        [ -n "$NETCONSOLE_LOCAL_PORT" ] && \
            echo "$NETCONSOLE_LOCAL_PORT" > "$D/local_port"
        [ -n "$NETCONSOLE_LOCAL_IP" ] && \
            echo "$NETCONSOLE_LOCAL_IP" > "$D/local_ip"
        [ -n "$NETCONSOLE_LOCAL_DEV" ] && \
            echo "$NETCONSOLE_LOCAL_DEV" > "$D/dev_name"
        [ -n "$NETCONSOLE_REMOTE_PORT" ] && \
            echo "$NETCONSOLE_REMOTE_PORT" > "$D/remote_port"
        [ -n "$NETCONSOLE_REMOTE_IP" ] && \
            echo "$NETCONSOLE_REMOTE_IP" > "$D/remote_ip"
        [ -n "$NETCONSOLE_REMOTE_MAC" ] && \
            echo "$NETCONSOLE_REMOTE_MAC" > "$D/remote_mac"

        echo 1 > "$D/enabled" && \
        sleep 3 && \
        echo "INFO: Netconsole: activated for logging to `cat "$D/remote_ip"`:`cat "$D/remote_port"`/UDP (using MAC `cat "$D/remote_mac"`)" >&2
        # This echo may seem like a bit of tautology, but this may be
        # the first thing seen in remote logs of dynamic netconsole
    fi
    unset NETCONSOLE_CONFIG_
}

deactivate_netconsole() {
    [ -n "$1" ] && NETCONSOLE_CONFIG_="$1" || NETCONSOLE_CONFIG_="default"
    if [ "$NETCONSOLE_ENABLED" = yes ] && \
       [ -d "$CONFIGFS_NETCONSOLE" ] && \
       [ -n "$NETCONSOLE_LOCAL_DEV" ] \
    ; then
        D="$CONFIGFS_NETCONSOLE/$NETCONSOLE_CONFIG_"
        mkdir -p "$D"
        [ -f "$D/enabled" ] && \
            v_echo "Netconsole: consider de-activating the following settings in $D/:" "`cd "$D" && for F in * ; do [ -f "$F" ] && echo "=== $F :" && cat "$F"; done`" && \
            [ x"`cat "$D/enabled"`" = x1 ] && \
            echo 0 > "$D/enabled"
        rmdir "$D" || true
    fi
    unset NETCONSOLE_CONFIG_
}

get_netconsole_kernelarg() {
    for KERNELARG in `cat /proc/cmdline` ; do
        case "$KERNELARG" in
            netconsole=*@*/*|delayed_netconsole=*@*/*)
                # Minimal valid syntax contains "@/"
                # You can not dynamically change netconsole settings
                # passed as kernel/module args - so we can fake delayed
                NETCONSOLE_ENABLED=yes
                NETCONSOLE_KERNELARG_RAW="$KERNELARG"
                NETCONSOLE_KERNELARG="`echo "$KERNELARG" | sed 's/^delayed_//'`"
                return 0 # Assume only one config
                ;;
        esac
    done
    return 1
}

UBOOTCFG_MTD=3
fw_printenv() {
    [ -x /usr/bin/fw_printenv ] && { /usr/bin/fw_printenv "$@"; return $?; }
    [ -c "/dev/mtd$UBOOTCFG_MTD" -o -b "/dev/mtd$UBOOTCFG_MTD" ] || return 22
    [ -n "$1" ] && MATCH="^$1=" || MATCH="="
    tr '\000' '\n' < "/dev/mtd$UBOOTCFG_MTD" | dd skip=4 bs=1 2>/dev/null | egrep "$MATCH"
}

FW_PRINTENV=""
fw_printenv_cached() {
    # Print the value of specified key, if already cached
    [ -n "$FW_PRINTENV" ] && [ -n "$1" ] && \
        TMPVAL="`echo "$FW_PRINTENV" | egrep '^'"$1"'=' | sed 's,^.*=,,'`" || return $?
    echo "$TMPVAL"
    unset TMPVAL
}

parse_netconsole_dynamic() {
    # Read the dynamic netconfig, if any - default or any first match.
    # Can also be used to list dynamic netconfigs (-a) - but then it returns
    # zero code if at least one valid setup was found - but then that is not
    # necessarily the latest inspected configuration that populated the vars.
    # (You can check by testing non-empty NETCONSOLE_CONFIG variable value).
    [ -n "$1" ] && [ "$1" != "-a" ] \
        && NETCONSOLE_CONFIG_="$1" \
        || NETCONSOLE_CONFIG_="{default,*}"
    RES=1
    if [ -d "$CONFIGFS_NETCONSOLE" ] ; then
        DEFAULT_SHOWN=no
        for F in `eval ls -1d "$CONFIGFS_NETCONSOLE"/$NETCONSOLE_CONFIG_/dev_name 2>/dev/null` ; do
            D="`dirname "$F"`"
            NETCONSOLE_CONFIG="`basename "$D"`"
            if [ "$NETCONSOLE_CONFIG" = "default" ] ; then
                [ "$DEFAULT_SHOWN" = yes ] && continue
                DEFAULT_SHOWN=yes
            fi
            [ -f "$F" ] && [ -d "$D" ] && [ -f "$D/enabled" ] || continue
            if [ "$REQUIRE_DYNAMIC_NETCONSOLE_ACTIVE" = yes ] ; then
                [ "`cat "$D/enabled"`" = 1 ] || continue
            fi
            echo "INFO: Inspecting netconsole settings under $D/" >&2
            NETCONSOLE_LOCAL_PORT="`cat "$D/local_port"`"
            NETCONSOLE_LOCAL_IP="`cat "$D/local_ip"`"
            NETCONSOLE_LOCAL_DEV="`cat "$D/dev_name"`"
            NETCONSOLE_REMOTE_PORT="`cat "$D/remote_port"`"
            NETCONSOLE_REMOTE_IP="`cat "$D/remote_ip"`"
            NETCONSOLE_REMOTE_MAC="`cat "$D/remote_mac"`"
            echo "INFO: Netconsole: got the following settings under $D/:" "`set | egrep '^NETCONSOLE_'`" >&2
            if [ -n "$NETCONSOLE_LOCAL_PORT$NETCONSOLE_LOCAL_IP$NETCONSOLE_LOCAL_DEV$NETCONSOLE_REMOTE_PORT$NETCONSOLE_REMOTE_IP$NETCONSOLE_REMOTE_MAC" ] ; then
                RES=0
                [ "$1" != "-a" ] && break
            else
                NETCONSOLE_CONFIG=""
            fi
        done
    fi
    unset NETCONSOLE_CONFIG_
    return $RES
}

parse_netconsole_kernelarg() {
    # Parses the string in $NETCONSOLE_KERNELARG as the current netconsole setup
    # including common Linux kernel defaults for values not specified explicitly
    # This string may come from get_netconsole_kernelarg() or from caller/user.
    [ -z "$NETCONSOLE_KERNELARG" ] && return 1

    echo "INFO: Inspecting netconsole default/FW settings as a fallback" >&2
    # Defaults for netconsole setup as set in kernel or FW
    NETCONSOLE_LOCAL_IP="`fw_printenv_cached ipaddr`" \
        && [ -n "$NETCONSOLE_LOCAL_IP" ] \
        || NETCONSOLE_LOCAL_IP="255.255.255.255"

    case "`uname -m`" in
        armv7l) # Assume one of IPC3000 (RC3) models - with 2/3 ports visible
            if [ "`ip a s | egrep -c '^.*:[[:blank:]]+(LAN|eth)[0-9]+[^0-9].*$'`" -gt 2 ]; then
                IF_OFFSET=2
            else
                IF_OFFSET=0
            fi
            ;;
        *)  IF_OFFSET=0 ;;
    esac

    NETCONSOLE_LOCAL_DEV="`fw_printenv_cached ethact | sed 's,^egiga,,'`" \
        && [ -n "$NETCONSOLE_LOCAL_DEV" ] \
        && [ "$NETCONSOLE_LOCAL_DEV" -ge 0 ] \
        && NETCONSOLE_LOCAL_DEV="eth`expr \( $NETCONSOLE_LOCAL_DEV + $IF_OFFSET \) % 3 + 1`" \
        || NETCONSOLE_LOCAL_DEV="eth0"
    NETCONSOLE_LOCAL_PORT="6666"

    NETCONSOLE_REMOTE_IP="`fw_printenv_cached ncip`" \
        && [ -n "$NETCONSOLE_REMOTE_IP" ] \
        || NETCONSOLE_REMOTE_IP="`fw_printenv_cached serverip`"
    NETCONSOLE_REMOTE_IP="`fw_printenv_cached serverip`" || NETCONSOLE_REMOTE_IP=""
    [ -n "$NETCONSOLE_REMOTE_IP" ] || NETCONSOLE_REMOTE_IP="255.255.255.255"
    NETCONSOLE_REMOTE_PORT="6666"
    NETCONSOLE_REMOTE_MAC="ff:ff:ff:ff:ff:ff"
    #echo "INFO: Netconsole: got the following settings as fallback:" "`set | egrep '^NETCONSOLE_'`" >&2

    # netconsole=[+][src-port]@[src-ip]/[<dev>],[tgt-port]@<tgt-ip>/[tgt-macaddr]
    echo "INFO: Inspecting netconsole settings from kernel-args format string: '$NETCONSOLE_KERNELARG'" >&2
    TMPSED='^netconsole=\([\+]*\)\([0-9]*\)@\([0-9\.]*\)/\([^,]*\),\([0-9]*\)@\([0-9\.]*\)/\([a-fA-F0-9\:]*\)$'
    TMPVAL="`echo "$NETCONSOLE_KERNELARG" | sed "s|$TMPSED|\2|"`" && \
        [ -n "$TMPVAL" ] && NETCONSOLE_LOCAL_PORT="$TMPVAL"
    TMPVAL="`echo "$NETCONSOLE_KERNELARG" | sed "s|$TMPSED|\3|"`" && \
        [ -n "$TMPVAL" ] && NETCONSOLE_LOCAL_IP="$TMPVAL"
    TMPVAL="`echo "$NETCONSOLE_KERNELARG" | sed "s|$TMPSED|\4|"`" && \
        [ -n "$TMPVAL" ] && NETCONSOLE_LOCAL_DEV="$TMPVAL"
    # TODO: Post-parse NETCONSOLE_LOCAL_DEV to cater for "(egiga|eth)$I"
    # and "LAN$LI" like in the uImage::init script logic

    TMPVAL="`echo "$NETCONSOLE_KERNELARG" | sed "s|$TMPSED|\5|"`" && \
        [ -n "$TMPVAL" ] && NETCONSOLE_REMOTE_PORT="$TMPVAL"
    TMPVAL="`echo "$NETCONSOLE_KERNELARG" | sed "s|$TMPSED|\6|"`" && \
        [ -n "$TMPVAL" ] && NETCONSOLE_REMOTE_IP="$TMPVAL"
    TMPVAL="`echo "$NETCONSOLE_KERNELARG" | sed "s|$TMPSED|\7|"`" && \
        [ -n "$TMPVAL" ] && NETCONSOLE_REMOTE_MAC="$TMPVAL"
    unset TMPVAL TMPSED
    echo "INFO: Netconsole: got the following settings after parsing kernel bootargs (merged with fallbacks if needed):" "`set | egrep '^NETCONSOLE_'`" >&2
}

process_action_query() {
    RES=255
    if echo "$VALUE_QUERY" | grep -w all >/dev/null || \
       echo "$VALUE_QUERY" | grep -w toggle >/dev/null \
    ; then
        query_rsyslog_toggle
        RES=$?
        case $RES in
            0)  echo "INFO: The rsyslog toggle above was found in ACTIVE config file" >&2 ;;
            1)  echo "INFO: The rsyslog toggle above was found in BACKUP config file" >&2 ;;
            22) echo "INFO: The rsyslog toggle was NOT FOUND in active or backup config files" >&2 ;;
            *)  echo "INFO: The rsyslog toggle inspection returned an UNEXPECTED CODE ($RES)" >&2 ;;
        esac
        echo "" >&2
    fi

    if echo "$VALUE_QUERY" | grep -w all >/dev/null || \
       echo "$VALUE_QUERY" | grep -w toggle >/dev/null \
    ; then
        query_rsyslog_target
        RES=$?
        case $RES in
            0)  echo "INFO: The rsyslog target above was found in ACTIVE config file" >&2 ;;
            1)  echo "INFO: The rsyslog target above was found in BACKUP config file" >&2 ;;
            22) echo "INFO: The rsyslog target was NOT FOUND in active or backup config files" >&2 ;;
            *)  echo "INFO: The rsyslog target inspection returned an UNEXPECTED CODE ($RES)" >&2 ;;
        esac
        echo "" >&2
    fi

    if echo "$VALUE_QUERY" | grep -w all >/dev/null || \
       echo "$VALUE_QUERY" | grep -w loghost >/dev/null \
    ; then
        query_loghost_name
        RES=$?
        case $RES in
            0)  echo "INFO: The hostname above was resolved in local $HOSTSFILE and is managed BY US as a MANUAL setting" >&2 ;;
            1)  echo "INFO: The hostname above was resolved in local $HOSTSFILE but is managed BY SOMEONE ELSE" >&2 ;;
            2)  echo "INFO: The hostname above was resolved in local $HOSTSFILE and is managed BY US as a DYNAMIC NETCONSOLE setting" >&2 ;;
            53)  echo "INFO: The hostname above was resolved in a REMOTE naming service" >&2 ;;
            22)  echo "INFO: The $RSYSLOG_LOGHOST hostname was NOT RESOLVED" >&2 ;;
            *)  echo "INFO: The $RSYSLOG_LOGHOST hostname resolution returned an UNEXPECTED CODE ($RES)" >&2 ;;
        esac
        echo "" >&2
    fi

    if echo "$VALUE_QUERY" | grep -w all >/dev/null || \
       echo "$VALUE_QUERY" | grep -w netconsole >/dev/null \
    ; then
        get_netconsole_kernelarg && parse_netconsole_kernelarg && \
           [ -n "$NETCONSOLE_REMOTE_IP" ] && isIPaddr "$NETCONSOLE_REMOTE_IP" && \
            echo "INFO: Got kernel netconsole module args above" >&2 || \
            echo "INFO: Kernel netconsole module args were NOT FOUND" >&2

        [ -d "$CONFIGFS_NETCONSOLE" ] || \
            echo "INFO: A dynamic netconsole module configfs node was NOT FOUND" >&2

        parse_netconsole_dynamic -a && \
            echo "INFO: Got dynamic netconsole module settings above" >&2 || \
            echo "INFO: Dynamic netconsole module settings were NOT FOUND ($?)" >&2

        echo "" >&2
    fi

    return $RES
}

###########################################################################
# Process CLI args
[ $# = 0 ] && echo "ERROR: Argument required!" >&2 && usage && exit 1

ACTION_HOSTS=_SKIP_
VALUE_HOSTS=""
ACTION_TARGET=_SKIP_
VALUE_TARGET=""
VALUE_PROTO="udp"
VALUE_PORT="514"
ACTION_TOGGLE=_SKIP_
VALUE_TOGGLE=""
ACTION_QUERY=_SKIP_
VALUE_QUERY=""

# Use this one by default:
HOSTSFENCE="$HOSTSFENCE_MANUAL"

while [ $# -gt 0 ]; do
    case "$1" in
        -q|--query)     ACTION_QUERY=yes
            case "$2" in
                loghost|toggle|netconsole|target)
                    VALUE_QUERY="$VALUE_QUERY $2"
                    shift ;;
                *)  VALUE_QUERY="all" ;;
            esac
            ;;
        --del-loghost)  VALUE_HOSTS=""
                        isIPaddr "$2" >/dev/null 2>&1 && VALUE_HOSTS="$2" && shift
                        ACTION_HOSTS=trydel
                        ;;
        --set-loghost)  isIPaddr "$2" || exit $?
                        VALUE_HOSTS="$2"; ACTION_HOSTS=tryset; shift;;
        --tcp)          VALUE_PROTO="tcp" ; ACTION_TARGET=enable ;;
        --udp)          VALUE_PROTO="udp" ; ACTION_TARGET=enable ;;
        --port)         if [ "$2" -gt 0 ] && [ "$2" -lt 65536 ]; then
                            VALUE_PORT="$2" ; ACTION_TARGET=enable ; shift
                        else
                            echo "ERROR: Bad port number: $2" >&2
                            exit 1
                        fi ;;
        --DEL-loghost)  VALUE_HOSTS=""
                        isIPaddr "$2" >/dev/null 2>&1 && VALUE_HOSTS="$2" && shift
                        ACTION_HOSTS=forcedel
                        ;;
        --SET-loghost)  isIPaddr "$2" || exit $?
                        VALUE_HOSTS="$2"; ACTION_HOSTS=forceset; shift;;
        --toggle-rsyslog)
            case "$2" in
                off|OFF) ACTION_TOGGLE="disable"; VALUE_TOGGLE="" ;;
                LAST_STATE|DEFAULT|on|ON) ACTION_TOGGLE="enable-backup"; VALUE_TOGGLE="$2" ;;
                ipc-audit|ipc-audit+snoopy|all|none) ACTION_TOGGLE="enable"; VALUE_TOGGLE="$2" ;;
                *) echo "ERROR: Unknown toggle state requested: '$2'" >&2
                    usage; exit 1 ;;
            esac
            shift
            ;;
        --netconsole)
            # The directory is not present if configfs is not mounted and/or
            # the netconsole module (or kernel built-in copy) is not loaded.
            # In particular, the builtin witout bootarg is still loaded and
            # ready for dynamic reconfiguration. Here we inspect ACTIVE cfgs.
            # TODO: Refactor to use REQUIRE_DYNAMIC_NETCONSOLE_ACTIVE=yes parse_netconsole_dynamic() here
            HOSTSFENCE="$HOSTSFENCE_NETCONSOLE"
            if [ -d "$CONFIGFS_NETCONSOLE" ]; then
                VALUE_HOSTS=""
                for F in `ls -1d "$CONFIGFS_NETCONSOLE"/{default,*}/remote_ip 2>/dev/null` ; do
                    [ -s "$F" ] || continue
                    D="`dirname "$F"`"
                    [ -s "$D"/enabled ] || continue
                    [ "`cat "$D"/enabled`" = 1 ] || continue
                    VALUE_HOSTS="`cat "$F"`" && break
                done
                if [ -n "$VALUE_HOSTS" ] && isIPaddr "$VALUE_HOSTS" ; then
                    echo "INFO: Will try to enable netconsole remote IP '$VALUE_HOSTS' as loghost" >&2
                    ACTION_HOSTS=tryset # VALUE_HOSTS is available per above
                    ACTION_TOGGLE="enable-backup"; VALUE_TOGGLE="DEFAULT"
                else
                    echo "INFO: Will try to disable loghost because there is no enabled netconsole remote IP" >&2
                    ACTION_HOSTS=trydel; VALUE_HOSTS=""
                    ACTION_TOGGLE="disable"; VALUE_TOGGLE=""
                fi
            else
                echo "WARN: Netconsole configfs node not found; inspecting kernel args (if any)" >&2
                if get_netconsole_kernelarg && parse_netconsole_kernelarg && \
                   [ -n "$NETCONSOLE_REMOTE_IP" ] && isIPaddr "$NETCONSOLE_REMOTE_IP" \
                ; then
                    echo "INFO: Will try to enable netconsole remote IP '$NETCONSOLE_REMOTE_IP' as loghost" >&2
                    ACTION_HOSTS=tryset; VALUE_HOSTS="$NETCONSOLE_REMOTE_IP"
                    ACTION_TOGGLE="enable-backup"; VALUE_TOGGLE="DEFAULT"
                else
                    echo "WARN: Neither netconsole configfs node nor kernel args were found; doing nothing at this time" >&2
                    exit 1
                fi
            fi
            ;;
# TODO: Setting the (delayed_)netconsole FW parameter so it is applied at boot
# TODO: Adding/changing/removing the current dynamic netconsole settings (e.g. local IP changes synced with NIC-up/down events or DHCP re-leases)
# TODO: Facilitate changes of target MAC address - of loghost if in this subnet, or relevant next-hop router if in another subnet
        -h|--help|-help) usage; exit 0 ;;
        *)  echo "ERROR: Unknown argument: '$1'" >&2
            usage
            exit 1
            ;;
    esac
    shift
done

case "$VALUE_PROTO" in
    tcp) VALUE_TARGET="@@" ;;
    udp|*) VALUE_TARGET="@" ;;
esac
VALUE_TARGET="${VALUE_TARGET}loghost:${VALUE_PORT}"

if [ "$ACTION_QUERY" = yes ]; then
    process_action_query
    exit $?
fi

if [ -f "$LOCKFILE" ]; then
    echo -e "WARN: Another instance of this script is modifying the system, waiting for it to be gone\c"
    while [ -f "$LOCKFILE" ] ; do
        sleep 1
        echo -e '.\c'
    done
    echo " OK to proceed"
fi >&2
echo "$$" > "$LOCKFILE"
trap '_EXITCODE=$? ; rm -f "$LOCKFILE" ; exit ${_EXITCODE}' 0 1 2 3 15

process_action_hosts
process_action_toggle
process_action_target
optional_restart_rsyslogd
