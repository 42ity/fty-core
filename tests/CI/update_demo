#!/bin/bash

# For crontab:
### Update 42ity demo
### 0 1 * * * bash /root/update_demo > /root/update_demo.log 2>&1

# Copyright (C) 2014 - 2020 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#! \file    update_demo
#  \brief   Initialize demo containers of different OS image variants
#  \author  Tomas Halman <TomasHalman@Eaton.com>
#  \author  Jim Klimov <EvgenyKlimov@Eaton.com>
#  \details Initialize demo containers of different OS image variants
#           on our common debian-test host server

PATH="/bin:/usr/bin:/sbin:/usr/sbin"

OBS_IMAGES_SERVER="http://obs.roz.lab.etn.com"
OBS_IMAGES_BASEURL="$OBS_IMAGES_SERVER/images"
ARCH="x86_64"
PEMFILE_DIR="/root/pems"

deploy_image_online() {
        # Download images, stop VM, preconfigure and finish at that
        # $1 = LXC container name (also rootfs subdir name, and OE hostname)
        # $2 = OS image variant (path component on OBS)
        # $3 = PEM filename (tntnet SSL certificate); "-" to not install one
        # $4 = start flag (if "start" then the container is booted in the end)
        VM="$1"
        IMGTYPE="$2"
        PEMFILE="$3"
        STARTFLAG="$4"

        # The logic below is similar to, but simpler than, a callout to
        # /root/ci-reset-virtual-machine.sh -b "$IMGTYPE" -m "$VM" --deploy-only
        # Here we do not mount subdirs between host and container, etc.
        # We do not even keep the OS image tarball, just unpack it on the fly.

        [ -z "$PEMFILE" ] && [ -s "$PEMFILE_DIR/$VM.pem" ] && \
                PEMFILE="$PEMFILE_DIR/$VM.pem"
        [ x"$PEMFILE" = x- ] && PEMFILE=""
        case "$PEMFILE" in
                "") ;;
                /*|./*|../*) [ -s "$PEMFILE" ] || \
                        echo "WARN: Can not detect PEMFILE by filename '$PEMFILE'" >&2
                   ;;
                *) { [ -s "./$PEMFILE" ] && PEMFILE="`pwd`/$PEMFILE" ; } || \
                   { [ -s "$PEMFILE_DIR/$PEMFILE" ] && PEMFILE="$PEMFILE_DIR/$PEMFILE" ; } || \
                        echo "WARN: Can not detect PEMFILE by short filename '$PEMFILE'" >&2
                   ;;
        esac

        echo "=== `date`: Deploying container '$VM' of type '$IMGTYPE' ..."
        virsh -c lxc:/// destroy "$VM"
        umount /srv/libvirt/rootfs/"$VM"/proc 2>/dev/null
        rm -rf /srv/libvirt/rootfs/"$VM"
        mkdir /srv/libvirt/rootfs/"$VM" || return $?
        IMG_NAME="`wget -O - "$OBS_IMAGES_BASEURL/$IMGTYPE/$ARCH" | sed -n 's|.*>\(simpleimage.[0-9]*-[0-9]*.tar.gz\)<.*|\1|p'`" && \
        [ -n "$IMG_NAME" ] || return $?
        wget -O - "$OBS_IMAGES_BASEURL/$IMGTYPE/$ARCH/$IMG_NAME" | tar -C /srv/libvirt/rootfs/"$VM" -xzf -
        echo "$VM" > /srv/libvirt/rootfs/"$VM"/etc/hostname || \
                echo "WARN: Got an error($?) setting container hostname, continuing" >&2
        if [ -n "$PEMFILE" ]; then
                cp "$PEMFILE" /srv/libvirt/rootfs/"$VM"/etc/tntnet/bios.pem || \
                echo "WARN: Got an error($?) copying PEM file '$PEMFILE', continuing" >&2
        fi
        if [ x"$STARTFLAG" = xstart ] ; then
                echo "=== `date`: Booting container '$VM' of type '$IMGTYPE' ..."
                virsh -c lxc:/// start "$VM"
                return $?
        fi
        echo "=== `date`: Done without booting container '$VM' of type '$IMGTYPE'"
        return 0
}

setup_bios_demo() (
    cd /srv/libvirt/rootfs/demo/ || exit $?

    echo "Populating custom configuration for the bios-demo VM"
    #
    # copy resolv.conf (demo has not OBS default, but ROZ LAB one)
    #
    cp -f /etc/resolv.conf ./etc/
    echo bios-demo.roz.lab.etn.com > ./etc/hostname

    if [ -n "`ssh -p 4222 root@bios-rc-demo.roz.lab.etn.com echo ahoj`" ] ; then
        #
        # replicate NUT config from bios-rc-demo
        #
        echo "Exporting a copy of NUT configs from bios-rc-demo..."
        scp -P 4222 root@bios-rc-demo.roz.lab.etn.com:/etc/nut/* ./etc/nut

        #
        # Dump database from bios-rc-demo
        #
        echo "Exporting a copy of database content from bios-rc-demo..."
        ssh -p 4222 root@bios-rc-demo.roz.lab.etn.com mysqldump -u root box_utf8 > ./mysqldump || rm -f ./mysqldump
    fi

    #
    # Populate bios-demo database from project defaults and
    # if available - override from replica of bios-rc-demo
    cat << EOF | chroot . /bin/bash
/usr/lib/mysql/rcmysql start
echo 'Importing default database schema...'
wget -O - "http://tomcat.roz.lab.etn.com/git-web/?p=core.git;a=blob_plain;f=database/mysql/initdb.sql;hb=HEAD" |  mysql -u root
# wget -O - "http://tomcat.roz.lab.etn.com/git-web/?p=core.git;a=blob_plain;f=database/mysql/load_data.sql;hb=HEAD" | mysql -u root box_utf8
# wget -O - "http://tomcat.roz.lab.etn.com/git-web/?p=core.git;a=blob_plain;f=database/mysql/load_ROZLAB.sql;hb=HEAD" | mysql -u root box_utf8
[ -s /mysqldump ] && echo 'Importing /mysqldump...' && mysql -u root box_utf8 < /mysqldump
/usr/lib/mysql/rcmysql stop
EOF

    echo "'Accept license' and 'Set password' as far as bios-core is concerned"
    mkdir -p var/lib/bios
cat << EOF > var/lib/bios/license
1.0
1439207029
bios
EOF
    mkdir -p mnt/nand/overlay/etc
    cp etc/shadow mnt/nand/overlay/etc

    #
    # nut config
    #
    # tha - commented out since mysql transfer is broken
    [ -s ./mysqldump ] && \
    echo "Enable NUT-driver service instances" && \
    cat <<EOF | chroot . /bin/bash
for device in \$(awk '/ *\[/{ gsub(/[\\[\\]]/,"",\$1); print \$1; }' </etc/nut/ups.conf) ; do
    /bin/systemctl enable nut-driver@\$device
done
EOF

    echo "Finishing up with 'bios-demo'..."
    rm -f ./mysqldump

    sed -i 's|exit.*|/bin/systemctl restart ssh|' etc/rc.local

    # mv /srv/libvirt/rootfs/demo/usr/share/bios-web /srv/libvirt/rootfs/demo/usr/share/bios-web.x.$$; rsync -avPHK bios-backup:/export/DUMP/manual/test-debian/fullroot/srv/libvirt/.zfs/snapshot/20150212-0000/rootfs/demo/usr/share/bios-web/ /srv/libvirt/rootfs/demo/usr/share/bios-web/

    cd /
    virsh -c lxc:/// start demo
)

deploy_image_online "emc4j-demo" "epfl" "emc4j.pem" start
deploy_image_online "lba-demo"   "lba"  "lba.pem"   start

# This one is hosted in a separate path, and has no PEM:
( OBS_IMAGES_BASEURL="$OBS_IMAGES_SERVER" deploy_image_online "opensuse-demo" "opensuse-image" "-" start )

# This one we will configure in detail via setup_bios_demo()
deploy_image_online "demo"       "deploy" "demo.pem" "-" || exit $?
setup_bios_demo || exit $?
