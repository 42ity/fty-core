#
# Copyright (C) 2015 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


#! \file 00_license.sh
#  \author Michal Hrusecky <MichalHrusecky@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \brief  Enforce acceptance of license (if needed) and change of password
#          in REST API, and try an authenticated sysinfo request
#  \detailed Some REST API scripts just need to get THEIR job done, so here
#            is a way to force-accept the license and toggle a password change.
#            Caller can `export SKIP_LICENSE=yes` to avoid this operation as
#            it is done by default in most of our test-suite scripts.
#            Caller can `export SKIP_DEFAULT_PASSWORD=yes` to avoid resetting
#            the password of BIOS_USER to BIOS_PASSWD if the operation is done.

### Command-line usage example for a VTE/RC3 remote host:
###   ${CHECKOUTDIR}/tests/CI/test_web.sh -q --host bios-rc-seedX --port 80 00_license-CI-forceaccept.sh.test
### or for a dev's localhost:8000 :
###   ${CHECKOUTDIR}/tests/CI/test_web.sh -q 00_license-CI-forceaccept.sh.test

[ -z "${JSONSH-}" ] && \
    for F in "$CHECKOUTDIR/tools/JSON.sh" "$SCRIPTDIR/JSON.sh"; do
        [ -x "$F" -a -s "$F" ] && JSONSH="$F" && break
    done

# Try to accept the BIOS license on server, unless the caller is testing this
if [ x"$SKIP_LICENSE" = xyes ]; then
    test_it "license_initial_status_ok"
    api_get_json '/admin/license/status' | grep "accepted_at" >&5
    RES=$?
    if [ "$RES" != 0 ] ; then
        logmsg_warn "License status at the beginning of the test suite is: not accepted"
    fi
    # Nonpositive argument means "OK to fail"
    print_result -$RES
else
    test_it "license_initial_status_ok"
    api_get_json '/admin/license/status' | grep "accepted_at" >&5
    RES=$?
    if [ $RES = 0 ] ; then
        print_result 0
    else
        print_result -$RES

        test_it "verify_known_password_1"
        SYSINFOARAW="`api_auth_get '/admin/sysinfo' 2>/dev/null`"
        RES=$?
        print_result -$RES

        if [ $RES != 0 ] && [ -n "$BIOS_PASSWD" ] && [ -n "$BIOS_USER" ]; then
            test_it "ensure_known_password_lowlevel_1"
            if [ x"$SKIP_DEFAULT_PASSWORD" = xyes ]; then
                logmsg_warn "Default password at the beginning of the test suite is: not accepted"
                print_result 32
            else
                logmsg_info "Trying to set the default user password so we can accept the license and go on"
                sut_run "( echo "${BIOS_PASSWD}"; echo "${BIOS_PASSWD}"; ) | passwd ${BIOS_USER}"
                print_result $?
            fi
        fi

        logmsg_info "Trying to accept the license on BIOS server '$BASE_URL'..."
        api_auth_post_json '/admin/license' "foobar" >&5 || true

        test_it "license_forced_status_ok"
        OUT="`api_get_json '/admin/license/status' | grep "accepted"`"
        RES=$?
        [ "$RES" = 0 ] && echo "$OUT" | sed 's|\(accepted_at":"\)[0-9]*"|\1XXX"|' >&5
        print_result $RES
    fi

    #NEW_BIOS_PASSWD="nEw2`echo "$BIOS_PASSWD" | cut -c 1-3`%`echo "$BIOS_PASSWD" | cut -c 4-`"'@'
    NEW_BIOS_PASSWD="xX!9`head --bytes 16 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n\r\%],_,g'`"

    curlfail_push "warn" ""
    SYSINFOARAW="`api_auth_get '/admin/sysinfo'`"
    RES=$?

    if [ "$RES" = 0 ]; then
        logmsg_info "REST API server responds to default password; try to change it back and forth (enables SSH server)"

        test_it "change_password_forth"
        api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$BIOS_PASSWD"'", "new_passwd" : "'"$NEW_BIOS_PASSWD"'" }'
        RES1=$?
        print_result $RES1

        test_it "change_password_back_restapi"
        BIOS_PASSWD="$NEW_BIOS_PASSWD" api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$NEW_BIOS_PASSWD"'", "new_passwd" : "'"$BIOS_PASSWD"'" }'
        RES2=$?
        print_result -$RES2

        if [ $RES1 = 0 ] && [ $RES2 != 0 ] ; then
            test_it "change_password_back_lowlevel"
            logmsg_info "Trying to set the default user password (which did match earlier) so we can accept the license and go on"
            sut_run "( echo "${BIOS_PASSWD}"; echo "${BIOS_PASSWD}"; ) | passwd ${BIOS_USER}"
            print_result $?
        fi

        logmsg_info "Some info about running server version (and a test that password is OK):"

        test_it "sysinfo_get_auth=2"
        SYSINFOA="`api_auth_get_json '/admin/sysinfo'`"
        RES=$?
        #echo "=== SYSINFOA ($RES):" >&2
        #echo "$SYSINFOA" >&2
        [ $RES = 0 -a -n "$SYSINFOA" ]
        print_result $?


        test_it "sysinfo_auth=2__parse__source_build_package__info"
        JPATH='"\$BIOS","packages",[0-9]*,".*"$'
        SYSINFO_VERSION="`echo "$SYSINFOA" | ${JSONSH} -x="$JPATH" -l`"
        RES=$?
        { echo "=== SYSINFO_VERSION ($RES):"; echo "$SYSINFO_VERSION"; } >&2
        [ $RES = 0 -a -n "$SYSINFO_VERSION" -a \
            x"$SYSINFO_VERSION" != x'""' ]
        print_result $?

    else
        logmsg_warn "REST API server has a non-default password"
    fi

    curlfail_pop

    # We could break the password above, or leave an unknown one in place...
    # Make sure we end this routine with a working known BIOS_PASSWD value
    # unless asked otherwise.
    test_it "verify_known_password_2"
    SYSINFOARAW="`api_auth_get '/admin/sysinfo' 2>/dev/null`"
    RES=$?
    print_result -$RES

    if [ $RES != 0 ] && [ -n "$BIOS_PASSWD" ] && [ -n "$BIOS_USER" ]; then
        test_it "ensure_known_password_lowlevel_2"
        if [ x"$SKIP_DEFAULT_PASSWORD" = xyes ]; then
            logmsg_warn "Default password at the beginning of the test suite is: not accepted"
            print_result 32
        else
            logmsg_info "Trying to set the default user password so we can accept the license and go on"
            sut_run "( echo "${BIOS_PASSWD}"; echo "${BIOS_PASSWD}"; ) | passwd ${BIOS_USER}"
            print_result $?
        fi
    fi


fi # // if SKIP_LICENSE != yes

