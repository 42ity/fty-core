# Some REST API scripts just need to get THEIR job done,
# so here is a way to force-accept the license

[ -z "${JSONSH-}" ] && \
    for F in "$CHECKOUTDIR/tools/JSON.sh" "$SCRIPTDIR/JSON.sh"; do
        [ -x "$F" -a -s "$F" ] && JSONSH="$F" && break
    done

test_it "license_initial_status_ok"
if api_get_json '/admin/license/status' | grep "accepted_at" >&5 ; then
    print_result $?
else
    echo "Trying to accept the license on BIOS server '$BASE_URL'..."
    api_auth_post_content '/admin/license' "foobar" >&5 || true

    test_it "license_forced_status_ok"
    OUT="`api_get_json '/admin/license/status' | grep "accepted"`"
    RES=$?
    [ "$RES" = 0 ] && echo "$OUT" | sed 's|\(accepted_at":"\)[0-9]*"|\1XXX"|' >&5
    print_result $RES
fi


NEW_BIOS_PASSWD="new$BIOS_PASSWD"'!'

curlfail_push "warn" ""
SYSINFOARAW="`api_auth_get '/admin/sysinfo'`"
RES=$?

if [ "$RES" = 0 ]; then
    echo "REST API server responds to default password; try to change it back and forth (enables SSH server)"

    test_it "change_password_forth"
    api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$BIOS_PASSWD"'", "new_passwd" : "'"$NEW_BIOS_PASSWD"'" }'
    print_result $?

    test_it "change_password_back"
    BIOS_PASSWD="$NEW_BIOS_PASSWD" api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$NEW_BIOS_PASSWD"'", "new_passwd" : "'"$BIOS_PASSWD"'" }'
    print_result $?
fi

( echo "Some info about running server version:"
# Subprocess so as not to pollute namespaces

test_it "sysinfo_get_auth=2"
SYSINFOA="`api_auth_get_content '/admin/sysinfo'`"
RES=$?
#echo "=== SYSINFOA ($RES):" >&2
#echo "$SYSINFOA" >&2
[ $RES = 0 -a -n "$SYSINFOA" ]
print_result $?


test_it "sysinfo_auth=2_build_version_package"
JPATH='"\$BIOS","packages",[0-9]*,"package-(name|version)"$'
SYSINFO_VERSION="`echo "$SYSINFOA" | ${JSONSH} -x="$JPATH"`"
RES=$?
{ echo "=== SYSINFO_VERSION ($RES):"; echo "$SYSINFO_VERSION"; } >&2
[ $RES = 0 -a -n "$SYSINFO_VERSION" -a \
    x"$SYSINFO_VERSION" != x'""' ]
print_result $?

test_it "sysinfo_auth=2_build_version_source"
JPATH='"\$BIOS","packages",[0-9]*,"(source-repo|build-info)"$'
SYSINFO_VERSION="`echo "$SYSINFOA" | ${JSONSH} -x="$JPATH"`"
RES=$?
{ echo "=== SYSINFO_VERSION ($RES):"; echo "$SYSINFO_VERSION"; } >&2
[ $RES = 0 -a -n "$SYSINFO_VERSION" -a \
    x"$SYSINFO_VERSION" != x'""' ]
print_result $?

)

curlfail_pop
