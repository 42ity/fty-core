#
# Copyright (C) 2015 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


#! \file 00_license.sh
#  \author Michal Hrusecky <MichalHrusecky@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \brief  Enforce acceptance of license (if needed) and change of password
#          in REST API, and try an authenticated sysinfo request
#  \detailed Some REST API scripts just need to get THEIR job done, so here
#            is a way to force-accept the license and toggle a password change

### Command-line usage example for a VTE/RC3 remote host:
###   ${CHECKOUTDIR}/tests/CI/test_web.sh -q --host bios-rc-seedX --port 80 00_license-CI-forceaccept.sh.test
### or for a dev's localhost:8000 :
###   ${CHECKOUTDIR}/tests/CI/test_web.sh -q 00_license-CI-forceaccept.sh.test

[ -z "${JSONSH-}" ] && \
    for F in "$CHECKOUTDIR/tools/JSON.sh" "$SCRIPTDIR/JSON.sh"; do
        [ -x "$F" -a -s "$F" ] && JSONSH="$F" && break
    done

test_it "license_initial_status_ok"
if api_get_json '/admin/license/status' | grep "accepted_at" >&5 ; then
    print_result $?
else
    echo "Trying to accept the license on BIOS server '$BASE_URL'..."
    api_auth_post_content '/admin/license' "foobar" >&5 || true

    test_it "license_forced_status_ok"
    OUT="`api_get_json '/admin/license/status' | grep "accepted"`"
    RES=$?
    [ "$RES" = 0 ] && echo "$OUT" | sed 's|\(accepted_at":"\)[0-9]*"|\1XXX"|' >&5
    print_result $RES
fi


NEW_BIOS_PASSWD="nEw2`echo "$BIOS_PASSWD" | cut -c 1-3`%`echo "$BIOS_PASSWD" | cut -c 4-`"'@'

curlfail_push "warn" ""
SYSINFOARAW="`api_auth_get '/admin/sysinfo'`"
RES=$?

if [ "$RES" = 0 ]; then
    echo "REST API server responds to default password; try to change it back and forth (enables SSH server)"

    test_it "change_password_forth"
    api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$BIOS_PASSWD"'", "new_passwd" : "'"$NEW_BIOS_PASSWD"'" }'
    print_result $?

    test_it "change_password_back"
    BIOS_PASSWD="$NEW_BIOS_PASSWD" api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$NEW_BIOS_PASSWD"'", "new_passwd" : "'"$BIOS_PASSWD"'" }'
    print_result $?


    echo "Some info about running server version:"

    test_it "sysinfo_get_auth=2"
    SYSINFOA="`api_auth_get_content '/admin/sysinfo'`"
    RES=$?
    #echo "=== SYSINFOA ($RES):" >&2
    #echo "$SYSINFOA" >&2
    [ $RES = 0 -a -n "$SYSINFOA" ]
    print_result $?


    test_it "sysinfo_auth=2__parse__source_build_package__info"
    JPATH='"\$BIOS","packages",[0-9]*,".*"$'
    SYSINFO_VERSION="`echo "$SYSINFOA" | ${JSONSH} -x="$JPATH" -l`"
    RES=$?
    { echo "=== SYSINFO_VERSION ($RES):"; echo "$SYSINFO_VERSION"; } >&2
    [ $RES = 0 -a -n "$SYSINFO_VERSION" -a \
        x"$SYSINFO_VERSION" != x'""' ]
    print_result $?

else
    echo "REST API server has a non-default password, OK for our needs"
fi

curlfail_pop
