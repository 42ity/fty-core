#
# Copyright (C) 2015 Eaton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


#! \file 00_license.sh
#  \author Michal Hrusecky <MichalHrusecky@Eaton.com>
#  \author Jim Klimov <EvgenyKlimov@Eaton.com>
#  \brief  Enforce acceptance of license (if needed) and change of password
#          in REST API, and try an authenticated sysinfo request
#  \detailed Some REST API scripts just need to get THEIR job done, so here
#            is a way to force-accept the license and toggle a password change.
#            Caller can `export SKIP_LICENSE=yes` to avoid this operation as
#            it is done by default in most of our test-suite scripts.
#            Caller can `export SKIP_DEFAULT_PASSWORD=yes` to avoid resetting
#            the password of BIOS_USER to BIOS_PASSWD if the operation is done.

### Command-line usage example for a VTE/RC3 remote host:
###   ${CHECKOUTDIR}/tests/CI/test_web.sh -q --host bios-rc-seedX --port 80 00_license-CI-forceaccept.sh.test
### or for a dev's localhost:8000 :
###   ${CHECKOUTDIR}/tests/CI/test_web.sh -q 00_license-CI-forceaccept.sh.test

echo
echo "###################################################################################################"
echo "********* 00_license-CI-forceaccept.sh.test ****************** START ******************************"
echo "###################################################################################################"
echo

[ x"${JSONSH_CLI_DEFINED-}" = xyes ] || CODE=127 die "jsonsh_cli() not defined"
. "$CHECKOUTDIR/tests/CI/web/commands/00_enforcePasswd.include"

# Try to accept the BIOS license on server, unless the caller is testing this
if [ x"$SKIP_LICENSE" = xyes ]; then
    test_it "license_initial_status_ok"
    RES=0
    api_get_json '/admin/license/status' | grep "accepted_at" >&5 || \
        RES=$?

    if [ "$RES" != 0 ] ; then
        logmsg_warn "License status at the beginning of the test suite is: not accepted"
    fi
    # Nonpositive argument means "OK to fail"
    print_result -$RES || true
else
    test_it "license_initial_status_ok"
    RES=0
    api_get_json '/admin/license/status' | grep "accepted_at" >&5 || \
        RES=$?

    if [ $RES = 0 ] ; then
        print_result 0
    else
        print_result -$RES || true

        test_it "verify_known_password_1"
        RES=0
        TIMEINFO="`api_auth_get_json '/admin/time' 2>/dev/null`" || \
           RES=$?
        print_result -$RES || true

        if [ $RES != 0 ] && [ -n "$BIOS_PASSWD" ] && [ -n "$BIOS_USER" ]; then
            test_it "ensure_known_password_lowlevel_1"
            if [ x"$SKIP_DEFAULT_PASSWORD" = xyes ]; then
                logmsg_warn "Default password at the beginning of the test suite is: not accepted"
                print_result 32 || true
            else
                logmsg_info "Trying to set the default user password so we can accept the license and go on..."
                RES=0
                enforce_passwd "${BIOS_PASSWD}" || RES=$?
                print_result $RES || true
            fi
        fi

        logmsg_info "Trying to accept the license on BIOS server '$BASE_URL'..."
        CITEST_QUICKFAIL=no WEBLIB_QUICKFAIL=no WEBLIB_CURLFAIL=no api_auth_post_json '/admin/license' "foobar" >&5 || true

        test_it "license_forced_status_ok"
        RES=0
        OUT="`api_get_json '/admin/license/status' | grep "accepted_at"`" || \
            RES=$?
        [ "$RES" = 0 ] && echo "$OUT" | sed 's|\(accepted_at":"\)[0-9]*"|\1XXX"|' >&5 && echo "$OUT"
        print_result $RES || true
    fi

    #NEW_BIOS_PASSWD="nEw2`echo "$BIOS_PASSWD" | cut -c 1-3`%`echo "$BIOS_PASSWD" | cut -c 4-`"'@'
    NEW_BIOS_PASSWD="xX!9`head --bytes 16 /dev/urandom | base64 | sed 's,[\+\=\/\ \t\n\r\%],_,g'`"

    curlfail_push "warn" ""
    RES=0
    TIMEINFO="`CITEST_QUICKFAIL=no WEBLIB_QUICKFAIL=no WEBLIB_CURLFAIL=no api_auth_get_json '/admin/time'`" || \
        RES=$?
    curlfail_pop

    if [ "$RES" = 0 ]; then
        logmsg_info "REST API server responds to default password; try to change it back and forth (enables SSH server)"

        test_it "change_password_forth"
        RES1=0
        api_auth_post /admin/passwd '{"user" : "'"$BIOS_USER"'", "old_passwd" : "'"$BIOS_PASSWD"'", "new_passwd" : "'"$NEW_BIOS_PASSWD"'" }' || \
            RES1=$?
        print_result -$RES1 || true

        if [ $RES1 = 0 ] ; then
            test_it "change_password_back_lowlevel"
            logmsg_info "Trying to set the default user password (which did match earlier) so we can accept the license and go on"
            enforce_passwd "${BIOS_PASSWD}" || RES1=$?
            print_result $RES1 || true
        fi

        logmsg_info "Some info about running server version (and a test that password is OK):"

        test_it "sysinfo_get_auth=2"
        RES=0
        SYSINFOA="`api_auth_get_json '/admin/sysinfo'`" || \
            RES=$?
        #echo "=== SYSINFOA ($RES):" >&2
        #echo "$SYSINFOA" >&2
        [ $RES = 0 -a -n "$SYSINFOA" ] || RES=$?
        print_result $RES || true

        test_it "sysinfo_auth=2__parse__source_build_package__info"
        JPATH='"packages",[0-9]*$'
        RES=0
        SYSINFO_VERSION_PKG="`echo "$SYSINFOA" | jsonsh_cli -x="$JPATH" | egrep '"package-name":"core".*"commit":"[a-f0-9-]+"'`" && \
            SYSINFO_VERSION_PKG="`echo "$SYSINFO_VERSION_PKG" | sed 's/.*commit":"\(.*\)".*/\1/'`" || \
            RES=$?
        echo "=== SYSINFO_VERSION_PKG ($RES): $SYSINFO_VERSION_PKG" >&2
        [ $RES = 0 -a -n "$SYSINFO_VERSION_PKG" -a \
            x"$SYSINFO_VERSION_PKG" != x'""' ] || { RES=$?; SYSINFO_VERSION_PKG=''; }
        print_result $RES || true

        test_it "sysinfo_auth=2__parse__source_build_running__info"
        JPATH='^"restapi-metadata","source-repo","commit"$'
        RES=0
        SYSINFO_VERSION_RUN="`echo "$SYSINFOA" | jsonsh_cli -x="$JPATH" | sed 's,^.*\t"\(.*\)",\1,'`" || \
            RES=$?
        echo "=== SYSINFO_VERSION_RUN ($RES): $SYSINFO_VERSION_RUN" >&2
        [ $RES = 0 -a -n "$SYSINFO_VERSION_RUN" -a \
            x"$SYSINFO_VERSION_RUN" != x'""' ] || RES=$?
        print_result -$RES || true

        if [ -s "$BUILDSUBDIR/.git_details" ]; then
            SYSINFO_VERSION_TESTSUITE="$(. "$BUILDSUBDIR/.git_details" > /dev/null && echo "${PACKAGE_GIT_HASH_L-}")" || SYSINFO_VERSION_TESTSUITE=""
            if [ -n "$SYSINFO_VERSION_TESTSUITE" ]; then
                echo "=== SYSINFO_VERSION_TESTSUITE: $SYSINFO_VERSION_TESTSUITE" >&2
            fi
        else
            # fresh checkout for VTE/SC/RC testing? Maybe call the script?
            logmsg_info "'$BUILDSUBDIR/.git_details' not available"
        fi

        if [ -n "$SYSINFO_VERSION_PKG" -a x"$SYSINFO_VERSION_PKG" != "xN/A" ]; then
            test_it "FYI:commitid-core-COMPARE-running_restapi-to-package"
            # Align the lengths of commit hashes - full or short
            [ "${#SYSINFO_VERSION_PKG}" = "${#SYSINFO_VERSION_RUN}" ] || \
            if [ "${#SYSINFO_VERSION_PKG}" -gt "${#SYSINFO_VERSION_RUN}" ]; then
                SYSINFO_VERSION_PKG="`echo "$SYSINFO_VERSION_PKG" | cut -c 1-"${#SYSINFO_VERSION_RUN}"`"
            else
                SYSINFO_VERSION_RUN="`echo "$SYSINFO_VERSION_RUN" | cut -c 1-"${#SYSINFO_VERSION_PKG}"`"
            fi
            logmsg_info "Comparing SYSINFO_VERSION_PKG='$SYSINFO_VERSION_PKG' (binary package in OS) and SYSINFO_VERSION_RUN='$SYSINFO_VERSION_RUN' (running webserver)"
            [ x"$SYSINFO_VERSION_PKG" = x"$SYSINFO_VERSION_RUN" ]
            print_result -$?
        fi

        if [ -n "$SYSINFO_VERSION_TESTSUITE" ]; then
            test_it "FYI:commitid-core-COMPARE-running_restapi-to-testsuite"
            [ "${#SYSINFO_VERSION_TESTSUITE}" = "${#SYSINFO_VERSION_RUN}" ] || \
            if [ "${#SYSINFO_VERSION_TESTSUITE}" -gt "${#SYSINFO_VERSION_RUN}" ]; then
                SYSINFO_VERSION_TESTSUITE="`echo "$SYSINFO_VERSION_TESTSUITE" | cut -c 1-"${#SYSINFO_VERSION_RUN}"`"
            else
                SYSINFO_VERSION_RUN="`echo "$SYSINFO_VERSION_RUN" | cut -c 1-"${#SYSINFO_VERSION_TESTSUITE}"`"
            fi
            logmsg_info "Comparing SYSINFO_VERSION_TESTSUITE='$SYSINFO_VERSION_TESTSUITE' (test suite) and SYSINFO_VERSION_RUN='$SYSINFO_VERSION_RUN' (running webserver)"
            [ x"$SYSINFO_VERSION_TESTSUITE" = x"$SYSINFO_VERSION_RUN" ]
            print_result -$?
        fi

    else
        logmsg_warn "REST API server has a non-default password"
    fi


    # We could break the password above, or leave an unknown one in place...
    # Make sure we end this routine with a working known BIOS_PASSWD value
    # unless asked otherwise.
    test_it "verify_known_password_2"
    RES=0
    TIMEINFO="`api_auth_get_json '/admin/time' 2>/dev/null`" || \
        RES=$?
    print_result -$RES || true

    if [ $RES != 0 ] && [ -n "$BIOS_PASSWD" ] && [ -n "$BIOS_USER" ]; then
        test_it "ensure_known_password_lowlevel_2"
        if [ x"$SKIP_DEFAULT_PASSWORD" = xyes ]; then
            logmsg_warn "Default password at the beginning of the test suite is: not accepted"
            print_result 32
        else
            logmsg_info "Trying to set the default user password so we can go on"
            RES=0
            enforce_passwd "${BIOS_PASSWD}" || RES=$?
            print_result $RES

            test_it "verify_known_password_3"
            RES=0
            TIMEINFO="`api_auth_get_json '/admin/time' 2>/dev/null`" || \
                RES=$?
            print_result -$RES || true
        fi
    fi

    test_it "license_status_before_tests"
    RES=0
    api_get_json '/admin/license/status' | grep "accepted_at" >&5 || \
        RES=$?

    if [ "$RES" != 0 ] ; then
        logmsg_warn "License status at the beginning of the test suite is: not accepted"
    fi
    # Nonpositive argument means "OK to fail"
    print_result -$RES

fi # // if SKIP_LICENSE != yes

echo
echo "###################################################################################################"
echo "********* 00_license-CI-forceaccept.sh.test ******************* END *******************************"
echo "###################################################################################################"
echo
