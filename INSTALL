The INSTALL document for $BIOS
==============================

This INSTALL document is about building and installing prerequisites
from source and/or as resulting packages for the Eaton $BIOS core project.

To ease copy-pasting, the example commands in this document are prefixed
with a colon+semicolon prompt `:;` which is an empty command for shell
interpreters (unlike the dollar `$` or hash `#` signs which have their
meaning for shells and can adversely influence copy-pasted commands).



Get the source
--------------
If you are reading this file, you probably have some version of the
$BIOS core project source code already. It might not be the most fresh
version, however, so to stay on the bleeding edge of development you
might want to clone the source-code repository onto your development
system.

Checkout of the main upstream repository itself is more of interest to
those responsible for building the current project state into binaries
for validation or redistribution. Code should not be "pushed" into this
repository directly except after review by the source code gate-keepers.
The upstream $BIOS core project repository can be cloned with the command
below (proper access to the project infrastructure server is required)
over SSH (keys should be uploaded to the user's Stash account first):
----
:; git clone ssh://git@stash.mbt.lab.etn.com:7999/bios/core.git
----
...or over HTTP (plaintext password may be required which is not good, and
special characters may need URL percent-encoding which is inconvenient):
----
:; git clone http://E1234567:MyPass@stash.mbt.lab.etn.com/scm/bios/core.git
----

The project workflow for actual development implies that one should first
"fork" the upstream repository in the Stash web-interface into a private
namespace (named like E1234567 below) with automatic application of updates
from the upstream repo, then `git clone` this private repository onto his
or her PC for actual coding; it is convenient to also register the common
upstream repository as such, to facilitate comparisons and updates which
were not resolved automatically (i.e. several changes applied to the same
area in the tracked files and possibly conflicting):
----
:; git clone ssh://git@stash.mbt.lab.etn.com:7999/~E1234567/core.git && \
   cd core/ && \
   git remote add upstream ssh://git@stash.mbt.lab.etn.com:7999/bios/core.git
----

Then the developer may create branches for working on individual issues
and when some work is done -- push the code back to his personal fork
on Stash for common review like this:
----
:; git add changedfiles* && git commit -m 'Meaningful text' && git push
----
...and afterwards use the Stash web-interface to initiate a pull-request
for code review and ultimate merge of his or her changes into the common
codebase by the gate-keepers.



Configure package repositories of pre-built prerequisites for the project
-------------------------------------------------------------------------
Currently $BIOS relies on some Linux-specific features, so the code is
not expected to compile and work in other operating system platforms,
at least not in its entirety. It is not currently a goal of the core
development team to support deployment on more platforms than we can
handle and validate ourselves. Current target devices will be ARM boxes
running an embedded Linux distribution, and the developer workstations
run an assortment of recent PC Linux distributions. The project team's
infrastructure services include an Open Build Service (OBS)-based server
to automatically check out and rebuild the packages with some of our own
and third-party code relevant for our project for some platforms that
are of interest to ourselves.

Alternately, it is possible to rebuild and install the needed packages
from latest sources, as will be detailed below. In particular, many of
these are either absent or critically too-old in the general OS package
repositories, and some projects are being developed in cooperation with
our $BIOS project, so it is essential to use their bleeding-edge as well.

The software packages pre-built for the project can be located in our OBS
build-results repositories, including the following Linux OS releases:

 * http://obs.roz.lab.etn.com:82/Pool:/master/Debian_8.0/
 * http://obs.roz.lab.etn.com:82/Pool:/master/CentOS_7.0/
 * http://obs.roz.lab.etn.com:82/Pool:/master/openSUSE_13.1/

These packages include such build and/or runtime dependencies as
libvariant, iproute2, mariadb, zeromq and so on.

[NOTE]
*NOTE*: See the document 'INSTALL-referenceOS-debian8' (or its derivative
product 'link:INSTALL-referenceOS-debian8.html[]') for a how-to detailing
the reference installation of a Debian 8 x86_64 (VM) to build this project.

Installing an APT package source for Debian 8.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
One of the Linux OSes supported automatically by our OBS service is
Debian 8.0 for "x86_64" and "armhf" architectures (and "all" for some
platform-independent code). This is currently a "testing" variant of
Debian and a moving target in terms of formal support (although seems
recently "frozen" and heading to official stable supported release).
However, automatic dependency handling in OBS should handle refreshed
source code coming from upstream for us.

Automatic setup of OBS as a package source for a supported Debian 8.0
platform with APT package management should work like this (execute
as "root"):
----
:; echo 'deb http://obs.roz.lab.etn.com:82/Pool:/master/Debian_8.0 /' > \
   /etc/apt/sources.list.d/00bios-obs-deb8.list && \
   apt-get update
----
Afterwards the usual installation and update actions with `apt-get install`,
search with `apt-cache search` and so on should work.

Manually fetching and installing packages built for Debian 8.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For weird manual installations of our pre-built packages from OBS to
a system similar to Debian-8.0, consider downloading the current
package files into some temporary storage with this script:
----
#!/bin/sh
for DIR in \
    http://obs.roz.lab.etn.com:82/Pool:/master/Debian_8.0/{amd64,all}/ \
; do
    wget -l1 -np -nd -N -c -r --remove-listing --accept=.deb "$DIR"
done
rm -f *.html*
----
Then you can install the packages with `dpkg -i filename.deb`

To fetch the sources used by OBS for a local rebuild, check this out:
----
#!/bin/sh
wget -l1 -np -nd -N -c -r --remove-listing \
    --accept='.dsc,.tar.xz,.tar.gz,.tar.bz2,.tgz,.tbz,.tbz2,.txz' \
    http://obs.roz.lab.etn.com:82/Pool:/master/Debian_8.0/
----



Installation of the build dependencies from packages
----------------------------------------------------
 * Install iproute-dev development files, version "20120521" or newer,
using your configured system repositories, i.e. with Debian APT:
----
:; apt-get install iproute-dev
----
...or with Suse Zypper:
----
:; zypper install libnetlink-devel
----

[NOTE]
======
*TODO*: Which version of iproute *should* be used -- same release as the
current Linux kernel on a given machine? Specific release? Latest release?)

It seems currently that recent Debian, unlike other distributions, renamed
the 'iproute' package to 'iproute2' and intentionally stripped away its
variant of the 'netlink' library (which our project currently uses, and
which was previously part of 'iproute-dev'). Thus a private build of the
'iproute' software from the sources is needed, and for supported systems
our project provides it in a packaged form. We only need the library (not
the Linux kernel-intimate components), and the API is deemed stable, so
any recent version of 'iproute' should suffice -- the project has been
tested with "20120521" (which is available in Debian wheezy) and that
version is known to work and suffice for us.
======

 * Install TNT project parts:
----
:; apt-get install libtntdb-dev libtntdb3 cxxtools \
   tntnet tntnet-runtime libtntnet10 libtntnet-dev libtnt-dev
----

 * Install NUT project parts:
----
:; apt-get install nut libupsclient1-dev nut-client libupsclient1
----

 * Install ZeroMQ and related project parts:
----
:; apt-get install libsodium libzmq czmq gsl
----

 * Install libVariant (from prerequisites above), i.e.:
----
:; apt-get install libvariant libvariant-dev
----



Configure and build the $BIOS project sources
---------------------------------------------
(Getting the project sources is covered above in this document).

If no `configure` script is available yet (or if it needs to be rebuilt):

 * create or update the `configure` script:
----
:; autoreconf -fiv
----

else (if configure script exists and is acceptable):

 * Configure the build system:
----
:; ./configure
----
 ** An "out-of-tree" build (i.e. to produce binaries and other build
    results for different platforms from the same copy of the source
    codebase) can be triggered in a way similar to this:
----
:; mkdir build
:; cd build && \
   ../configure && \
   make
----
 * Build the sources:
----
:; make
----
 ** When the project becomes large enough, it may make sense to speed
    up the builds using parallelization, i.e. (assuming GNU `make`):
----
:; make -j 4 -k ; make
----
 ** A quieter build can be triggered for GNU `make` with 'V=0' parameter
    (which means that means only 'CC', 'CXX', 'CXXLD' lines will appear -
    which is good at least until you hit some build errors and need more
    verbosity), thus suggesting this command line:
----
:; make V=0 -j 4 -k ; make V=0
----
 * Install the binaries (under a chosen destination root directory
   '/some/path', such as under a temporary filesystem or your homedir):
----
:; make DESTDIR=/some/path install
----


Testing the build
-----------------
The 'Makefile' includes some targets for automated testing, such as

 * `make check` -- this would trigger the compilation of all tests
   (including 'db-tests'), and run all tests except 'db-tests'.
 * `make test-db` -- would trigger the compilation only for database
   tests
 * `./test-db` -- would run the database tests

