<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_PUT.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Implementation of PUT(update) operation on any asset
 */
 #><%pre>
#include <sys/syscall.h>

#include <cxxtools/jsondeserializer.h>
#include "configure_inform.h"
#include "utils_web.h"
#include "inout.h"
#include "helpers.h"
</%pre>
<%cpp>
{
    std::string id = request.getArg("id");
    // convert id from string to number
    http_errors_t errors;
    a_elmnt_id_t asset_id = 0;

    if (!check_element_identifier ("id", id, asset_id, errors)) {
        http_die_error (errors);
    }
    // Read json, transform to csv, use existing functionality
    cxxtools::SerializationInfo si;
    // read json a deserialize it
    try {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);

        auto si_id = si.findMember("id");
        if ( si_id == NULL ) {
            si.addMember("id") <<= id;
        }
        else {
            si_id->setValue(id);
        }
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("bad-request-document", e.what());
    }
    shared::CsvMap cm;
    try{
        cm = shared::CsvMap_from_serialization_info(si);
    }
    catch (const std::invalid_argument &e) {
        log_error (e.what());
        http_die("bad-request-document", e.what());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("internal-error", "See log for more details");
    }

    // PUT /asset is currently used to update an existing device (only asset_element and ext_attributes)
    //      for EMC4J.
    // empty document
    if (cm.cols() == 0 || cm.rows() == 0) {
        http_die("bad-request-document", "Cannot import empty document.");
    }
    if (!cm.hasTitle("type")) {
        http_die("request-param-required", "type");
    }
    if ( cm.get(1, "type") != "device" && cm.get(1, "type") != "datacenter") {
        http_die("request-param-bad", "type", cm.get(1, "type").empty() ? "<empty>" : cm.get(1, "type").c_str(), "device|datacenter");
    }
    // currently we do not need to support updatein these elements
    log_debug ("starting load");
    try {
        // actual update - throws exceptions
        auto row = persist::process_one_asset (cm);

        // here we are -> update was successful
        // ATTENTION:  1. sending messages is "hidden functionality" from user
        //             2. if any error would occur during the sending message,
        //                user will never know if element was actually inserted
        //                or not

        // this code can be executed in multiple threads -> agent's name should
        // be unique at the every moment
        std::string agent_name("TEMP_CONFIGURE_INFORM_AGENT");
        agent_name.append (std::to_string ( static_cast<int> (getpid ()) ))
                  .append (".")
                  .append (std::to_string ( syscall(SYS_gettid) ));
        try{
            send_configure (row.first, row.second, agent_name);
        }
        catch (const std::runtime_error &e) {
            log_error (e.what());
            std::string msg = "Error during configuration sending of asset change notification. Consult system log.";
            http_die("internal-error", msg.c_str());
        }
        // no unexpected errors was detected
        // process results
</%cpp>
{<$$ utils::json::jsonify ("id", std::to_string(row.first.id)) $>}
<%cpp>
        return HTTP_OK;
    }
    catch (const BiosError& e) {
        http_die_idx(e.idx, e.what());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("internal-error", "Consult system log");
    }
}
</%cpp>
