<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file average.ecpp
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \brief  Implementation of REST API call average/min/max
 */
 #><%pre>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <stdexcept>
#include <cstdlib>
#include <algorithm>
#include <ctime>
#include <cxxtools/split.h>
#include <sys/types.h>
#include <sys/syscall.h>

#include "utils.h"
#include "utils++.h"
#include "log.h"
#include "str_defs.h"
#include "utils_ymsg.h"
#include "cleanup.h"
#include "utils_web.h"
#include "helpers.h"
#include <tntdb.h>
#include "dbpath.h"
#include "assets.h"
#include "tntmlm.h"

// Check if value of parameter 'relative' is supported:
//  * No - return false, value of unixtime is not changed
//  * Yes - return true; value of unixtime contains now - (relative expressed in seconds)
//
// Currently supported values of relative: 24h, 7d, 30d
// Expects string relative converted to lowercase.

bool relative_to_unixtime (const std::string& relative, int64_t now, int64_t& unixtime) {
    if (relative.compare ("24h") == 0) {
        unixtime = now - 86400;
        return true;
    }
    else if (relative.compare ("7d") == 0) {
        unixtime = now - 604800;
        return true;
    }
    else if (relative.compare ("30d") == 0) {
        unixtime = now - 2592000;
        return true;
    }
    return false;
}


</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // Input arguments checking
    std::string checked_start_ts;
    std::string checked_end_ts;
    std::string checked_type;
    std::string checked_step;
    std::string checked_source;
    bool checked_ordered = false;
    uint32_t checked_element_id;
    std::string checked_relative;
    {
        std::string start_ts = qparam.param("start_ts");
        std::string end_ts = qparam.param("end_ts");
        std::string type = qparam.param("type");
        std::string step = qparam.param("step");
        std::string source = qparam.param("source");
        std::string element_id = qparam.param("element_id");
        std::string relative = qparam.param("relative");
        std::string ordered = qparam.param("ordered");

        check_regex_text_or_die ("start_ts", start_ts, checked_start_ts, "^([0-9]{14}Z|)$");
        check_regex_text_or_die ("end_ts", end_ts, checked_end_ts, "^([0-9]{14}Z|)$");
        check_regex_text_or_die ("type", type, checked_type, "^(arithmetic_mean|min|max|)$");
        check_regex_text_or_die ("step", step, checked_step, "^([0-9]{1,2}[a-z]|)$");
        check_regex_text_or_die ("source", source, checked_source, "^[-_.@a-z0-9]{0,255}$");
        check_regex_text_or_die ("relative", relative, checked_relative, "^([0-9]{1,2}[a-z]|)$");
        check_element_identifier_or_die ("element_id", element_id, checked_element_id);

        check_regex_text_or_die ("ordered", ordered, ordered, "^(true|false|)$");
        if ( ordered == "true" ) {
            checked_ordered = true;
        }
    }
    int64_t st = -1, end = -1;
    if (checked_relative.empty ()) {
        // check both start_ts and end_ts
        if (checked_start_ts.empty ()) {
            // The message looks strange, but both 'relative' and 'start_ts'
            // parameters are empty here!
            // possible compinations:
            //      ( relative != "" ) XOR ( start_ts != "" AND end_ts != "" )
            http_die ("request-param-required", "start_ts or relative");
        }
        st = datetime_to_calendar (checked_start_ts.c_str ());
        if (st == -1) {
            http_die ("request-param-bad", "start_ts", std::string ("'").append (checked_start_ts).append ("'").c_str (), "format 'YYYYMMDDhhmmssZ");
        }
        if (checked_end_ts.empty ()) {
            http_die ("request-param-required", "end_ts");
        }
        end = datetime_to_calendar (checked_end_ts.c_str ());
        if (end == -1) {
            http_die ("request-param-bad", "end_ts", std::string ("'").append (checked_end_ts).append ("'").c_str (), "format 'YYYYMMDDhhmmssZ");
        }

        // check that start_ts < end_ts
        if (end <= st) {
            http_die ("parameter-conflict",
                std::string ("Start timestamp '").append (checked_start_ts).append ("' is greater than end timestamp '").append (checked_end_ts).append ("'.").c_str ());
        }
    }
    else {
        // check value of relative parameter
        std::transform (checked_relative.begin(), checked_relative.end(), checked_relative.begin(), ::tolower);
        int64_t now = (int64_t) time (NULL);
        if (!relative_to_unixtime (checked_relative, now, st)) {
            http_die ("request-param-bad", "relative", std::string ("'").append (checked_relative).append ("'").c_str (),
                      "one of the following values: '24h', '7d', '30d'.");
        }
        end = (int64_t) time (NULL);
    }

    log_debug ("st = '%" PRIi64"', end = '%" PRIi64"'", st, end);

    // type is optional, default type is arithmetic average
    if (checked_type.empty ()) {
        checked_type.assign (AVG_TYPES[0]);
    }
    else if (!is_average_type_supported (checked_type.c_str ())) {
        http_die ("request-param-bad", "type",
            std::string ("'").append (checked_type).append ("'").c_str (),
            std::string ("one of the following values: [").append (utils::join (AVG_TYPES, AVG_TYPES_SIZE, ", ")).append("].").c_str ());
    }

    // step
    if (checked_step.empty ()) {
        http_die ("request-param-required", "step");
    }
    if (!is_average_step_supported (checked_step.c_str ())) {
        http_die ("request-param-bad", "step",
            std::string ("'").append (checked_step).append ("'").c_str (),
            std::string ("one of the following values: [").append (utils::join (AVG_STEPS, AVG_STEPS_SIZE, ", ")).append("].").c_str ());
    }

    // source
    if (checked_source.empty()) {
        http_die ("request-param-required", "source");
    }

    std::string element_name;
    try{
        tntdb::Connection conn = tntdb::connectCached(url);

        auto basic_ret = persist::select_asset_element_web_byId(conn, checked_element_id);
        if ( basic_ret.status == 0 ) {
            http_die ("element-not-found");
        }
        element_name = basic_ret.item.name;
    }
    catch (const  std::exception &e ) {
        http_die ("internal-error", e.what());
    }
    // connect to malamute
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("mlm_pool.get () failed.");
        http_die ("internal-error", "mlm_pool.get () failed.");
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *msg = zmsg_new();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    zmsg_addstr (msg, "GET");
    zmsg_addstr (msg, element_name.c_str());
    zmsg_addstr (msg, checked_source.c_str());
    zmsg_addstr (msg, checked_step.c_str());
    zmsg_addstr (msg, checked_type.c_str());
    zmsg_addstr (msg, std::to_string(st).c_str());
    zmsg_addstr (msg, std::to_string(end).c_str());
    zmsg_addstr (msg, (checked_ordered ? "1" : "0") );

    rv = client->sendto ("agent-ms", "aggregated data", 1000, &msg);
    if (rv == -1) {
        zuuid_destroy (&uuid);
        log_critical ("Cannot send message to agent-ms");
        mlm_client_destroy (&client);
        http_die ("internal-error", "mlm_client_sendto failed.");
    }    

    zmsg_t *recv_msg = client->recv (zuuid_str_canonical (uuid), 5);
    zuuid_destroy (&uuid);
    if (!msg) {
        log_critical ("client->recv (timeout = '5') returned NULL");
        http_die ("internal-error", "client->recv () returned NULL");
    }

    char *frame = zmsg_popstr (recv_msg);
    if (streq (frame, "ERROR")) {
        zstr_free (&frame);
        frame = zmsg_popstr (recv_msg);
        zmsg_destroy (&recv_msg);
        if (frame) {
            if (streq (frame, "BAD_REQUEST")) {
                zstr_free (&frame);
                std::string die = "Data for type = '" + checked_type + "', step = '" + checked_step +
                "', source = '" + checked_source + "', element_id = '" + std::to_string (checked_element_id) + "' ";
                http_die ("not-found", die.c_str ());
            }
            log_info ("error frame == '%s'", frame);
            http_die ("internal-error", frame);
        }
        else
            http_die ("internal-error");
    }

    if (streq (frame, "OK")) {
        zstr_free (&frame); 
        // now we are going to set up the head of the response
        char *element_rep = zmsg_popstr (recv_msg);
        char *source_rep = zmsg_popstr (recv_msg);
        char *step_rep = zmsg_popstr (recv_msg);
        char *type_rep = zmsg_popstr (recv_msg);
        char *start_date_rep = zmsg_popstr (recv_msg);
        char *end_date_rep = zmsg_popstr (recv_msg);
        char *ordered = zmsg_popstr (recv_msg);
        char *units_rep = zmsg_popstr (recv_msg);
</%cpp>
{
        <$$ utils::json::jsonify ("units", units_rep) $>,
        <$$ utils::json::jsonify ("source", source_rep) $>,
        <$$ utils::json::jsonify ("step", step_rep) $>,
        <$$ utils::json::jsonify ("type", type_rep) $>,
        <$$ utils::json::jsonify ("element_id", std::to_string(checked_element_id)) $>,
        <$$ utils::json::jsonify ("start_ts", start_date_rep) $>,
        <$$ utils::json::jsonify ("end_ts", end_date_rep) $>,
        "data":[
<%cpp>
        // first of all, need to clean up
        zstr_free (&element_rep);
        zstr_free (&source_rep);
        zstr_free (&step_rep);
        zstr_free (&type_rep);
        zstr_free (&start_date_rep);
        zstr_free (&units_rep);
        zstr_free (&ordered);
        // now we are going to fill in data
        while  ( zmsg_size (recv_msg) >= 2 ) {
            char *timestamp = zmsg_popstr (recv_msg);
            char *value = zmsg_popstr (recv_msg);
            </%cpp>
{
    "value": <$$ value $>,
    "timestamp": <$$ timestamp $>,
    "scale": 0
} <$$ zmsg_size (recv_msg) != 0 ? "," : "" $>
            <%cpp>
            zstr_free (&value);
            zstr_free (&timestamp);
        }
</%cpp>
        ]
}
<%cpp>
    }
    zmsg_destroy (&recv_msg);
</%cpp>
