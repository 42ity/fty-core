<%pre>
#include <cxxtools/split.h>
#include <cxxtools/jsondeserializer.h>
#include <vector>
#include <string>

#include "subprocess.h"

using namespace shared;

std::string real_out(std::string in, bool key_value = true) {
    std::vector<std::string> spl;
    printf("%s\n", in.c_str());
    cxxtools::split("\n", in, std::back_inserter(spl));
    if(spl.size() != 3)
        return "";
    auto pos = spl[1].find_first_of("=");
    if(pos == std::string::npos) {
        if(key_value)
            return "";
        return spl[1];
    }
    return spl[1].substr(pos + 2);
}

</%pre>
<%thread scope="global">
// TODO: Figure out how to make it work without -e
Argv exe = { "augtool", "-e" };
SubProcess augtool(exe, SubProcess::STDOUT_PIPE | SubProcess::STDIN_PIPE);
</%thread>
<%cpp>
std::string command;
std::string nil;
std::string iface = request.getArg("iface");
int not_interested;
augtool.run();
command = "help\n";
not_interested = write(augtool.getStdin(), command.c_str(), command.length());
nil = wait_read_all(augtool.getStdout());
if(!augtool.isRunning()) {
</%cpp>
{ "error": "Can't start augtool" }
<%cpp>
}
std::string address;
command = "match /files/etc/network/interfaces/iface[*] " + iface + "\n";
not_interested = write(augtool.getStdin(), command.c_str(), command.length());
address = real_out(wait_read_all(augtool.getStdout()), false);
if(address.empty()) {
</%cpp>
{ "error": "No configuration for interface <$ iface $> found" }
<%cpp>
    return HTTP_NOT_FOUND;
}
if(request.getMethod() == "PUT") {
    std::stringstream input(request.getBody(), std::ios_base::in);
    cxxtools::SerializationInfo si;
    cxxtools::SerializationInfo rsi;
    cxxtools::JsonDeserializer deserializer(input);
    deserializer.deserialize(si);
    cxxtools::SerializationInfo* it = NULL;
    std::string val;
    rsi = si.getMember(iface);

#define AUG_SET(NAME) \
    printf("Searching for " NAME " in %s\n",rsi.name().c_str()); \
    it = rsi.findMember(NAME); \
    if(it != NULL) { \
        printf("Found " NAME "\n"); \
        it->getValue(val); \
        command = "set " + address + "/" NAME " " + val + "\n"; \
        not_interested = write(augtool.getStdin(), command.c_str(), command.length()); \
        nil = wait_read_all(augtool.getStdout()); \
        printf("%s", nil.c_str()); \
    }

    AUG_SET("method");
    AUG_SET("address");
    AUG_SET("netmask");
    AUG_SET("gateway");
}

std::string method, ip, netmask, gateway;

#define AUG_GET(NAME, VAL) \
    command = "get " + address + "/" NAME "\n"; \
    not_interested = write(augtool.getStdin(), command.c_str(), command.length()); \
    VAL = real_out(wait_read_all(augtool.getStdout()));

AUG_GET("method", method);
AUG_GET("address", ip);
AUG_GET("netmask", netmask);
AUG_GET("gateway", gateway);

</%cpp>
{ "<$ iface $>":
    {
        "method": "<$ method $>"
% if(!ip.empty()) {
      , "address": "<$ ip $>"
% }
% if(!netmask.empty()) {
      , "netmask": "<$ netmask $>"
% }
% if(!gateway.empty()) {
      , "gateway": "<$ gateway $>"
% }
    }
}
