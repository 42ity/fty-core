<%pre>
#include <string>
#include <stdexcept>
#include <cxxtools/jsondeserializer.h>
#include <fstream>

#include <cstring>

#include "log.h"
#include "db/inout.h"
#include "bios-magic.h"
#include "bios_agent.h"
#include "cleanup.h"
#include "str_defs.h"
#include "agents.h"

</%pre>

<%cpp>
if (request.getMethod() != "POST") {
    return HTTP_METHOD_NOT_ALLOWED;
}

//HARDCODED limit: can't import things larger than 128K
// this prevents DoS attacks against the box - can be raised if needed
// don't forget internal processing is in UCS-32, therefor the
// real memory requirements are ~640kB
if (request.getContentSize() > 128*1024) {
    </%cpp>
    {
        "error" : "Content size too big, maximum size is 128 kB"
    }
    <%cpp>
        return HTTP_BAD_REQUEST;
}

// http://www.tntnet.org/howto/upload-howto.html
const tnt::Multipart& mp = request.getMultipart();
tnt::Multipart::const_iterator it = mp.find("assets");
if (it == mp.end()) {
    </%cpp>
    {
        "error" : "file 'assets' not found!"
    }
    <%cpp>
        return HTTP_BAD_REQUEST;
}
try {
    std::string path_p;
    shared::convert_file(it->getBodyBegin(), it->getBodyEnd(), path_p);
    std::ifstream inp{path_p};
    std::vector<db_a_elmnt_t> okRows{};
    std::map<int,std::string> failRows{};
    persist::load_asset_csv(inp, okRows, failRows);
    inp.close();

    log_debug ("ok size is %zu", okRows.size());
    log_debug ("fail size is %lu", failRows.size());
    
    // TODO: vybrat jmeno agenta
    std::string agent_name("MY_AGENT");
    bios_agent_t *agent = bios_agent_new (MLM_ENDPOINT, agent_name.c_str ());
    if ( agent == NULL )
    {
</%cpp>
        {
            "msg" : "bios_agent_new () failed."
        }
<%cpp>
        return HTTP_INTERNAL_SERVER_ERROR;
    }

    // TODO get rid of hardcoded constants
    uint8_t action_type = 1; 
    // TODO rename  m
    for ( auto &m : okRows )
    {
        ymsg_t *msg = bios_asset_encode (m.name.c_str(), m.type_id, m.parent_id, m.status.c_str(), m.priority, action_type);
        if ( msg == NULL )
        {
</%cpp>
        {
            "msg" : "bios_asset_encode () failed."
        }
<%cpp>
            bios_agent_destroy (&agent);
            return HTTP_INTERNAL_SERVER_ERROR;
        }
        const std::string topic = "configure@" + m.name;
        bios_agent_set_producer (agent, bios_get_stream_main());
        int rv = bios_agent_send (agent, topic.c_str(), &msg);
        if ( rv != 0 )
        {
</%cpp>
        {
            "msg" : "bios_agent_send () failed."
        }
<%cpp>
            bios_agent_destroy (&agent);
            return HTTP_INTERNAL_SERVER_ERROR;
        }
    }
    bios_agent_destroy (&agent);
</%cpp>
{
    "imported_lines" : <$$ okRows.size() $>,
    "errors" : [
<%cpp>
    size_t cnt = 0;
    for ( auto &m : failRows )
    {
        cnt++;
</%cpp>
            [ <$$ m.first$>, "<$$ m.second.c_str()$>"]<$ cnt != failRows.size() ? ',' : ' ' $>
%   }
    ]
}
<%cpp>
}
catch (const std::logic_error &e) {
</%cpp>
{
    "error" : "<$$ e.what() $>"
}
<%cpp>
    return HTTP_BAD_REQUEST;
}
catch (const std::runtime_error &e) {
</%cpp>
{
    "error" : "<$$ e.what() $>"
}
<%cpp>
    return HTTP_INTERNAL_SERVER_ERROR;
}
</%cpp>
