<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_import.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \brief  REST API call for import assets from csv file
 */
 #><%pre>
#include <string>
#include <stdexcept>
#include <cxxtools/jsondeserializer.h>
#include <fstream>
#include <sys/syscall.h>
#include <cstring>

#include "log.h"
#include "db/inout.h"
#include "bios-magic.h"
#include "configure_inform.h"
#include "utils_web.h"
</%pre>
<%cpp>
if (request.getMethod() != "POST") {
    http_die("method-not-allowed", request.getMethod().c_str() );
}

//HARDCODED limit: can't import things larger than 128K
// this prevents DoS attacks against the box - can be raised if needed
// don't forget internal processing is in UCS-32, therefore the
// real memory requirements are ~640kB
// Content size = body + something. So max size of body is about 125k
if (request.getContentSize() > 128*1024) {
    http_die("content-too-big", "125k");
}

// http://www.tntnet.org/howto/upload-howto.html
const tnt::Multipart& mp = request.getMultipart();
tnt::Multipart::const_iterator it = mp.find("assets");
if (it == mp.end()) {
    http_die("request-param-required", "file=assets");
}

std::string path_p;
try {
    shared::convert_file(it->getBodyBegin(), it->getBodyEnd(), path_p);
}
catch (const std::logic_error &e) {
    LOG_END_ABNORMAL(e);
    if (!path_p.empty())
        ::unlink(path_p.c_str());
    http_die("request-param-bad", e.what());
}
catch (const std::runtime_error &e) {
    LOG_END_ABNORMAL(e);
    if (!path_p.empty())
        ::unlink(path_p.c_str());
    http_die("internal-error", e.what());
}
catch (const std::exception &e) {
    LOG_END_ABNORMAL(e);
    if (!path_p.empty())
        ::unlink(path_p.c_str());
    http_die("internal-error");
}

try{
    std::ifstream inp{path_p};
    std::vector <std::pair<db_a_elmnt_t,persist::asset_operation>> okRows{};
    std::map<int,std::string> failRows{};

    auto touch_fn = [&request]() {
        request.touch ();};
    persist::load_asset_csv(inp, okRows, failRows, touch_fn);

    inp.close();
    ::unlink(path_p.c_str());

    log_debug ("ok size is %zu", okRows.size());
    log_debug ("fail size is %lu", failRows.size());

    // ACE: TODO
    // ATTENTION:  1. sending messages is "hidden functionality" from user
    //             2. if any error would occur during the sending message,
    //                user will never know what was actually imported or not
    // in theory
    // this code can be executed in multiple threads -> agent's name should
    // be unique at the every moment
    std::string agent_name("TEMP_CONFIGURE_INFORM_AGENT");
    agent_name.append (std::to_string ( static_cast<int> (getpid ()) ))
              .append (".")
              .append (std::to_string ( syscall(SYS_gettid) ));
    send_configure (okRows, agent_name);
</%cpp>
{
    "imported_lines" : <$$ okRows.size() $>,
    "errors" : [
<%cpp>
    size_t cnt = 0;
    for ( auto &oneRow : failRows )
    {
        cnt++;
</%cpp>
            [ <$$ oneRow.first$>, "<$$ oneRow.second.c_str()$>"]<$$ cnt != failRows.size() ? ',' : ' ' $>
%   }
    ]
}
<%cpp>
}
catch (const BiosError &e) {
    if (!path_p.empty())
        ::unlink(path_p.c_str());
    http_die_idx(e.idx, e.what());
}
catch (const std::exception &e) {
    LOG_END_ABNORMAL(e);
    if (!path_p.empty())
        ::unlink(path_p.c_str());
    http_die("internal-error");
}
</%cpp>
