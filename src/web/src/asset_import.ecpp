<%pre>
#include <string>
#include <stdexcept>
#include <cxxtools/jsondeserializer.h>
#include <fstream>

#include <cstring>

#include "log.h"
#include "db/inout.h"
#include "bios-magic.h"
#include "configure_inform.h"

</%pre>

<%cpp>
if (request.getMethod() != "POST") {
    return HTTP_METHOD_NOT_ALLOWED;
}

//HARDCODED limit: can't import things larger than 128K
// this prevents DoS attacks against the box - can be raised if needed
// don't forget internal processing is in UCS-32, therefore the
// real memory requirements are ~640kB
if (request.getContentSize() > 128*1024) {
    </%cpp>
    {
        "error" : "Content size too big, maximum size is 128 kB"
    }
    <%cpp>
        return HTTP_BAD_REQUEST;
}

// http://www.tntnet.org/howto/upload-howto.html
const tnt::Multipart& mp = request.getMultipart();
tnt::Multipart::const_iterator it = mp.find("assets");
if (it == mp.end()) {
    </%cpp>
    {
        "error" : "file 'assets' not found!"
    }
    <%cpp>
        return HTTP_BAD_REQUEST;
}
    std::string path_p;
try {
    shared::convert_file(it->getBodyBegin(), it->getBodyEnd(), path_p);
    std::ifstream inp{path_p};
    std::vector<db_a_elmnt_t> okRows{};
    std::map<int,std::string> failRows{};
    persist::load_asset_csv(inp, okRows, failRows);
    inp.close();
    ::unlink(path_p.c_str());

    log_debug ("ok size is %zu", okRows.size());
    log_debug ("fail size is %lu", failRows.size());

    // ACE: TODO
    // ATTENTION:  1. sending messages is "hidden functionality" from user
    //             2. if any error would occur during the sending message,
    //                user will never know what was actually imported or not
    // TODO get rid of hardcoded constants
    uint8_t action_type = 1;
    std::string agent_name("TEMP_CONFIGURE_INFORM_AGENT");
    send_configure (okRows, action_type, agent_name);
</%cpp>
{
    "imported_lines" : <$$ okRows.size() $>,
    "errors" : [
<%cpp>
    size_t cnt = 0;
    for ( auto &oneRow : failRows )
    {
        cnt++;
</%cpp>
            [ <$$ oneRow.first$>, "<$$ oneRow.second.c_str()$>"]<$ cnt != failRows.size() ? ',' : ' ' $>
%   }
    ]
}
<%cpp>
}
catch (const std::logic_error &e) {
    if (!path_p.empty())
        ::unlink(path_p.c_str());
</%cpp>
{
    "error" : "<$$ e.what() $>"
}
<%cpp>
    return HTTP_BAD_REQUEST;
}
catch (const std::runtime_error &e) {
</%cpp>
{
    "error" : "<$$ e.what() $>"
}
<%cpp>
    return HTTP_INTERNAL_SERVER_ERROR;
}
</%cpp>
