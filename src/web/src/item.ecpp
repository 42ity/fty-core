<%pre>
#include <czmq.h>

#include "log.h"
#include "data.h"

</%pre>
<%thread scope="global">
asset_manager asset_mgr;
</%thread>

<%cpp>
{
    // Check URL validity
    std::string id = request.getArg("id");
    if ( id.empty() ) {
</%cpp>
        { "error":"invalid_url" }
<%cpp>
        return HTTP_BAD_REQUEST;
    }
    // Get data
    auto tmp = asset_mgr.get_item1(id);
    if ( tmp.status == 0 )
    {
        switch ( tmp.errsubtype )
        {
            case DB_ERROR_NOTFOUND:
</%cpp>
                { "error":"item_not_found" }
<%cpp>
                return HTTP_NOT_FOUND;
            case DB_ERROR_BADINPUT:
</%cpp>
                { "error":"bad_input" }
<%cpp>
                return HTTP_BAD_REQUEST;
            case DB_ERROR_INTERNAL:
</%cpp>
                { "error":"internal_error" }
<%cpp>
                return HTTP_INTERNAL_SERVER_ERROR;
            default:
</%cpp>
                { "error":"unknown error" }
<%cpp>
                return HTTP_INTERNAL_SERVER_ERROR;
        }
    }
    // Prepare the reply
</%cpp>
{
      "id": "<$$ tmp.item.basic.id $>"
    , "name": "<$$ tmp.item.basic.name $>"
    , "status": "<$$ tmp.item.basic.status $>"
%   if ( tmp.item.basic.bc == 0 )
%   {
    , "business_critical": "no"
%   }
%   else
%   {
    , "business_critical": "yes"
%   }
    , "priority": "P<$$ tmp.item.basic.priority $>"
<%cpp>
    // if element is located, then show the location
    if ( tmp.item.basic.parent_id != 0 )
    {
</%cpp>
    , "location_uri":"<$$ "/api/v1/asset/" +
                   asset_mgr.byte_to_type(tmp.item.basic.parent_type_id) + "/" +
                   std::to_string (tmp.item.basic.parent_id) $>"
%   }
    , "groups": [
<%cpp>
    // every element (except groups) can be placed in some group
    if ( !tmp.item.groups.empty() )
    {
        uint32_t group_count = tmp.item.groups.size();
        uint32_t i = 1;
        for ( auto &oneGroup : tmp.item.groups )
        {
</%cpp>
        "/api/v1/asset/group/<$$ oneGroup $>"<? i != group_count ? "," ?>
<%cpp>
            i++;
        }   
    }
</%cpp>
    ]
<%cpp>
    // Device is special element with more attributes
    if ( tmp.item.basic.type_id == asset_type::DEVICE )
    {
</%cpp>
    , "type": "<$$ tmp.item.basic.subtype_name $>"
<%cpp>
        // from csv import ip.1, ip.2 ... can appear, but for now deal with one
        auto it = tmp.item.ext.find("ip.1");
        if ( it != tmp.item.ext.end() )
        {
</%cpp>
    , "ip":"<$$ it->second.first $>"
<%cpp>
            tmp.item.ext.erase(it);
        }
        
        it = tmp.item.ext.find("hostname.1");
        if ( it != tmp.item.ext.end() )
        {
</%cpp>
    , "hostname":"<$$ it->second.first $>"
<%cpp>
            tmp.item.ext.erase(it);
        }
        
        it = tmp.item.ext.find("fdqn.1");
        if ( it != tmp.item.ext.end() )
        {
</%cpp>
    , "fdqn":"<$$ it->second.first $>"
<%cpp>
            tmp.item.ext.erase(it);
        }

        it = tmp.item.ext.find("mac.1");
        if ( it != tmp.item.ext.end() )
        {
</%cpp>
    , "mac":"<$$ it->second.first $>"
<%cpp>
            tmp.item.ext.erase(it);
        }
</%cpp>
    , "powers": [
<%cpp>
        if ( !tmp.item.powers.empty() )
        {
            uint32_t power_count = tmp.item.powers.size();
            uint32_t i = 1;
            for ( auto &oneLink : tmp.item.powers )
            {
</%cpp>
        {"src_uri":"/api/v1/asset/device/<$$ oneLink.src_id $>"
<%cpp>
                if ( !oneLink.src_socket.empty() )
                {
</%cpp>
        ,"src_socket":"<$$ oneLink.src_socket $>"
<%cpp>
                }
                if ( !oneLink.dest_socket.empty() )
                {
</%cpp>
        ,"dest_socket":"<$$ oneLink.dest_socket $>"
%               }
        }<? i != power_count ? "," ?>
<%cpp>
                i++;
            }
        }
</%cpp>
    ]
<%cpp>
    }

    if ( tmp.item.basic.type_id == asset_type::GROUP )
    {
        auto it = tmp.item.ext.find("type");
        if ( it != tmp.item.ext.end() )
        {
</%cpp>
    , "type":"<$$ it->second.first $>"
<%cpp>
            tmp.item.ext.erase(it);
        }
    }
    if ( !tmp.item.ext.empty() )
    {
</%cpp>
    , "ext" : [
<%cpp>
        uint32_t ext_count = tmp.item.ext.size();
        uint32_t i = 1;
        for ( auto &oneExt : tmp.item.ext )
        {
</%cpp>
        {"<$$ oneExt.first $>":"<$$ oneExt.second.first $>","read_only": <$$ oneExt.second.second? "true":"false" $> }<? i != ext_count ? "," ?>
<%cpp>
            i++;
        }
</%cpp>
    ]
%   }
}
% }
