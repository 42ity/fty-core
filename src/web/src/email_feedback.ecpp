<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file email_feedback.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Sends feedback email. 
 */
 #><%pre>
#include "helpers.h"
#include "tntmlm.h"
#include "subprocess.h"
#include <stdlib.h>
#include <sys/types.h>
#include <sys/syscall.h>
#include <fstream>
#include <libgen.h> //POSIX version of basename!!

// encode GET message for smtp agent         
static zmsg_t*
s_smtp_GET_message (
        const char* to,
        const char* reply,
        const char* message,
        const char* context,
        bool attach_system_state,
        bool participate,
        zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));

    zmsg_addstr(msg, to);
    char *subject = zsys_sprintf ("IPC feedback context=%s", context);
    zmsg_addstr (msg, subject);
    zstr_free (&subject);
    zmsg_addstr(msg, message);

    zhash_t *headers = zhash_new ();
    zhash_insert (headers, "Reply-To", (void*) reply);
    zhash_insert (headers, "X-Eaton-IPC-uuid", (void*) zuuid_str_canonical (uuid));
    zhash_insert (headers, "X-Eaton-IPC-context", (void*) context);
    zhash_insert (headers, "X-Eaton-IPC-participate-in-feedback", (void*) (participate ? "yes" : "no"));
    utils::email::x_headers (headers);

    zframe_t *frame = zhash_pack (headers);
    zmsg_add (msg, frame);
    zhash_destroy (&headers);

    if (attach_system_state) {
        log_info ("there's no tool to produce system state report, don't do anything yet");
    }
    return msg;
}

static void
s_rm_rf (const std::vector <std::string>& paths, char **dir_p)
{
    for (const auto& path : paths)
        unlink (path.c_str ());

    if (*dir_p) {
        char *dir = *dir_p;
        rmdir (dir);
        zstr_free (&dir);
        *dir_p = NULL;
    }
}

static off_t
s_max_attachment_size () {
    off_t ret = 1024 * 1024;
    zconfig_t *config = zconfig_load ("/etc/agent-smtp/bios-agent-smtp.conf");
    if (!config)
        return ret;

    zconfig_t *smtp = zconfig_locate (config, "smtp");
    if (smtp && zconfig_get (smtp, "max_size", NULL)) {
        errno = 0;
        char *endptr;
        off_t foo = strtoll (zconfig_get (smtp, "max_size", NULL), &endptr, 10);
        if (errno != 0)
            zsys_warning ("smtp/max_size %s it not a number", zconfig_get (smtp, "max_size", NULL));
        else
            ret = foo;
    }
    zconfig_destroy (&config);
    return ret;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,         "C"},
            {BiosProfile::Dashboard,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string checked_to;
    std::string checked_reply;
    std::string checked_message;
    std::string checked_context;
    bool attach_system_state = false;
    bool participate = false;
    unsigned _timeout = 60;
    {

        std::string to = qparam.param ("to");
        if (to.empty ()) {
            const char* c_to = getenv ("BIOS_FEEDBACK_EMAIL");
            if (c_to)
                to = std::string {c_to};
            else
                to = std::string {"EatonProductFeedback@Eaton.com"};
        }

        if (to.find ('@', 0) == std::string::npos)
            http_die ("request-param-bad", "to", to.c_str (), "valid email address");

        checked_to = to;

        std::string _reply = qparam.param ("reply");

        if (_reply.empty ())
            http_die ("request-param-required", "reply");

        if (_reply.find ('@', 0) == std::string::npos)
            http_die ("request-param-bad", "reply", _reply.c_str (), "valid email address");

        checked_reply = _reply;

        std::string message = qparam.param ("message");
        if (message.empty ())
            http_die ("request-param-required", "message");

        checked_message = message;

        std::string context = qparam.param ("context");
        if (context.empty ())
            http_die ("request-param-required", "context");

        checked_context = context;

        std::string sys_state = qparam.param ("attach_system_state");
        if (sys_state == "yes")
            attach_system_state = true;

        std::string sys_participate = qparam.param ("participate");
        if (sys_participate == "yes")
            participate = true;


        std::string _stimeout = qparam.param ("_timeout");

        try {
            _timeout = std::stoi (_stimeout);
        }
        catch (const std::exception& e) {
            //pass
        }
    }
    
    char *temp_dir = zsys_sprintf ("%s/.XXXXXX",
            getenv ("SPOOL_DIR") ? getenv ("SPOOL_DIR") : "/tmp");
    temp_dir = mkdtemp (temp_dir);
    chmod (temp_dir, S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH);
    if (!temp_dir)
        http_die ("internal-error", "Can't create temporary directory");

    // http://www.tntnet.org/howto/upload-howto.html
    const tnt::Multipart& mp = request.getMultipart();
    std::vector <std::string> paths {};
    off_t current_size = 0;
    off_t max_size = s_max_attachment_size ();
    for (const auto& it: mp) {

        current_size += it.getSize ();
        if (current_size > max_size) {
            s_rm_rf (paths, &temp_dir);
            http_die (
                "internal-error",
                "Attachment size limit (%jd) have been exceeded (%jd)",
                (intmax_t) max_size,
                (intmax_t) current_size
                );
        }

        char * filename = strdup (it.getFilename ().c_str ());
        std::string path = temp_dir + std::string ("/") + std::string (basename (filename));
        zstr_free (&filename);

        {
        std::ofstream out_file (path);
        if (!out_file) {
            s_rm_rf (paths, &temp_dir);
            http_die ("internal-error", "Cannot process attachment");
        }
        
        // more efficient is the use of iterators:
        for (tnt::Part::const_iterator pi = it.getBodyBegin(); pi != it.getBodyEnd(); ++pi)
            out_file << *pi;

        out_file.flush ();
        out_file.close ();
        chmod (path.c_str (), S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
        }
        paths.push_back (path);
    }

    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("Error: mlm_pool.get () failed.");
        s_rm_rf (paths, &temp_dir);
        http_die ("internal-error", "mlm_pool.get () failed.");
    }

    // send message
    zuuid_t *uuid = zuuid_new ();
    zmsg_t *send = s_smtp_GET_message (
            checked_to.c_str (),
            checked_reply.c_str (),
            checked_message.c_str (),
            checked_context.c_str (),
            attach_system_state,
            participate,
            uuid);
    for (const std::string& path: paths)
        zmsg_addstr (send, path.c_str ());
    int rv = client->sendto ("agent-smtp", "SENDMAIL", 1000, &send);

    if (rv == -1)
    {
        log_critical (
                    "Error: client->sendto (address = '%s', subject = '%s', timeout = 1000) failed.",
                        "agent-smtp", "SENDMAIL");
        s_rm_rf (paths, &temp_dir);
        http_die ("internal-error", "client->sendto () failed");
    }

    zmsg_t *recieve = client->recv (zuuid_str_canonical (uuid) , _timeout);
    zuuid_destroy (&uuid);
    if (!recieve)
    {
        std::string msg = "Error: client->recv (timeout = '" + std::to_string (_timeout) + "') returned NULL";
        log_error (msg.c_str ());
        s_rm_rf (paths, &temp_dir);
        http_die ("internal-error", msg.c_str ());
    }

    char *err_code = zmsg_popstr (recieve);
    char *err_message = zmsg_popstr (recieve);
    const char *msg_subject = client->subject();
    std::string status;
    s_rm_rf (paths, &temp_dir);
  
    if (streq (msg_subject, "SENDMAIL-OK"))
    {
         status = "Succeeded"; 
    }   
    else
    if (streq (msg_subject, "SENDMAIL-ERR"))
    {
        status = "Failed";
    }
    else
    {
        status = "Failed";
        log_critical ("Error: message recieved with invalid subject.");
        http_die ("internal-error", "client->recv () invalid message subject");
    }
  
    zmsg_destroy(&recieve);
    zmsg_destroy(&send);
</%cpp>
{
    "test_status" :
    {
        "status" : "<$ status $>",
        "error_code" : <$ err_code $>,
        "reason" : "<$ utils::json::escape (err_message) $>"
    }
}
<%cpp>

    zstr_free(&err_code);
    zstr_free(&err_message);
</%cpp>


