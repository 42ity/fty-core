<%pre>
#include <stdio.h>
#include <stdbool.h>
#include <ifaddrs.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <linux/ethtool.h>
#include <linux/sockios.h>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <string.h>
#include <unistd.h>
#include <cxxtools/regex.h>

struct iface {
   std::vector<std::string> ip;
   std::string state;
   std::string cable;
   std::string mac;
};

std::set<std::string> get_ifaces() {
   std::set<std::string> ret;
   struct ifaddrs* start = NULL;
   if(getifaddrs(&start) != 0)
      return ret;
   struct ifaddrs* it = start;
   while(it != NULL) {
      ret.insert(it->ifa_name);
      it = it->ifa_next;
   }
   return ret;
}

iface get_iface(std::string iface) {
   struct iface ret;
   struct ifaddrs* start = NULL;
   if(getifaddrs(&start) != 0)
      return ret;
   struct ifaddrs* it = start;
   while(it != NULL) {
      if(it->ifa_name != iface) {
         it = it->ifa_next;
         continue;
      }
      ret.state = (it->ifa_flags & IFF_UP) ? "up" : "down";

      struct ifreq ifr;
      struct ethtool_value edata;

      memset(&ifr, 0, sizeof(ifr));
      strncpy(ifr.ifr_name, it->ifa_name, sizeof(ifr.ifr_name)-1);

      edata.cmd = ETHTOOL_GLINK;

      int fd = socket(PF_INET, SOCK_DGRAM, 0);
      if(ret.mac.empty() && ioctl(fd, SIOCGIFHWADDR, &ifr) != -1) {
         char buff[3];
         memset(buff, 0, sizeof buff);
         for(int i = 0; i < 6; ++i) {
            if(!ret.mac.empty()) {
               ret.mac += ":";
            }
            sprintf(buff, "%02x", (unsigned char) ifr.ifr_addr.sa_data[i]);
            ret.mac += buff;
         }
      }

      ifr.ifr_flags = it->ifa_flags | IFF_UP;
      if((it->ifa_flags & IFF_UP) || (ioctl(fd, SIOCSIFFLAGS, &ifr) != -1)) {
         // To detect link interface has to be up for some time
         if((it->ifa_flags & IFF_UP) == 0)
            sleep(5);
         ifr.ifr_data = (caddr_t) &edata;
         if(ioctl(fd, SIOCETHTOOL, &ifr) != -1) {
            ret.cable = edata.data ? "in" : "out";
         }
         if((it->ifa_flags & IFF_UP) == 0) {
            ifr.ifr_data = NULL;
            ifr.ifr_flags = it->ifa_flags;
            ioctl(fd, SIOCSIFFLAGS, &ifr);
         }
      } else {
         ret.cable = "unknown";
      }
      close(fd);

      if(it->ifa_addr->sa_family == AF_INET) {
         ret.ip.push_back(inet_ntoa(((struct sockaddr_in*)(it->ifa_addr))->sin_addr));
      }
      it = it->ifa_next;
   }
   freeifaddrs(start);
   return ret;
}
</%pre>
<%cpp>
// Are we asked to just list possible configurations?
cxxtools::Regex rex("^.*/ifaces$");
if(rex.match(request.getUrl())) {
    bool first = true;
</%cpp>
{ "ifaces": [
%   for(auto i: get_ifaces()) {
    <$ first ? "  " : ", " $>"<$ i $>"
%       first = false;
%   }
] }
<%cpp>
    return HTTP_OK;
}
std::string iface = request.getArg("iface");
auto dta = get_iface(iface);
if(dta.mac.empty()) {
</%cpp>
{ "error": "Can't get configuration of interface '<$ iface $>', possibly typo?" }
<%cpp>
    return HTTP_NOT_FOUND;
}
bool first = true;
</%cpp>
{ "<$ iface $>": {
    "ether": "<$ dta.mac $>",
    "state": "<$ dta.state $>",
    "cable": "<$ dta.cable $>",
    "ip": [
%   for(auto i: dta.ip) {
    <$ first ? "  " : ", " $>"<$ i $>"
%   }
    ]
  }
}
