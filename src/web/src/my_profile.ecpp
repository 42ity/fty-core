<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #/#><#
/*!
 * \file   my_profile.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief  
 */
#><%pre>
    #include "utils_web.h"
    #include <stdlib.h>
    #include "helpers.h"
    #include <sstream>
    #include <cxxtools/jsondeserializer.h>
    #include "log.h"
    #include "agentstate.h"
</%pre>
<%request scope="global">
    UserInfo user;
</%request>
<%cpp>
    std:: string change_pwd = " ";
    int timeout = 99;
    std::string preferences = "";
  
   // GET 
    if (request.isMethodGET()) {

        if (user.profile() == BiosProfile:: Admin) {
            change_pwd = "Yes";
            timeout = 10;
        }
        if (user.profile() == BiosProfile:: Dashboard) {
            change_pwd = "No";
            timeout = 0;
        }
                
        std::string uid = std::to_string(user.uid());
        int rv = persist::load_agent_info(uid, preferences);
        if ( rv != 0 ) {
            http_die("internal-error");
        }
        //mitigate the situation DB content is empty - most of the json parsers don't deal well with empty strings
        if (preferences.empty()) {
            preferences = "\"preferences\" :  {\"email\" : \" \", \"telephone\" : \" \", \"organization\" : \" \", \"date\":\"DDMMYYYY\", \"temperature\":\"C\", \"language\":\"en_US\", \"time\":\"24h\"}";
        } else {
            int str_size = preferences.size();
            preferences = preferences.substr(1,str_size-2);
        }
</%cpp>  
{
"login" : "<$ user.login() $>",
"must_change_pwd" : "<$ change_pwd $>",
"timeout" : "<$ timeout $>",
"profile" : "<$ user.toString() $>",
<$$preferences$>
}
%} // if get
<%cpp>
    // PUT 
    std::string uid = std::to_string(user.uid());
    std::string method = request.getMethod();

    if (method == "PUT" ){
        preferences = request.getBody();
        int str_size = preferences.size();
        preferences = preferences.substr(1,str_size-2);

        std::stringstream input(preferences, std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer(input);
        log_debug("user preferences: '''%s'''", input.str().c_str());

        // check, if we got a correct JSON
        try {
            deserializer.deserialize(si);
        } catch (const std::exception& e) {
            LOG_END_ABNORMAL(e);
            http_die("bad-request-document");
        }
        // JSON is correct, try to save it
        int rv = persist::save_agent_info (uid, request.getBody());
        if ( rv != 0 ) {
            //come error occured
            http_die("internal-error");
        }
    }    // if PUT                    
</%cpp>

