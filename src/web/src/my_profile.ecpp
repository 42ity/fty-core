<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #/#><#
/*!
 * \file   my_profile.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief  Manipulates with profile of the current user
 */
#><%pre>
    #include "utils_web.h"
    #include <stdlib.h>
    #include "helpers.h"
    #include <sstream>
    #include <cxxtools/jsondeserializer.h>
    #include <cxxtools/jsonserializer.h>
    #include "log.h"
    #include "agentstate.h"
#define DEFAULT_PREFERENCES "\"preferences\":{\"email\" : \" \", \"telephone\" : \" \", \"organization\" : \" \", \"date\":\"DDMMYYYY\", \"temperature\":\"C\", \"language\":\"en-us\", \"time\":\"24h\"}"
</%pre>
<%request scope="global">
    UserInfo user;
</%request>
<%cpp>

    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "RU"},
            {BiosProfile::Admin,     "RU"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string method = request.getMethod();
    std::string uid = std::to_string(user.uid());
    // ==========================================
    // information, that cannot be changed by user
    std:: string change_pwd = " ";
    int timeout = 99;
    if (user.profile() == BiosProfile:: Admin) {
        change_pwd = "true";
        timeout = 10;
    }
    if (user.profile() == BiosProfile:: Dashboard) {
        change_pwd = "false";
        timeout = 0;
    }
    // ==========================================
    // GET
    if (method == "GET") {
        std::string preferences = "";
        int rv = persist::load_agent_info(uid, preferences);
        if ( rv != 0 ) {
            http_die("internal-error", "Cannot read user preferences");
        }
        //mitigate the situation DB content is empty - most of the json parsers don't deal well with empty strings
        if (preferences.empty()) {
            // This should never happen, only if someone manually changed this directly in DB
            preferences = DEFAULT_PREFERENCES;
        }
</%cpp>
{
"login" : "<$ user.login() $>",
"must_change_pwd" : <$ change_pwd $>,
"timeout" : "<$ timeout $>",
"profile" : "<$ user.toString() $>",
<$$preferences$>
}
<%cpp>
    return HTTP_OK;
    } // if get

    if (method == "PUT" ) {
        std::string profile = request.getBody();
        log_debug ("user profile: '''%s'''", profile.c_str());

        std::stringstream input(profile, std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer(input);

        std::string preferences = "";
        // check, if we got a correct JSON
        try {
            deserializer.deserialize(si);
            // JSON is correct, try to save it
            cxxtools::SerializationInfo *preferences_si = si.findMember("preferences");
            if ( preferences_si == NULL ) {
                int rv = persist::save_agent_info (uid, DEFAULT_PREFERENCES);
                
                if ( rv != 0 ) {
                    http_die("internal-error", "Cannot save changes (default)");
                }
            } else {
                std::stringstream s;
                cxxtools::JsonSerializer js (s);
                js.beautify (false);
                js.serialize (*preferences_si).finish();
                preferences = s.str();
                int rv = persist::save_agent_info (uid, preferences);
                if ( rv != 0 ) {
                    http_die("internal-error", "Cannot save changes");
                }
            }
        } catch (const std::exception& e) {
            LOG_END_ABNORMAL(e);
            http_die("bad-request-document", e.what());
        }
</%cpp>
{
"login" : "<$ user.login() $>",
"must_change_pwd" : "<$ change_pwd $>",
"timeout" : "<$ timeout $>",
"profile" : "<$ user.toString() $>",
<$$preferences$>
}
%} // if PUT
