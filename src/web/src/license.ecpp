<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #>

<#\n/*!
 * \file license.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Jim Klimov <JimKlimov@Eaton.com>
 * \brief Not yet documented file
 */\n#>
<%pre>
#include <unistd.h>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <cxxtools/regex.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <inttypes.h>
#include <string.h>
#include <stdlib.h>
#include <pwd.h>
#include <mutex>

#include "config.h"

#define RETURN free(current_license); free(accepted_license); return

</%pre>
<%request scope="global">
long int uid = 0;
</%request>
<%cpp>
// Basic operations

/* NOTE: This must be kept in sync with admin_passwd.ecpp(.in) */
char *current_license = getenv("LICENSE_DIR");
char *accepted_license = getenv("DATADIR");
if(current_license == NULL)
   current_license = "/usr/share/bios/license";
if(accepted_license == NULL)
   accepted_license = "/var/lib/bios";
asprintf(&current_license, "%s/current", current_license);
asprintf(&accepted_license, "%s/license", accepted_license);
static cxxtools::Regex rex_lic("^.*/license$");
if(rex_lic.match(request.getUrl())) {
	if(request.isMethodGET()) {
		std::ifstream source(current_license, std::ios::binary);
		if(!source.good()) {
</%cpp>
{ "error" : "Error reading license file." }
<%cpp>
			RETURN HTTP_INTERNAL_SERVER_ERROR;
		}
		reply.out() << source.rdbuf();
		RETURN HTTP_OK;
	}
	if(request.isMethodPOST()) {
		char buff[512];
		memset(buff, 0, sizeof(buff));
		int dest = open(accepted_license, O_WRONLY | O_CREAT | O_TRUNC, 0644);
		readlink(current_license, buff, sizeof(buff));
		uint64_t tme = time(NULL);
		char *user = NULL;
		static std::mutex pw_lock;
		pw_lock.lock();
		struct passwd *pw = getpwuid(uid);
		if(pw != NULL) {
			user = strdup(pw->pw_name);
		}
		pw_lock.unlock();
		if(user == NULL) {
</%cpp>
{ "error" : "Can't get username for user with id <$ uid $>." }
<%cpp>
			if(dest > 0) close(dest);
			RETURN HTTP_INTERNAL_SERVER_ERROR;
		}
		if(dest < 0 || buff[0] == 0 ||
		   dprintf(dest, "%s\n%" PRIu64 "\n%s\n", buff, tme, user) < 4) {
</%cpp>
{ "error" : "Can't save license acceptance or can't get license version." }
<%cpp>
			if(dest > 0) close(dest);
			RETURN HTTP_INTERNAL_SERVER_ERROR;
		} else {
</%cpp>
{ "success" : "License version <$ buff $> accepted." }
<%cpp>
			close(dest);
			RETURN HTTP_OK;
		}
	}
	RETURN HTTP_BAD_REQUEST;
}
char *buff_a = NULL;
char *user = NULL;
char buff_r[512];
memset(buff_r, 0, sizeof(buff_r));
uint64_t tme;
readlink(current_license, buff_r, sizeof(buff_r));
FILE* src = fopen(accepted_license, "r");
if(src != NULL) {
	fscanf(src,"%ms\n%" SCNu64 "\n%ms", &buff_a, &tme, &user);
	fclose(src);
}
static cxxtools::Regex rex_st("^.*/license/status$");
if(rex_st.match(request.getUrl())) {
</%cpp>
{
  "accepted" : "<$ (buff_a == NULL || strcmp(buff_a, buff_r) != 0) ? "no" : "yes" $>"
, "version" : "<$ buff_r $>"
% if(buff_a != NULL) {
, "accepted_version" : "<$ buff_a $>"
, "accepted_at" : "<$ tme $>"
% }
% if(user != NULL) {
, "accepted_by" : "<$ user $>"
% }
}
<%cpp>
    if(buff_a != NULL) free(buff_a);
    if(user != NULL) free(user);
	RETURN HTTP_OK;
}
if(buff_a == NULL || strcmp(buff_a, buff_r) != 0) {
</%cpp>
% if(buff_a == NULL) {
{ "error" : "License version not accepted yet, please accept it first." }
% } else {
{ "error" : "License accepted in version <$ buff_a $>, but current version is <$ buff_r $>. Please reaccept it." }
% }
<%cpp>
    if(buff_a != NULL) free(buff_a);
    if(user != NULL) free(user);
	RETURN HTTP_UNAUTHORIZED;
} else {
    if(buff_a != NULL) free(buff_a);
    if(user != NULL) free(user);
	RETURN DECLINED;
}
</%cpp>
