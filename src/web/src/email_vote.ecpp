<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file email_vote.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Sends voting email.
 */
 #><%pre>
#include "helpers.h"
#include "tntmlm.h"
#include "subprocess.h"
#include <stdlib.h>
#include <sys/types.h>
#include <sys/syscall.h>
#include <fstream>
#include <libgen.h> //POSIX version of basename!!

static std::string
s_read_all (const char* filename) {
    int fd = open (filename, O_RDONLY);
    if (fd <= -1)
        return std::string {};
    std::string ret = shared::read_all (fd);
    close (fd);
    return ret;
}

// encode GET message for smtp agent         
static zmsg_t*
s_smtp_GET_message (
        int vote,
        const char* context,
        bool attach_system_state,
        zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));

    const char* email = getenv ("BIOS_FEEDBACK_EMAIL");
    if (!email)
        email = "EatonProductFeedback@Eaton.com";

    zmsg_addstr(msg, email);
    char *subject = zsys_sprintf ("IPC vote context=%s, uuid=%s", context, zuuid_str_canonical (uuid));
    zmsg_addstr (msg, subject);
    zstr_free (&subject);

    std::string message = "Hi,\nthis product is ";
    if (vote == 0)
        message += "ugly";
    else
    if (vote == 1)
        message += "medicore";
    else
        message += "amazing";
    message += "\n\nSincerelly your customer";
    zmsg_addstr(msg, message.c_str ());

    zhash_t *headers = zhash_new ();
    zhash_insert (headers, "X-Eaton-IPC-uuid", (void*) zuuid_str_canonical (uuid));
    zhash_insert (headers, "X-Eaton-IPC-context", (void*) context);
    zhash_insert (headers, "X-Eaton-IPC-vote", (void*) std::to_string (vote).c_str ());

    std::string machine_id = s_read_all ("/etc/machine-id");
    if (!machine_id.empty ())
        zhash_insert (headers, "X-Eaton-IPC-machine-id", (void*) machine_id.c_str ());

    zframe_t *frame = zhash_pack (headers);
    zmsg_add (msg, frame);
    zhash_destroy (&headers);

    if (attach_system_state) {
        log_info ("there's no tool to produce system state report, don't do anything yet");
    }
    return msg;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,         "C"},
            {BiosProfile::Dashboard,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    unsigned vote = 0;
    std::string checked_context;
    bool attach_system_state = false;
    unsigned _timeout = 60;
    {
        std::string value = qparam.param ("value");
        if (value.empty ())
            http_die ("request-param-required", "value");

        try {
            vote = std::stoi (value);
        }
        catch (const std::exception& e) {
            http_die ("request-param-bad", "value", value.c_str (), "number 1-3");
        }

        std::string context = qparam.param ("context");
        if (context.empty ())
            http_die ("request-param-required", "context");

        checked_context = context;

        std::string sys_state = qparam.param ("attach_system_state");
        if (sys_state == "yes")
            attach_system_state = true;

        std::string _stimeout = qparam.param ("_timeout");

        try {
            _timeout = std::stoi (_stimeout);
        }
        catch (const std::exception& e) {
            //pass
        }
    }
    
    // send message
    zuuid_t *uuid = zuuid_new ();
    zmsg_t *send = s_smtp_GET_message (
            vote,
            checked_context.c_str (),
            attach_system_state,
            uuid);

    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("Error: mlm_pool.get () failed.");
        http_die ("internal-error", "mlm_pool.get () failed.");
    }

    int rv = client->sendto ("agent-smtp", "SENDMAIL", 1000, &send);

    if (rv == -1)
    {
        log_critical (
                    "Error: client->sendto (address = '%s', subject = '%s', timeout = 1000) failed.",
                        "agent-smtp", "SENDMAIL");
        http_die ("internal-error", "client->sendto () failed");
    }

    zmsg_t *recieve = client->recv (zuuid_str_canonical (uuid) , _timeout);
    zuuid_destroy (&uuid);
    if (!recieve)
    {
        std::string msg = "Error: client->recv (timeout = '" + std::to_string (_timeout) + "') returned NULL";
        log_error (msg.c_str ());
        http_die ("internal-error", msg.c_str ());
    }

    char *err_code = zmsg_popstr (recieve);
    char *err_message = zmsg_popstr (recieve);
    const char *msg_subject = client->subject();
    std::string status;
  
    if (streq (msg_subject, "SENDMAIL-OK"))
    {
         status = "Succeeded"; 
    }   
    else
    if (streq (msg_subject, "SENDMAIL-ERR"))
    {
        status = "Failed";
    }
    else
    {
        status = "Failed";
        log_critical ("Error: message recieved with invalid subject.");
        http_die ("internal-error", "client->recv () invalid message subject");
    }
  
    zmsg_destroy(&recieve);
    zmsg_destroy(&send);
</%cpp>
{
    "test_status" :
    {
        "status" : "<$ status $>",
        "error_code" : <$ err_code $>,
        "reason" : "<$ utils::json::escape (err_message) $>"
    }
}
<%cpp>

    zstr_free(&err_code);
    zstr_free(&err_message);
</%cpp>


