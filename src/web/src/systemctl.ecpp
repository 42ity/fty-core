<#
 #
 # Copyright (C) 2015-2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file systemctl.ecpp
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \brief  Provide Users ability to manipulate with some specified services
 */
 #><%pre>
#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>
#include <cxxtools/split.h>

#include <stdexcept>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>

#include "subprocess.h"
#include "helpers.h"

struct SystemdUnitState {
    std::string LoadState;     // loaded/
    std::string ActiveState;   // active/
    std::string UnitFileState; // enabled/disabled
    std::string SubState;      // running/
};

std::map<std::string, struct SystemdUnitState> allowed_unit_list{};

static std::set<std::string> get_operations {"list", "status"};
static std::set<std::string> post_operations {"start", "stop", "restart", "enable", "disable", "show"};

char * tntnet_unit = getenv("SYSTEMD_UNIT_FULLNAME");

int
call_systemctl
    (shared::Argv proc_cmd_systemctl_args,
     std::string &proc_out,
     std::string &proc_err,
     int &proc_rv,
     std::map<std::string,
     struct SystemdUnitState> *discovered_unit_list)
{
    int counter = 0;
    shared::Argv proc_cmd {"sudo", "systemctl"};
    if (proc_cmd_systemctl_args.size() > 0)
        proc_cmd.insert( proc_cmd.end(), proc_cmd_systemctl_args.begin(), proc_cmd_systemctl_args.end());

    // Concat Argv into a string, prepare in advance for error-messages
    std::string proc_cmd_str;
    for (const auto &piece : proc_cmd) {
        if (!proc_cmd_str.empty())
            proc_cmd_str += " ";
        proc_cmd_str += piece;
    }

    proc_rv = shared::output (proc_cmd, proc_out, proc_err);

    if ( proc_rv != 0 ) {
        // trim trailing whitespaces in stderr copy for logging
        size_t endpos = proc_err.find_last_not_of(" \t\n");

        std::string message =
            "shared::output (command = '" + proc_cmd_str + "') failed. "
            "Return value = '" + std::to_string (proc_rv) + "', stderr = '" +
            ( ( std::string::npos == endpos ) ? proc_err : proc_err.substr( 0, endpos+1 ) ) + "'.";
        log_error (message.c_str ());
        return -1;
    }

    if (discovered_unit_list == NULL)
        return 0;

    if (proc_out.empty ()) {
        std::string message = "shared::output (command = '" + proc_cmd_str + "') succeeded, "
            "but returned empty output. Is host OS misconfigured (lack of registered units)?" ;
        log_error (message.c_str ());
        return 0;
    }
    std::vector<std::string> line_tokens;
    cxxtools::split("\n", proc_out, std::back_inserter(line_tokens));
    for (auto&& i : line_tokens) {
        if (i.empty ()) {
            continue;
        }

        std::string unit_name;
        SystemdUnitState sus; // std::strings inside are initialized to empty

        std::vector<std::string> sub_tokens;
        cxxtools::split("\t", i, std::back_inserter(sub_tokens));
        for (auto&& j : sub_tokens) {
            if (j.empty ()) {
                continue;
            }

            if (unit_name.empty ()) {
                unit_name = j;  
            } else {
                std::string key = j.substr (0, 2);
                if (j.size() > 2) {
                    std::string value = j.substr (2, std::string::npos);
                    if (key.compare("L:") == 0) {
                        sus.LoadState = value;
                    } else if (key.compare("A:") == 0) {
                        sus.ActiveState = value;
                    } else if (key.compare("U:") == 0) {
                        sus.UnitFileState = value;
                    } else if (key.compare("S:") == 0) {
                        sus.SubState = value;
                    }
                }
            }
        }

        if (unit_name.empty()) {
            std::string message = "Could not parse output of command = '" + proc_cmd_str + "', perhaps due to different expected output format.";
            log_error (message.c_str ());
            return -2;
        } else {
            (*discovered_unit_list)[unit_name] = sus;
            counter++;
        }
    }

    if (counter == 0) {
        std::string message = "Could not parse output of command = '" + proc_cmd_str + "' due to different expected output format or lack of registered units.";
        log_error (message.c_str ());
    }

    return counter;
}

int
call_systemctl
    (shared::Argv proc_cmd_systemctl_args,
     std::map<std::string,
     struct SystemdUnitState> *discovered_unit_list)
{
    std::string proc_out, proc_err;
    int proc_rv;
    return call_systemctl(proc_cmd_systemctl_args, proc_out, proc_err, proc_rv, discovered_unit_list);
}

int
learn_allowed_units
    (const char *service_name) {
    if (allowed_unit_list.size() != 0)
        allowed_unit_list.clear();

    shared::Argv proc_cmd_systemctl_args {"list-ipm-units", "--detailed"};
    if (service_name != NULL) {
        proc_cmd_systemctl_args.push_back(service_name);
    }

    int counter = call_systemctl(proc_cmd_systemctl_args, &allowed_unit_list);
    if ( counter >= 0)
        assert (counter == (int)allowed_unit_list.size());
    return counter;
}

bool service_name_valid (std::string &service_name) {

    if (allowed_unit_list.size() == 0)
        return false;

    std::map<std::string, SystemdUnitState>::iterator it;

    it = allowed_unit_list.find(service_name);
    if (it != allowed_unit_list.end())
        return true;

    /* TODO: Refactor the supported extension parsing into a loop with one piece of code */
    it = allowed_unit_list.find(service_name + ".service");
    if (it != allowed_unit_list.end()) {
        service_name += ".service";
        return true;
    }

    it = allowed_unit_list.find(service_name + ".target");
    if (it != allowed_unit_list.end()) {
        service_name += ".target";
        return true;
    }

    it = allowed_unit_list.find(service_name + ".timer");
    if (it != allowed_unit_list.end()) {
        service_name += ".timer";
        return true;
    }

    return false;
}

unsigned int process_get_list (
        tnt::HttpReply& replyx)
{
    std::string message;

    message.assign (
"{\n"
"\t\"systemctl_services\" : [\n");
    bool first = true;
    for (auto& element : allowed_unit_list) {
        if (element.first.empty())
            continue;

        message.append (first ? "\t\t\"" : ",\t\t\"").
                append (element.first).
                append ("\"\n");

        if (first)
            first = false;
    }

    message.append (
"\t]\n"
"}");
    replyx.out() << message;
    return HTTP_OK;
}

// -1 error request-param-bad
// >0 http status
int process_get_status (
        tnt::HttpReply& replyx,
        const std::string& service_name)
{
    std::string message;
    std::map<std::string, SystemdUnitState>::iterator it = allowed_unit_list.find(service_name);
    if ( it == allowed_unit_list.end()) {
        message = "Denying request for systemd unit not among those allowed by filter: '" + service_name +"'.";
        log_error (message.c_str ());
        return -1;
    }

    message.assign (
            "{\n"
            "\t\"" + it->first + "\" : {\n" +
            "\t\t\"ActiveState\"\t:\t\"" + it->second.ActiveState + "\",\n"
            "\t\t\"SubState\"\t:\t\"" + it->second.SubState + "\",\n"
            "\t\t\"LoadState\"\t:\t\"" + it->second.LoadState + "\",\n"
            "\t\t\"UnitFileState\"\t:\t\"" + it->second.UnitFileState + "\"\n"
            "\t}\n"
            "}");
    replyx.out() << message;
    return HTTP_OK;
}

// -1 request-bad-param
// -2 internat-error
int process_post (
        tnt::HttpReply& replyx,
        const std::string& operation,
        const std::string& service_name)
{
    std::string message;

    // for some services, we can do the real operation with another name
    std::string service_name_op = service_name;

    // networking is different animal, treat differently
    if (service_name == "networking") {
        if (operation != "restart" && operation != "show") {
            return -1;
        }
        // restart is done using special script
        if (operation == "restart") {
            service_name_op = "bios-networking";
        }
    }

    shared::Argv proc_cmd_systemctl_args_op {operation, service_name_op};

    if (operation == "restart" || operation == "stop" || operation == "disable" ) {
        if (tntnet_unit == NULL) {
            message = "Got command = 'sudo systemctl " + operation + " " + service_name_op + "' which can potentially impact the tntnet web-server unit; however the current webserver seems to run outside of systemd care... broken connections etc. can appear after this action.";
            log_warning (message.c_str ());
        } else {
            /* Check if the service manipulation would impact this webserver */
            std::map<std::string, struct SystemdUnitState> required_by_tntnet_unit_list{};
            shared::Argv proc_cmd_systemctl_args {"list-requires", "--plain", "--recursive", tntnet_unit};

            message = "Got operation '" + operation +"' for unit '" + service_name + "'; inspecting dependencies";
            log_info(message.c_str());

            int counter = call_systemctl(proc_cmd_systemctl_args, &required_by_tntnet_unit_list);
            if ( counter < 0 ) {
                return -2;
            }

            assert (counter == (int)required_by_tntnet_unit_list.size());

            if ( counter > 0 ) {
                std::map<std::string, SystemdUnitState>::iterator it = required_by_tntnet_unit_list.find(service_name);
                if ( it != required_by_tntnet_unit_list.end()) {
                    message = "command = 'sudo systemctl " + operation + " " + service_name_op + "' can impact the web-server unit '" + tntnet_unit +"'";
                    log_warning (message.c_str ());
                    proc_cmd_systemctl_args_op.push_back("--no-block");
                }
            }
        }
    }

    int counter;
    counter = call_systemctl(proc_cmd_systemctl_args_op, NULL);
    /* TODO: For --no-block case, sleep several sec here */
    if ( counter < 0 ) {
        return -2;
    }
    return process_get_status (replyx, service_name);
}
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
{
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "RE"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string checked_operation;
    std::string checked_service_name;
    // sanity checks
    {
        // get user-input
        std::string operation = request.getArg("operation");
        // convert to lower case; 'admin/systemctl/list' request is equivalent to 'admin/systemctl/LIST' request
        std::transform (operation.begin(), operation.end(), operation.begin(), ::tolower);
        if ( get_operations.count(operation) == 0 && post_operations.count(operation) == 0 ) {
            http_die ("request-param-bad", "operation", operation.c_str(), "status/list/enable/disable/start/stop/restart");
        }
        log_debug ("%zu", get_operations.count (checked_operation) );
        if ( request.getMethod() == "GET"  && ( get_operations.count (operation) == 0 ) )  {
            http_die ("request-param-bad", "operation", operation.c_str(), "an operation allowed for GET method");
        }
        if ( request.getMethod() == "POST" && ( post_operations.count (operation) == 0 ) ) {
            http_die ("request-param-bad", "operation", operation.c_str(), "an operation allowed for POST method");
        }
        checked_operation = std::move (operation);

        // get user-input
        std::string service_name;
        if ( request.getMethod() == "POST" ) {
            if ( request.getBody().empty() ) {
                http_die("bad-request-document", "Expected json document  { \"service_name\" : \"<service_name>\" }. Received empty request document.");
            }

            try {
                std::stringstream input (request.getBody(), std::ios_base::in);
                cxxtools::JsonDeserializer deserializer (input);
                cxxtools::SerializationInfo si;
                deserializer.deserialize (si);
                if ( si.category () != cxxtools::SerializationInfo::Object ) {
                    throw cxxtools::SerializationError ("Received document's root is not json object.");
                }
                si.getMember("service_name") >>= service_name;
            }
            catch (const cxxtools::SerializationError& e) {
                std::string message;
                message.assign("Expected json document { \"service_name\" : \"<service_name>\" }. ").append (e.what ());
                http_die( "bad-request-document", message.c_str() );
            }
            catch (const std::exception& e) {
                std::string message;
                message.assign ("Exception caught: ").append (e.what ());
                log_error (message.c_str ());
                http_die( "internal-error", "Exception caught. Please check logs for more details.");
            }
        } else {
            service_name = request.getArg("service_name");
        }

        if ( checked_operation == "list" ) {
            if ( learn_allowed_units(NULL) <= 0 ) {
                /* The error is logged in detail by the function */
                http_die("internal-error", "Executing systemctl failed. Please check logs for more details.");
            }
        } else {
            if ( (learn_allowed_units(service_name.c_str()) <= 0 ) ||
                 (!service_name_valid (service_name) )
            ) { /* In case of wildcards or short names, the service_name
                 * value can get changed by the call above; e.g. a
                 * "tntnet@bios" would become "tntnet@bios.service" */
                http_die ("request-param-bad", "service_name", service_name.c_str(), "one of service names that can be obtained through systemctl/list call (case-sensitive!)");
            }
        }

        checked_service_name = std::move (service_name);
    }
    log_info ("service_name: %s", checked_service_name.c_str());

    if ( request.getMethod() == "GET" ) {
        if ( checked_operation == "list" ) {
            return process_get_list (reply);
        }
        else if ( checked_operation == "status" ) {
            int pgs_rv = process_get_status (reply, checked_service_name);
            if (pgs_rv == -1)
                http_die ("request-param-bad", "service_name", checked_service_name.c_str(), "one of service names that can be obtained through systemctl/list call");
            else
                return pgs_rv;
        }
    }

    if ( request.getMethod() == "POST" ) {
        int pp_rv = process_post (reply, checked_operation, checked_service_name);
        if (pp_rv >= 0)
            return pp_rv;
        else
        if (pp_rv == -1)
            http_die("request-param-bad", "operation", checked_operation.c_str(), "'show' or 'restart'");
        else
            http_die("internal-error", "Executing systemctl failed. Please check logs for more details.");
    }
}
</%cpp>
