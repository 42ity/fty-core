<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #>

<#\n/*!
 * \file auth.ecpp
 * \author Jim Klimov
 * \author Michal Hrusecky
 * \brief Not yet documented file
 */\n#>
<%pre>
#include "sasl.h"
#include "tokens.h"
#include <string>
#include <iostream>
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>
#include <stdio.h>
</%pre>
<%args>
std::string grant_type="";
std::string username="";
std::string password="";
std::string client_id="";
std::string grant_reset="";
std::string grant_reset_inst="";
</%args>
<%cpp>
#ifndef VALID_FOR
#define VALID_FOR 3600
#endif //VALID_FOR

int valid = VALID_FOR;

if ( ! request.isSsl() ) {
    std::cerr << "WARNING: non-SSL Auth Request was received!";
#ifndef DEBUG
</%cpp>
{
    "error":"non_ssl_auth"
}
<%cpp>
    std::cerr << "\n";
    return HTTP_UNAUTHORIZED;
#endif // DEBUG
    std::cerr << " Completing the request anyway for DEBUG build...\n";
}
</%cpp>
% if(grant_type != "password") {
{
    "error":"unsupported_grant_type"
}
% } else {
<%cpp>
    if(authenticate(username.c_str(), password.c_str())) {
    std::string aToken = "";
    if(grant_reset == "true") {
	// Token is based on a fresh timestamp (one-second precision)
	if (grant_reset_inst == "true") {
#ifdef DEBUG
		aToken = tokens::get_instance(true)->gen_token(valid, username.c_str(), false);
#else
		std::cerr << "WARNING: Asked to reset instance of token "
			<< "generator, but this is disabled in non-DEBUG "
			<< "builds - resetting only the password\n";
#endif
	}
	if (aToken == "" ) {
		aToken = tokens::get_instance(true)->gen_token(valid, username.c_str(), false);
	}
    } else {
	// Token is based on a timestamp rounded to ROUND(=60) seconds
	aToken = tokens::get_instance()->gen_token(valid, username.c_str(), true);
    }
</%cpp>
{
    "access_token":"<$$ aToken $>",
    "token_type":"bearer",
    "expires_in":<$ valid $>
}
% } else {
{
    "error":"invalid_grant"
}
% return HTTP_UNAUTHORIZED;
% }
% }
