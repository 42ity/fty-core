<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file auth.ecpp
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \brief Not yet documented file
 */
 #><%pre>
#include "sasl.h"
#include "tokens.h"
#include "utils_web.h"
#include <string>
#include <iostream>
#include <cxxtools/regex.h>
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>
#include <cxxtools/query_params.h>
#include <stdio.h>
</%pre>
<%args>
std::string grant_type="";
std::string username="";
std::string password="";
std::string client_id="";
std::string token="";
</%args>
<%cpp>
#ifndef VALID_FOR
#define VALID_FOR 3600
#endif //VALID_FOR

int valid = VALID_FOR;

// Just in case someone put urlencoded stuff in body
cxxtools::QueryParams body_args(request.getBody());
std::string tmp;
#define FILL(PROP)   tmp =  body_args.param("PROP", ""); \
                     if(PROP.empty()) \
					   PROP = tmp;
FILL(token)
FILL(username)
FILL(password)
FILL(client_id)
FILL(token)

  static cxxtools::Regex rex_rev("^.*/revoke$");
  if(request.isMethodPOST() && rex_rev.match(request.getUrl())) {
	if(token.empty()) {
        http_die("request-param-required", "token to revoke");
    } else {
	  tokens::get_instance()->revoke(token);
</%cpp>
{ "success": "Everything went well" }
<%cpp>
      return HTTP_OK;
    }
  }

// with grant_type argument client wants to get new oauth2 token
if (!grant_type.empty()) {
    if (grant_type != "password")
    {
        http_die("request-param-bad", "grant_type", grant_type.c_str(), "password");
    }

    if(!authenticate(username.c_str(), password.c_str()))
    {
        http_die("request-param-bad", "(user|passwd)", "<invalid user or password>", "<valid user and password>");
    }
}
</%cpp>
{
    "access_token":"<$$ tokens::get_instance()->gen_token(valid, username.c_str()) $>",
    "token_type":"bearer",
    "expires_in":<$ valid $>
}
