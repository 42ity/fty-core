<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file auth.ecpp
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \brief  Implementation of:
            * revoke token
            * get poken
 */
 #><%pre>
#include "sasl.h"
#include "tokens.h"
#include "log.h"
#include "utils_web.h"
#include "helpers.h"
#include <string>
#include <iostream>
#include <cxxtools/regex.h>
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>
#include <cxxtools/jsondeserializer.h>
#include <stdio.h>
</%pre>
<%cpp>

    // NOTE: /api/v1/oauth2/token is not limited by CHECK_USER_PERMISSIONS_OR_DIE
    //       this is the start of authentication machinery

std::string checked_grant_type;
std::string checked_username;
std::string checked_password;
std::string checked_token;
{
    // sanitize token
    std::string token = qparam.param("token");
    check_regex_text_or_die ("token", token, checked_token, "^[-/._~+/a-z0-9]{0,255}={0,10}$");
    // sanitize token end
}

  {
    std::string method = request.getMethod();
    // Check if it is a revoke
    static cxxtools::Regex rex_rev("^.*/revoke$");
    if ( rex_rev.match(request.getUrl()) ) {
        // it is a revoke
        if ( method != "POST" ) {
            http_die ("method-not-allowed");
        }
        http_errors_t errors;
        if(checked_token.empty()) {
            http_die("request-param-required", "'token'");
        }
        tokens::get_instance()->revoke(checked_token);
</%cpp>
{ "success": "Everything went well" }
<%cpp>
        return HTTP_OK;
    }

{
    // sanitize other params
    std::string grant_type = qparam.param ("grant_type");
    std::string username = qparam.param ("username");
    std::string password = qparam.param ("password");

    // it is a request for token
    if ( method == "GET" ) {
        log_warning ("Unsecured version authorization is used (through the GET method with encoded parameters) ");
    } else if ( method == "POST" ) {
        // read json a deserialize it
        cxxtools::SerializationInfo si;
        try {
            std::stringstream input (request.getBody (), std::ios_base::in);
            cxxtools::JsonDeserializer deserializer (input);
            deserializer.deserialize (si);
        }
        catch (const std::exception& e) {
            LOG_END_ABNORMAL(e);
            http_die("bad-request-document", e.what());
        }
        auto grant_type_si = si.findMember("grant_type");
        if ( !grant_type_si ) {
            http_die ("request-param-required", "grant_type");
        }
        auto username_si = si.findMember("username");
        if ( !username_si ) {
            http_die ("request-param-required", "user_name");
        }
        auto password_si = si.findMember("password");
        if ( !password_si ) {
            http_die ("request-param-required", "password");
        }
        *grant_type_si >>= grant_type;
        *username_si >>= username;
        *password_si >>= password;
    } else {
        http_die ("method-not-allowed");
    }

    check_regex_text_or_die ("username", username, checked_username, "^[-_.a-z0-9]{0,50}$");
    check_regex_text_or_die ("password", password, checked_password, "^.{0,150}$");
    check_regex_text_or_die ("grant_type", grant_type, checked_grant_type, "^(password|)$");
    // sanitize other params end
}

    // with grant_type argument client wants to get new oauth2 token
    if ( checked_grant_type != "password" ) {
        http_die ("request-param-bad", "grant_type", checked_grant_type.c_str(), "password");
    }
    log_info ("request POST oauth2: username %s, grant_type %s", checked_username.c_str (), checked_grant_type.c_str ());

    if (checked_username == BIOS_SCRIPT_USER && request.getPeerIp() != "127.0.0.1") {
        log_error ("request POST oauth2: username %s, grant_type %s authentication FAILED", checked_username.c_str (), checked_grant_type.c_str ());
        http_die ("request-param-bad", "(user|passwd)", "<invalid user or password>", "<valid user and password>");
    }

    if ( !authenticate(checked_username.c_str(), checked_password.c_str()) ) {
        log_error ("request POST oauth2: username %s, grant_type %s authentication FAILED", checked_username.c_str (), checked_grant_type.c_str ());
        http_die ("request-param-bad", "(user|passwd)", "<invalid user or password>", "<valid user and password>");
    }
    std::string access_token;
    long int expires_in;
    BiosProfile profile = tokens::get_instance()->gen_token(checked_username.c_str(), access_token, &expires_in);
    if (profile == BiosProfile::Anonymous)
        http_die ("internal-error", "Cannot map use group id to bios profile!");
</%cpp>
{
    "access_token" : "<$$ access_token $>",
    "token_type" : "bearer",
    "expires_in" : <$ expires_in $>
}
%}
