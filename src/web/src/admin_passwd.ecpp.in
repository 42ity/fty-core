<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file admin_passwd.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Change password of a system
 */
#><%pre>
#include <string>
#include <sstream>
#include <vector>

#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>
#include <cxxtools/regex.h>
#include <cxxtools/join.h>

#include "subprocess.h"
#include "cidr.h"
#include "sasl.h"
#include "filesystem.h"
#include "helpers.h"

#define SSH_NOT_TO_BE_RUN "/etc/ssh/sshd_not_to_be_run"
using namespace shared;

// extract lines beginning with 'BAD PASSWORD: ' from stderr
static std::string
s_reason(
        const std::string& err)
{
    static const char* BAD_PASSWORD = "BAD PASSWORD: ";
    static const size_t SKIP_IDX = strlen(BAD_PASSWORD);
    static const cxxtools::Regex rgx{std::string("^") + BAD_PASSWORD + ".*"};

    std::stringstream s;
    s << err;
    std::string line;
    std::vector<std::string> out;

    while(std::getline(s, line)) {
        if (rgx.match(line))
            out.push_back(line.substr(SKIP_IDX, line.size()));
    }

    std::stringstream ret;
    cxxtools::join(out.begin(), out.end(), ", ", ret);
    return ret.str();
}

static int
s_passwd(
    const std::string& user,
    const std::string& old_passwd,
    const std::string& new_passwd,
    std::string& reason)
{
    Argv args{"/usr/bin/sudo", "@libexecdir@/@PACKAGE@/bios-passwd"};
    std::string out;

    std::string inp = user + "\n" + old_passwd + "\n" + new_passwd + "\n";
    std::string err;
    int ret = output(args, out, err, inp);
    reason = s_reason(err);
    // expect script prints to stdout
    if (reason.empty())
        reason = s_reason(out);
    return ret;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "C"},
            {BiosProfile::Admin,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string checked_user;
    std::string checked_old_passwd;
    std::string checked_new_passwd;
    { // sanity check
        std::stringstream input(request.getBody(), std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer(input);
        std::string user;
        std::string old_passwd;
        std::string new_passwd;

        http_errors_t errors;

        bool bad_request = false;
        try {
            deserializer.deserialize(si);
            si.getMember("user") >>= user;
            si.getMember("old_passwd") >>= old_passwd;
            si.getMember("new_passwd") >>= new_passwd;
        } catch (const std::exception& e) {
            bad_request = true;
        }

        if (bad_request)
            http_die("bad-request-document");

        if (check_regex_text ("user", user, "^[-_a-z0-9]{1,50}$", errors)) {
            checked_user = user;
        } else {
            http_die_error(errors);
        }
        if (user == "root") {
            http_die("request-param-bad", "user", user.c_str(), "<user name other than 'root'>");
        }
        if (user == BIOS_SCRIPT_USER) {
            http_die("request-param-bad", "user", user.c_str(), "<user name other than this one>");
        }

        if (old_passwd.empty()) {
            http_die("request-param-bad", "old_passwd", "<empty>", "<password>");
        } else {
            checked_old_passwd = old_passwd;
        }

        if (new_passwd.empty()) {
            http_die("request-param-bad", "new_passwd", "<empty>", "<password>");
        } else {
            checked_new_passwd = new_passwd;
        }

    } // sanity checking end

    // only Admin can change login of all users
    // otherwise you can change only your own
    if (user.profile () != BiosProfile::Admin) {
        if (user.login () != checked_user)
            http_die ("not-authorized");
    }

    if (!authenticate(checked_user.c_str(), checked_old_passwd.c_str()))
        http_die("request-param-bad", "(user|old_passwd)", "<invalid user or password>", "<valid user and password>");

    std::string reason;
    std::string received;
    int r = s_passwd(checked_user, checked_old_passwd, checked_new_passwd, reason);
    if (r != 0) {
        if (!reason.empty())
            received = "password with problems: " + reason;
        else
            received = "bios-passwd returned error code " + std::to_string(r);

        //this stretches semantics of request-param-bad!!!
        http_die("request-param-bad",
                 "new_passwd",
                 received.c_str(),
                 "<valid password>");
    }

    /* Verify the new password and so flush the SASLAUTHD cache that trusts the old one still */
    if (!authenticate(checked_user.c_str(), checked_new_passwd.c_str()))
        http_die("internal-error", "Can't authenticate user with new password, saslauthd service failed");
</%cpp>
{ "passwd" : "<$$ "password for '" + checked_user + "' changed" $>" }
