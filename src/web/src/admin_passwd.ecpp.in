<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file agent.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Not yet documented file
 */
#><%pre>
#include <string>
#include <algorithm>

#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>

#include "subprocess.h"
#include "cidr.h"
#include "sasl.h"
#include "filesystem.h"

#define SSH_NOT_TO_BE_RUN "/etc/ssh/sshd_not_to_be_run"
using namespace shared;

static int
s_passwd(
    const std::string& user,
    const std::string& old_passwd,
    const std::string& new_passwd,
    std::string& err)
{
    Argv args{"/usr/bin/sudo", "@libexecdir@/@PACKAGE@/bios-passwd"};
    std::string out;

    std::string inp = user + "\n" + old_passwd + "\n" + new_passwd + "\n";
    return output(args, out, err, inp);
}

</%pre>
<%cpp>
    std::stringstream input(request.getBody(), std::ios_base::in);
    cxxtools::SerializationInfo si;
    cxxtools::JsonDeserializer deserializer(input);
    std::string user;
    std::string old_passwd;
    std::string new_passwd;
    bool bad_request = false;
    try {
        deserializer.deserialize(si);
        si.getMember("user") >>= user;
        si.getMember("old_passwd") >>= old_passwd;
        si.getMember("new_passwd") >>= new_passwd;
    } catch (const std::exception& e) {
        bad_request = true;
    }
    if (bad_request || user.empty() || old_passwd.empty() || new_passwd.empty() || \
        user == "root" || !authenticate(user.c_str(), old_passwd.c_str())) {
#ifdef DEBUG
            std::string debug;
            if (bad_request)
                debug = "exception when reading JSON file";
            else if (user.empty())
                debug = "user is empty";
            else if (old_passwd.empty())
                debug = "old_passwd is empty";
            else if (new_passwd.empty())
                debug = "new_passwd is empty";
            else if (user == "root")
                debug = "user == root";
            else
                debug = "can't authenticate '" + user + "'";
#endif
</%cpp>
{
    "errors" : [
        {
            "message" : "user, old password or new password is invalid",
            "code" : 42
%#ifdef DEBUG
            ,"debug" : "<$$ debug $>"
%#endif
        }
    ]
}
<%cpp>
    return HTTP_BAD_REQUEST;
    }

    std::string err;
    int r = s_passwd(user, old_passwd, new_passwd, err);
    if (r != 0) {
        std::string msg = "@libexecdir@/@PACKAGE@/bios-passwd: changing passwd for user '" + user + "' failed with code " + std::to_string(r);
        std::replace(err.begin(), err.end(), '\n', ' ');
</%cpp>
{
    "errors" : [
        {
            "message" : "<$$ msg $>",
            "code" : 42
%#ifdef DEBUG
            ,"debug" : "<$$ err $>"
%#endif
        }
    ]
}
<%cpp>
    return HTTP_BAD_REQUEST;
    }

    /* Verify the new password and so flush the SASLAUTHD cache that trusts the old one still */
    if (!authenticate(user.c_str(), new_passwd.c_str())) {
#ifdef DEBUG
            std::string debug;
            debug = "can't authenticate '" + user + "' with the newly changed password";
#endif
</%cpp>
{
    "errors" : [
        {
            "message" : "could not verify application of the new password",
            "code" : 42
%#ifdef DEBUG
            ,"debug" : "<$$ debug $>"
%#endif
        }
    ]
}
<%cpp>
    return HTTP_BAD_REQUEST;
    }
</%cpp>
{ "passwd" : "<$$ "password for '" + user + "' changed" $>" }
