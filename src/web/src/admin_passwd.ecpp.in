<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file agent.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Not yet documented file
 */
#><%pre>
#include <string>

#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>

#include "subprocess.h"
#include "cidr.h"
#include "sasl.h"
#include "filesystem.h"
#include "utils_web.h"

#define SSH_NOT_TO_BE_RUN "/etc/ssh/sshd_not_to_be_run"
using namespace shared;

static int
s_passwd(
    const std::string& user,
    const std::string& old_passwd,
    const std::string& new_passwd,
    std::string& err)
{
    Argv args{"/usr/bin/sudo", "@libexecdir@/@PACKAGE@/bios-passwd"};
    std::string out;

    std::string inp = user + "\n" + old_passwd + "\n" + new_passwd + "\n";
    return output(args, out, err, inp);
}

</%pre>
<%cpp>
    std::stringstream input(request.getBody(), std::ios_base::in);
    cxxtools::SerializationInfo si;
    cxxtools::JsonDeserializer deserializer(input);
    std::string user;
    std::string old_passwd;
    std::string new_passwd;
    bool bad_request = false;
    try {
        deserializer.deserialize(si);
        si.getMember("user") >>= user;
        si.getMember("old_passwd") >>= old_passwd;
        si.getMember("new_passwd") >>= new_passwd;
    } catch (const std::exception& e) {
        bad_request = true;
    }

    // sanity checking
    if (bad_request)
        http_die("bad-request-document");
    else if (user.empty())
        http_die("request-param-bad", "user", "<empty>", "<user name>");
    else if (old_passwd.empty())
        http_die("request-param-bad", "old_passwd", "<empty>", "<password>");
    else if (new_passwd.empty())
        http_die("request-param-bad", "new_passwd", "<empty>", "<password>");
    else if (user == "root")
        http_die("request-param-bad", "user", user.c_str(), "<user name other than 'root'>");
    else if (!authenticate(user.c_str(), old_passwd.c_str()))
        http_die("request-param-bad", "(user|old_passwd)", "<invalid user or password>", "<valid user or password>");

    std::string err;
    int r = s_passwd(user, old_passwd, new_passwd, err);
    if (r != 0) {
        //this stretches semantics of request-param-bad!
        //TODO: maybe 'grep' for BAD-PASSWORD
        http_die("request-param-bad", "new_passwd", utils::json::escape(err).c_str(), "<valid password>");
    }

    /* Verify the new password and so flush the SASLAUTHD cache that trusts the old one still */
    if (!authenticate(user.c_str(), new_passwd.c_str()))
        http_die("internal-error", "Can't authenticate user with new password, saslauthd service failed");
</%cpp>
{ "passwd" : "<$$ "password for '" + user + "' changed" $>" }
