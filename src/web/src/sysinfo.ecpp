<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file sysinfo.ecpp
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author Karol Hrdina <karolhrdina@eaton.com>
 * \brief Not yet documented file
 */
 #><%pre>
#include <vector>
#include <sys/utsname.h>
#include <cxxtools/split.h>
#include <cxxtools/regex.h>
#include "auth_levels.h"
#include "utils_web.h"
#include "subprocess.h"
#include "log.h"
</%pre>
<%request scope="global">
int8_t access_auth_level;
</%request>
{
    "operating-system" : {
<%cpp>    
    std::string output, cmderr;
    int rv = shared::output ({"/usr/bin/systemd-detect-virt", "-c"}, output, cmderr);
    if (rv != 0) {
        output = "N/A";
    }
</%cpp>
        <$$ utils::json::jsonify ("container", output) $>,
<%cpp>
    rv = shared::output ({"/usr/bin/systemd-detect-virt", "-v"}, output, cmderr);
    if (rv != 0) {
        output = "N/A";
    }
</%cpp>
        <$$ utils::json::jsonify ("hypervisor", output) $>,
<%cpp>
    struct utsname u;
    if (uname (&u) == -1) {
        http_die ("internal-error", "uname() failed.");
    }
</%cpp>
        "uname": {
            <$$ utils::json::jsonify ("sysname", (char*) u.sysname) $>,
            <$$ utils::json::jsonify ("nodename", (char*) u.nodename) $>,
            <$$ utils::json::jsonify ("release", (access_auth_level<=AUTH_LEVEL_ANONYMOUS) ? "UNAUTHORIZED" : (char*) u.release) $>,
            <$$ utils::json::jsonify ("version", (access_auth_level<=AUTH_LEVEL_ANONYMOUS) ? "UNAUTHORIZED" : (char*) u.version) $>,
            <$$ utils::json::jsonify ("machine", (char*) u.machine) $>
        }
    }
<%cpp>
    if (access_auth_level >= AUTH_LEVEL_POWERUSER) { 
        rv = shared::output ({"dpkg", "--list"}, output, cmderr);
        if (rv == 0) {
</%cpp>
,   "packages" : [
<%cpp>
            std::vector<std::string> tokens;
            cxxtools::split ("\n", output, std::back_inserter (tokens));
            // Strip first 5 lines
            for (int i = 0; i < 5; i++)
                tokens.erase (tokens.begin ());
            bool first = true;
            for (auto const& item : tokens) {
                if (item.empty ())
                    continue;
                std::vector <std::string> line_tokens;
                cxxtools::split (cxxtools::Regex("[ \t]+"), item, std::back_inserter (line_tokens));
                std::string version, commit;
                auto pos = line_tokens.at (2).find ("~");
                if (pos != std::string::npos) {
                    version = line_tokens.at (2).substr (0, pos);
                    commit = line_tokens.at (2).substr (pos+1); 
                }
                else {
                    version = line_tokens.at (2);

                }
// Note: Shall we desire maintainers name etc...
//                rv = shared::output ({"dpkg", "status", line_tokens.at (1).c_str ()}, output, cmderr);
//                if (rv == 0) {
//                      Parse `dpkg status <package_name>` here
//                }
</%cpp>
%               if (first) {
            {
%                   first = false;
%               }
%               else {
          , {
%               }
                <$$ utils::json::jsonify ("package-name", line_tokens.at (1)) $>,
                <$$ utils::json::jsonify ("package-version", version) $>,
%               if (pos != std::string::npos) {
              , <$$ utils::json::jsonify ("commit", commit) $>
%               }
            }
%           }
    ]
%       }
<%cpp>
        rv = shared::output ({"systemctl", "list-units"}, output, cmderr);
        if (rv == 0) {
</%cpp>
,   "processes" : [
<%cpp>
            std::vector<std::string> tokens;
            cxxtools::split("\n", output, std::back_inserter (tokens));
            // Strip first 1 lines
            for (int i = 0; i < 1; i++)
                tokens.erase (tokens.begin ());
            // Strip last 7 lines
            for (int i = 0; i < 7; i++)
                tokens.erase (tokens.end ());
            bool first = true;
            for (auto const& item : tokens) {
                if (item.empty ())
                    continue;
                std::vector <std::string> line_tokens;
                cxxtools::split (" \t", item, std::back_inserter (line_tokens));
                // status
                rv = shared::output ({"systemctl", "show", line_tokens.at (0).c_str ()}, output, cmderr);
                if (rv == 0) {
</%cpp>
%                   if (first) {
            {
%                       first = false;
%                   }
%                   else {
          , { 
%                   }
                <$$ utils::json::jsonify ("unit", line_tokens.at (0)) $>
<%cpp> 
                    std::vector<std::string> status_tokens;
                    cxxtools::split("\n", output, std::back_inserter(status_tokens));
                    for (const auto& line : status_tokens) {
                        if (line.empty ())
                            continue;
                        std::size_t found = line.find ("=");
                        if (found == std::string::npos)
                            continue;
                        std::string key = line.substr (0, found);
                        std::string value  = line.substr (found+1, std::string::npos);
</%cpp>
%                       if (key.compare ("LoadState") == 0) {
              , <$$ utils::json::jsonify ("LoadState", value) $>             
%                       }
%                       else if (key.compare ("ActiveState") == 0) {
              , <$$ utils::json::jsonify ("ActiveState", value) $>             
%                       }
%                       else if (key.compare ("UnitFileState") == 0) {
              , <$$ utils::json::jsonify ("UnitFileState", value) $>             
%                       }
%                       else if (key.compare ("SubState") == 0) {
              , <$$ utils::json::jsonify ("SubState", value) $>             
%                       }
%                       // Note: We can parse out more info here
%                       // TODO: DECIDE if we want to parse out more info
%                   } // for line
            }
%               } // if (rv == 0)
%           } // for auto
    ]
%       }
%   } // if (access_auth_level >= AUTH_LEVEL_POWERUSER)
}
