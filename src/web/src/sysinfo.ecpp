<#
 #
 # Copyright (C) 2015-2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    sysinfo.ecpp
 * \author  Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author  Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author  Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief   This REST API call returns information about the OS
 * \details This REST API call returns information about the operating
 *          environment for the installed OS image, including packages
 *          and states of services related or important to BIOS project.
 *          Note that this no longer reports raw process information as
 *          might be relevant to a developer's workspace or to packaging
 *          in some OS other than the primary development target NFC OS.
 */
 #><%pre>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <stdexcept>
#include <sys/utsname.h>
#include <tntdb/connect.h>
#include <cxxtools/split.h>
#include <cxxtools/regex.h>
#include <cxxtools/jsonserializer.h>
#include <cxxtools/jsondeserializer.h>
#include "helpers.h"
#include "subprocess.h"
#include "log.h"
#include "dbpath.h"
#include "assets.h"
#include "asset_types.h"
#include "utils.h"
#include "git_details_override.h"

// Magic numbers - dpkg fancy formatting du-jour
#ifndef DPKG__LIST__STRIP_HEADER
#define DPKG__LIST__STRIP_HEADER 5
#endif

#ifndef DPKG__LIST__COLUMN_PKGNAME
#define DPKG__LIST__COLUMN_PKGNAME 1
#endif

#ifndef DPKG__LIST__COLUMN_PKGVERSION
#define DPKG__LIST__COLUMN_PKGVERSION 2
#endif

/* If OSIMAGE_BASENAME==NULL - no envvar, tntnet is not running under systemd */
const char * OSIMAGE_BASENAME = ( getenv("OSIMAGE_BASENAME") ? getenv("OSIMAGE_BASENAME") : "OS image name is not available" );

void
get_location (
    std::string& location)
{
    /* This retrieves the location (address) of the datacenter */
    /* NOTE ASSUMPTION: this returns the first DC with an address,
     * assuming it is the only one available */
    try {
        tntdb::Connection conn = tntdb::connectCached (url);
        log_debug ("tntdb::connectCached (url = '%s') successful", url.c_str ());
        db_reply <std::map <uint32_t, std::string>> elements =
            persist::select_short_elements (
                                    conn,
                                    persist::asset_type::DATACENTER,
                                    persist::asset_subtype::N_A);
        log_debug ("persist::select_short_elements () successful");
        bool do_break = false;
        for (auto it = elements.item.cbegin(); it != elements.item.cend(); ++it) {
            // it->first is element_id
            std::map <std::string, std::pair<std::string, bool>> ext;
            int rv = persist::select_ext_attributes (conn, it->first, ext);
            if (rv == -1) {
                continue;
            }
            for (auto it2 = ext.cbegin(); it2 != ext.cend (); ++it2) {
                if (it2->first.compare ("address") == 0) {
                    location = it2->second.first;
                    do_break = true;
                    break;
                }
            }
            if (do_break)
                break;
        }
        if (!do_break)
            log_debug ("get_location() did not find any 'datacenter' asset with an 'address'");
    }
    catch (const std::exception& e) {
        log_error ("Exception caught: %s", e.what ());
    }
}

void
get_installation_date (
    const std::string& file,
    std::string& installation_date)
{
    try {
        std::ifstream finput (file);
        if (finput.is_open () && finput.good ()) {
            // We assume the second line is license acceptance unix time
            std::getline (finput, installation_date);
            std::getline (finput, installation_date);
            int64_t i64 = std::stoll (installation_date);
            // TODO: we should probably check for time_t max/min, but hey!... ;)
            char chtmp[64];
            if (calendar_to_datetime ((time_t) i64, chtmp, 64) == -1) {
                installation_date = "N/A - Error retrieveing installation date";
                throw std::runtime_error ("calendar_to_datetime () failed.");
            }
            installation_date.assign (chtmp);
        }
    }
    catch (const std::exception& e) {
        log_error ("Exception caught: %s", e.what ());
    }
}

void
sysinfo_detail (
    std::string& output,
    tnt::HttpRequest& request,
    BiosProfile profile)
{
    /* This is the detailed output which prints as much info as we reasonably
     * can, as needed for the support and quick troubleshooting purposes. */
    output.clear ();

    // Certain strings returned to caller in some cases
    static const std::string UNAUTHORIZED = "unauthorized";
    static const std::string NOTAVAILABLE = "N/A";
    static const std::string NOTLICENSEDYET = "License not accepted yet";

    output += "{\n"
    "\t\"operating-system\" : {\n";

    std::string container_info;
    {
        log_debug ("shared::output2 (args = '{\"/usr/bin/systemd-detect-virt\", \"-c\"}') starting");
        int rv = shared::output2 ({"/usr/bin/systemd-detect-virt", "-c"}, container_info, 0, 100);
        log_debug ("shared::output2 finished with return value == '%" PRIi32"'", rv);

        size_t output_len = container_info.length();
        if (rv != 0 && output_len<2) {
            container_info = NOTAVAILABLE;
        }
        else
        if (output_len>0 && container_info[output_len-1] == '\n') {
            container_info[output_len-1] = '\0';
        }
    }
    output += "\t\t";
    output += utils::json::jsonify ("container", container_info.c_str());
    output += "\n";

    std::string hypervisor_info;
    {
        log_debug ("shared::output2 (args = '{\"/usr/bin/systemd-detect-virt\", \"-v\"}') starting");
        int rv = shared::output2 ({"/usr/bin/systemd-detect-virt", "-v"}, hypervisor_info, 0, 100);
        log_debug ("shared::output2 () finished with return value == '%" PRIi32"'", rv);

        size_t output_len = hypervisor_info.length();
        if (rv != 0 && output_len<2) {
            hypervisor_info = NOTAVAILABLE;
        }
        else
        if (output_len>0 && hypervisor_info[output_len-1] == '\n') {
            hypervisor_info[output_len-1] = '\0';
        }
    }
    output += ",\t\t";
    output += utils::json::jsonify ("hypervisor", hypervisor_info.c_str());
    output += "\n";

    // let's check this first, as we can "die" here
    struct utsname u;
    if (uname (&u) == -1) {
        log_error ("uname() failed: '%s'", strerror (errno));
    }
    else {
        output += ",\t\t";
        output += "\"uname\" : {\n";

        output += "\t\t\t";
        output +=  utils::json::jsonify ("sysname", u.sysname);
        output += "\n";

        output += ",\t\t\t";
        output += utils::json::jsonify ("nodename", u.nodename);
        output += "\n";

        output += ",\t\t\t";
        output += utils::json::jsonify ("release", (profile != BiosProfile::Admin) ? UNAUTHORIZED : u.release );
        output += "\n";

        output += ",\t\t\t";
        output += utils::json::jsonify ("version", (profile != BiosProfile::Admin) ? UNAUTHORIZED : u.version );
        output += "\n";

        output += ",\t\t\t";
        output += utils::json::jsonify ("machine", u.machine);
        output += "\n";

        output += "\t\t}\n"; // "uname" closing bracket
    }

    std::string installation_date = NOTLICENSEDYET;
    char *accepted_license = get_accepted_license_file ();
    if (accepted_license) {
        get_installation_date (accepted_license, installation_date);
        free (accepted_license);
        accepted_license = NULL;
    }

    output += ",\t\t";
    output += utils::json::jsonify ("installation-date", installation_date);
    output += "\n";

    std::string location = "N/A - Error retrieving location";
    get_location (location);

    output += ",\t\t";
    output += utils::json::jsonify ("location", location);
    output += "\n";

    output += "\t}\n"; // "operating-system" closing bracket

    output += ",\t\"restapi-metadata\" : {\n";
    output += "\t\t\"core-package\" : {\n";

    output += "\t\t\t";
    output += utils::json::jsonify ("package-name", PACKAGE);
    output += "\n";

    output += ",\t\t\t";
    output += utils::json::jsonify ("package-version", PACKAGE_VERSION);
    output += "\n";

    output += ",\t\t\t";
    output += utils::json::jsonify ("package-bugreport", PACKAGE_BUGREPORT);
    output += "\n";

    output += ",\t\t\t";
    output += utils::json::jsonify ("package-url", PACKAGE_URL);
    output += "\n";

    // Note that PACKAGE_VENDOR is NOT an automake default variable,
    // we define it locally in our project configuration.
#ifdef PACKAGE_VENDOR
    output += ",\t\t\t";
    output += utils::json::jsonify ("vendor", PACKAGE_VENDOR);
    output += "\n";
#endif

    output += "\t}\n"; // "core-package" closing bracket

    if (profile == BiosProfile::Admin) {
#ifdef HAVE_PACKAGE_GIT
        output += ",\t\"source-repo\" : {\n";

        output += "\t\t";
        output += utils::json::jsonify ("scm", "git");
        output += "\n";

        output += ",\t\t";
        output.append ("\"origin\" : \"").append (PACKAGE_GIT_ORIGIN_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"branch\" : \"").append (PACKAGE_GIT_BRANCH_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"commit\" : \"").append (PACKAGE_GIT_HASH_L_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"commit-timestamp\" : \"").append (PACKAGE_GIT_TSTAMP_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"commit-timestamp-iso8601\" : \"").append (PACKAGE_GIT_TSTAMP_ISO8601_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"status\" : \"").append (PACKAGE_GIT_STATUS_ESCAPED).append ("\"");
        output += "\n";

        output += "\t}\n"; // "source-repo" closing bracket

# endif // HAVE_PACKAGE_GIT

#if defined(HAVE_PACKAGE_BUILD_HOST) || defined(HAVE_PACKAGE_BUILD_TSTAMP)
        output += ",\t\"build-info\" : {\n";
#ifdef HAVE_PACKAGE_BUILD_HOST
        output += "\t\t";
        output.append ("\"build-host-name\" : \"").append (PACKAGE_BUILD_HOST_NAME_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"build-host-os\" : \"").append (PACKAGE_BUILD_HOST_OS_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"build-host-uname\" : \"").append (PACKAGE_BUILD_HOST_UNAME_ESCAPED).append ("\"");
        output += "\n";
#ifdef HAVE_PACKAGE_BUILD_TSTAMP
        output += ",";
#endif
#endif // HAVE_PACKAGE_BUILD_HOST

#ifdef HAVE_PACKAGE_BUILD_TSTAMP
        output += "\t\t";
        output.append ("\"build-timestamp\" : \"").append (PACKAGE_BUILD_TSTAMP_ESCAPED).append ("\"");
        output += "\n";

        output += ",\t\t";
        output.append ("\"build-timestamp-iso8601\" : \"").append (PACKAGE_BUILD_TSTAMP_ISO8601_ESCAPED).append ("\"");
        output += "\n";
#endif // HAVE_PACKAGE_BUILD_TSTAMP
        output += "\t}\n"; // "build-info" closing bracket
# endif // HAVE_PACKAGE_BUILD_*: HOST and/or TSTAMP

        static const std::string BIOS_RELEASE_JSON_FILE = "/etc/release-details.json";

        try {
            std::ifstream in (BIOS_RELEASE_JSON_FILE, std::ios::in | std::ios::binary);
            if (!in) {
                throw std::runtime_error ("Could not open file.");
            }

            std::ostringstream tmp;
            tmp << in.rdbuf();
            in.close();
            std::string bios_release (tmp.str ());

            std::stringstream input (bios_release, std::ios_base::in);
            cxxtools::JsonDeserializer deserializer (input);
            cxxtools::SerializationInfo si;
            deserializer.deserialize (si);

            if (si.category () != cxxtools::SerializationInfo::Category::Object) {
                throw std::runtime_error ("Document root type is not Json Object.");
            }

            if (si.memberCount () == 0) {
                throw std::runtime_error ("Root json object is empty.");
            }
            std::size_t index = bios_release.find_first_of ("{");
            if (index != std::string::npos) {
                bios_release.erase (index, 1);
            }
            index =  bios_release.find_last_of ("}");
            if (index != std::string::npos) {
                bios_release.erase (index, 1);
            }
            output += ", ";
            output += bios_release;
        }
        catch (const std::exception& e) {
            log_warning (
                "Could not display 'release-details' section of 'restapi-metadata' that is read from file '%s' "
                "because the following error happened: '%s'",
                BIOS_RELEASE_JSON_FILE.c_str(), e.what ());
        }
    } // profile == BiosProfile::Admin

    output += "\t}\n"; // "restapi-metadata" closing bracket

    if (profile == BiosProfile::Admin) {
        std::string dpkg_output;
        {
            log_debug ("shared::output2 (args = '{\"dpkg\", \"--list\"}') starting");
            int rv = shared::output2 ({"dpkg", "--list"}, dpkg_output, 0, 100);
            log_debug ("shared::output2 () finished with return value == '%" PRIi32"'", rv);
            if (rv != 0) {
                log_error (
                    "shared::output2 (args = '{\"dpkg\", \"--list\"}') failed; "
                    "return code == '%" PRIi32"'", rv);
                dpkg_output.clear ();
            }
        } // end of `dpkg` callout
        if (!dpkg_output.empty ()) {
            output += ",\t\"packages\" : [\n";

            std::vector<std::string> tokens;
            cxxtools::split ("\n", dpkg_output, std::back_inserter (tokens));
            // Strip first DPKG__LIST__STRIP_HEADER lines
            for (int i = 0; i < DPKG__LIST__STRIP_HEADER; i++) {
                tokens.erase (tokens.begin ());
            }

            bool first = true;
            for (const auto& item : tokens) {
                request.touch(); // Reset the deadman timer while in a loop WTF?!
                if (item.empty ())
                    continue;

                std::vector <std::string> line_tokens;
                cxxtools::split (cxxtools::Regex("[ \t]+"), item, std::back_inserter (line_tokens));

                std::string pkgname, version, commit;
                pkgname = line_tokens.at (DPKG__LIST__COLUMN_PKGNAME);

                auto pos = line_tokens.at (DPKG__LIST__COLUMN_PKGVERSION).find ("~");
                if (pos != std::string::npos) {
                    version = line_tokens.at (DPKG__LIST__COLUMN_PKGVERSION).substr (0, pos);
                    commit = line_tokens.at (DPKG__LIST__COLUMN_PKGVERSION).substr (pos+1);
                    auto pos2 = commit.find ("-");
                    if (pos2 != std::string::npos) {
                        version += commit.substr (pos2);
                        commit = commit.substr (0, pos2);
                    }
                }
                else {
                    version = line_tokens.at (DPKG__LIST__COLUMN_PKGVERSION);
                }
                if (first) {
                    first = false;
                    output += "\t{\n";
                }
                else {
                    output += ",\t{\n";
                }

                output += "\t\t";
                output += utils::json::jsonify ("package-name", pkgname);
                output += "\n";

                output += ",\t\t";
                output += utils::json::jsonify ("package-version", version);
                output += "\n";

                if (pos != std::string::npos) {
                    output += ",\t\t";
                    output += utils::json::jsonify ("commit", commit);
                    output += "\n";
                }
                output += "\t}\n";
            }
            output += "\t]\n"; // "packages" closing bracket
        } // end of 'packages' json listing

        try {
            std::string unitstate_output;

            log_debug ("shared::output2 (args = '{\"sudo\", \"systemctl\", \"list-json\"}') starting");
            int rv = shared::output2 ({"sudo", "systemctl", "list-json"}, unitstate_output, 0, 100);
            log_debug ("shared::output2 () finished with return value == '%" PRIi32"'", rv);
            if (rv != 0) {
                std::string message =
                    "shared::output2 (args = '{\"sudo\", \"systemctl\", \"list-json\"}') failed; ";
                message += "return code == '" + rv + "'";
                throw std::runtime_error (message);
            }

            if (unitstate_output.empty ()) {
                throw std::runtime_error ("Returned document was empty.");
            }
            std::stringstream input (unitstate_input, std::ios_base::in);
            cxxtools::JsonDeserializer deserializer (input);
            cxxtools::SerializationInfo si;
            deserializer.deserialize (si);

            if (si.category () != cxxtools::SerializationInfo::Category::Array) {
                throw std::runtime_error ("Document root type is not Json Array.");
            }

            if (si.memberCount () == 0) {
                throw std::runtime_error ("Root json array is empty.");
            }

            output += ",\t\"services\" :\n";
            output += unitstate_output ; // includes the brackets

        }
        catch (const std::exception& e) {
            log_warning (
                "Could not display 'services' section of sysinfo that is read from 'systemctl' wrapper "
                "because the following error happened: '%s'", e.what ());
        } // end of 'services' listing and `systemctl` callout

        // Order of columns etc. in OS tools is distro-dependent.
        // We have little machine-friendly use for these, but more
        // for human reading - so passing the native text output
        // is good enough here.
        try {
            std::string diskstate_output;

            log_debug ("shared::output2 (args = '{\"df\", \"-k\"}') starting");
            int rv = shared::output2 ({"df", "-k"}, diskstate_output, 0, 100);
            log_debug ("shared::output2 () finished with return value == '%" PRIi32"'", rv);
            if (rv != 0) {
                std::string message =
                    "shared::output2 (args = '{\"df\", \"-k\"}') failed; ";
                message += "return code == '" + rv + "'";
                throw std::runtime_error (message);
            }

            output += ",\t\t";
            output += utils::json::jsonify ("diskfree-raw", diskstate_output);
            output += "\n";
        }
        catch (const std::exception& e) {
            log_warning (
                "Could not display 'diskfree-raw' section of sysinfo that is read from 'df -k' "
                "because the following error happened: '%s'", e.what ());
        } // end of 'diskfree-raw' listing and `df -k` callout

        // Same comment as above regarding native output pass-through.
        try {
            std::string diskstate_output;

            log_debug ("shared::output2 (args = '{\"mount\"}') starting");
            int rv = shared::output2 ({"mount"}, diskstate_output, 0, 100);
            log_debug ("shared::output2 () finished with return value == '%" PRIi32"'", rv);
            if (rv != 0) {
                std::string message =
                    "shared::output2 (args = '{\"mount\"}') failed; ";
                message += "return code == '" + rv + "'";
                throw std::runtime_error (message);
            }

            output += ",\t\t";
            output += utils::json::jsonify ("mounts-raw", diskstate_output);
            output += "\n";
        }
        catch (const std::exception& e) {
            log_warning (
                "Could not display 'mounts-raw' section of sysinfo that is read from 'mount' "
                "because the following error happened: '%s'", e.what ());
        } // end of 'mounts-raw' listing and `mount` callout

    } // if (profile BiosProfile::Admin) clause closing bracket
    output += "}"; // closing json bracket

}

void
sysinfo_plain (
    std::string& output)
{
    /* This is the short output which prints as little info as needed for the
     * web-GUI footer (should be fast and non-disclosing for security). */
    output.clear ();

    output += "{\n"
    "\t\"restapi-metadata\" : {\n"
    "\t\t\"release-details\" : {\n";

    output += "\t\t\t";
    output += utils::json::jsonify ("osimage-name", OSIMAGE_BASENAME);
    output += "\n";

    output += "\t\t}\n"
    "\t}\n"
    "}";
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>

    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Anonymous, "R"},
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    bool detail = false;
    // argument checking
    {
        std::string sdetail = qparam.param ("detail");
        detail = sdetail == "yes";
    }

    std::string output;
    if (detail) {
        sysinfo_detail (output, request, user.profile ());
    }
    else {
        sysinfo_plain (output);
    }
</%cpp>
<$$ output $>
