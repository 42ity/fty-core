<%pre>
#include <iostream>
#include <sstream>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>
#include "subprocess.h"

static std::string chomp(std::string data) {
	/* TODO: replace inner newlines by "\n" strings */
	data.resize( data.find_last_not_of('\n')+1 );
	return data;
}

static int output2(const shared::Argv& args, std::string& o, std::string& e) {
    int ret = shared::output(args, o, e);
    o = chomp(o);
    e = chomp(e);
    return ret;
}

</%pre>
{
"server-os-features": {
<%cpp>
	std::string cmdout;
	std::string cmderr;
    static const std::string NA = "Not found";
    int ret;

</%cpp>
  "virt": {
<%cpp>
	/* TODO: This currently relies on "systemd-detect-virt" - what about OSes that do not have it? */

	/* Detect container virtualization */
    ret = output2({"/usr/bin/systemd-detect-virt", "-c"}, cmdout, cmderr);
</%cpp>
    "container": "<$ ret == 0 ? cmdout : NA $>",
<%cpp>
	/* Detect VM virtualization */
    ret = output2({"/usr/bin/systemd-detect-virt", "-v"}, cmdout, cmderr);
</%cpp>
    "VM": "<$ ret == 0 ? cmdout : NA $>"
  },
  "uname": {
<%cpp>
	ret = output2({"/bin/uname", "-a"}, cmdout, cmderr);
</%cpp>
    "all": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-s"}, cmdout, cmderr);
</%cpp>
    "kernel-name": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-r"}, cmdout, cmderr);
</%cpp>
    "kernel-release": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-v"}, cmdout, cmderr);
</%cpp>
    "kernel-version": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-m"}, cmdout, cmderr);
</%cpp>
    "machine-hw": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-i"}, cmdout, cmderr);
</%cpp>
    "platform-hw": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-p"}, cmdout, cmderr);
</%cpp>
    "processor": "<$ cmdout $>",
<%cpp>
	ret = output2({"/bin/uname", "-o"}, cmdout, cmderr);
</%cpp>
    "operating-system": "<$ cmdout $>" }
  }
}
