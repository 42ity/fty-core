<%pre>
#include <iostream>
#include <sstream>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>

/**
 * Execute a command and get the result.
 * http://stackoverflow.com/questions/2655374/how-to-redirect-the-output-of-a-system-call-to-inside-the-program-in-c-c
 *
 * @param   cmd - The system command to run.
 * @param   exitcode - Optional storage for process exit code.
 * @return  The string command line output of the command.
 */
std::string GetStdoutFromCommand(std::string cmd, int *exitcode = NULL) {
	std::string data = "";
	FILE * stream;
	const int max_buffer = 256;
	char buffer[max_buffer];
//	cmd.append(" 2>&1"); // Do we want STDERR?

	stream = popen(cmd.c_str(), "r");
	if (stream) {
		while (!feof(stream))
			if (fgets(buffer, max_buffer, stream) != NULL)
				data.append(buffer);
		int ecode = pclose(stream);
		if (exitcode!=NULL) {
			*exitcode = (int)ecode;
		}
	} else {
		if (exitcode!=NULL)
			*exitcode = -1;
	}
	return data;
}

std::string chomp(std::string data) {
	/* TODO: replace inner newlines by "\n" strings */
	data.resize( data.find_last_not_of('\n')+1 );
	return data;
}

</%pre>
{
"server-os-features": {
<%cpp>
	std::string cmdout;
	int cmderr = -1;

</%cpp>
  "virt": {
<%cpp>
	/* TODO: This currently relies on "systemd-detect-virt" - what about OSes that do not have it? */

	/* Detect container virtualization */
	cmdout = chomp(GetStdoutFromCommand("systemd-detect-virt -c", &cmderr));
</%cpp>
    "container": {
      "type" : "<$ cmdout $>",
      "flag" : <$ cmderr $> },
<%cpp>
	/* Detect VM virtualization */
	cmdout = chomp(GetStdoutFromCommand("systemd-detect-virt -v", &cmderr));
</%cpp>
    "virtmachine": {
      "type" : "<$ cmdout $>",
      "flag" : <$ cmderr $> }
  },
  "uname": {
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -a"));
</%cpp>
    "all": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -s"));
</%cpp>
    "kernel-name": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -r"));
</%cpp>
    "kernel-release": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -v"));
</%cpp>
    "kernel-version": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -m"));
</%cpp>
    "machine-hw": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -i"));
</%cpp>
    "platform-hw": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -p"));
</%cpp>
    "processor": "<$ cmdout $>",
<%cpp>
	cmdout = chomp(GetStdoutFromCommand("uname -o"));
</%cpp>
    "operating-system": "<$ cmdout $>" }
  }
}
