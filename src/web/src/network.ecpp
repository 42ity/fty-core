<%pre>
#include "persistence.h"
#include "dbpath.h"
#include "cidr.h"
#include <cctype>
#include <iostream>
#include <sstream>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>
</%pre>

<%cpp>
    std::string meth = request.getMethod();
    if(! (meth == "POST" || meth == "DELETE") ) {
</%cpp>
{ "error" : "invalid request method" }
<%cpp>
        return HTTP_METHOD_NOT_ALLOWED;
    }
    
    std::stringstream input(request.getBody(), std::ios_base::in);
    cxxtools::SerializationInfo si;
    cxxtools::JsonDeserializer deserializer(input);
    
    if(meth == "POST") {
        shared::CIDRAddress cidr;
        std::string net;
        char type;
        int ret;
        try {
            deserializer.deserialize(si);
            si.getMember("net") >>= net;
            cidr = net;
            si.getMember("type") >>= type;
            type = (char)::toupper(type);
        } catch (const std::exception& e) {
            type = '?';
            net = "";
        }

        if (net == "" || ! cidr.valid()) {
</%cpp>
{ "error" : "invalid network" }
<%cpp>
            return HTTP_BAD_REQUEST;
        }
        else if(type != 'M' && type != 'E') {
</%cpp>
{ "error" : "invalid type, must be 'M' or 'E'" }
<%cpp>
            return HTTP_BAD_REQUEST;
        }

        persist::NetHistory nh(url);
        nh.setCommand(type);
        nh.setAddress(cidr);

        ret = nh.dbsave();
        if (ret == 0) {
</%cpp>
{ "error" : "DB INSERT error" }
<%cpp>
            return HTTP_INTERNAL_SERVER_ERROR;
        }
</%cpp>
{ "id" : "<$ nh.getId() $>" }
<%cpp>
    } else {
</%cpp>
{ "error" : "not implemented" }
<%cpp>
        return HTTP_NOT_IMPLEMENTED;
    }
</%cpp>

