<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file config.ecpp
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief  implementation for REST api call to manipulate with
 *         system configuration
 */
 #><%pre>
#include <czmq.h>
#include <string>
#include <exception>
#include <cstdlib>
#include <mutex>
#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>
#include <cxxtools/jsonserializer.h>
#include <cxxtools/regex.h>
#include "helpers.h"
#include "log.h"
#include "utils_web.h"


// define json serialization objects
struct Array
{
    struct Config
    {
        std::string key;
        std::vector <std::string> value;
    };
    Config config;
};

struct Value
{
    struct Config
    {
        std::string key;
        std::string value;
    };
    Config config;
};

void operator<<= (cxxtools::SerializationInfo& si, const Array::Config& config)
{
    si.addMember("key") <<= config.key;
    si.addMember("value") <<= config.value;
}
void operator<<= (cxxtools::SerializationInfo& si, const Array& array)
{
    si.addMember("config") <<= array.config;
}


void operator<<= (cxxtools::SerializationInfo& si, const Value::Config& config)
{
    si.addMember("key") <<= config.key;
    si.addMember("value") <<= config.value;
}
void operator<<= (cxxtools::SerializationInfo& si, const Value& value)
{
    si.addMember("config") <<= value.config;
}

zconfig_t *
load_config_file (const std::string& key)
{
    std::string file = utils::config::get_path (key);
    zconfig_t *config = zconfig_load (file.c_str ());
    if (!config) {
        std::size_t last_slash = file.find_last_of ("/");
        int rv = zsys_dir_create ("%s", file.substr (0, last_slash).c_str ());
        if (rv != 0) {
            log_error ("zsys_dir_create (\"%s\") failed.", file.substr (0, last_slash).c_str ());
            return NULL;
        }
        return zconfig_new ("root", NULL);
    }
    return config;
}

static void
s_roots_destroy (const std::map <std::string, zconfig_t*>& roots)
{
    for (const auto &it: roots)
    {
        zconfig_t *cfg = it.second;
        zconfig_destroy (&cfg);
    }
}
</%pre>
<%application scope="page">
    std::mutex config_mux;
</%application>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
{
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS =
    {
        {BiosProfile::Admin,     "CR"}
    };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string key_format_string = "^[-._a-zA-Z0-9]+$";
    cxxtools::Regex key_format(key_format_string);
    std::string value_format_string = "^[[:blank:][:alnum:][:punct:]]*$";
    cxxtools::Regex value_format(value_format_string);

    ///////////////////
    ///     GET     ///
    ///////////////////
    if (request.isMethodGET ()) {
        std::string checked_key;
        {
            std::string key = qparam.param ("key");
            if (!key_format.match (key)) {
                std::string msg = "satisfy format " + key_format_string;
                http_die ("request-param-bad", "key", key.c_str(), msg.c_str() );
            }
            checked_key = std::move (key);
        }

        std::lock_guard<std::mutex> lock (config_mux);
        zconfig_t *root = zconfig_load (utils::config::get_path (checked_key));
        if (!root) {
            http_die ("element-not-found", checked_key.c_str ());
        }

        const char *config_key = utils::config::get_mapping (checked_key);
        zconfig_t *item = zconfig_locate (root, config_key);
        if (!item) {
            zconfig_destroy (&root);
            http_die("element-not-found", checked_key.c_str ());
        }

        bool is_array = false;
        std::string value = zconfig_value (item);
        std::vector <std::string> array;
        zconfig_t *child = zconfig_child (item);
        if (child) {
            while (child) {
                if (!streq (zconfig_value (child), "")) {
                    is_array = true;
                    array.push_back (zconfig_value (child));
                }
                child = zconfig_next (child);
            }
        }
        zconfig_destroy (&root);

        cxxtools::JsonSerializer serializer (reply.out ());
        serializer.beautify (true);

        if (is_array) {
            Array json;
            json.config.key = checked_key;
            json.config.value = std::move (array);
            serializer.serialize (json).finish ();
        }
        else
        {
            Value json;
            json.config.key = checked_key;
            if (value == "true" || value == "false")
                json.config.value = (value == "true" ? true : false);
            else
                json.config.value = value;
            serializer.serialize (json).finish ();
        }
        return HTTP_OK;
    }

    ////////////////////
    ///     POST      //
    ////////////////////
    if (request.isMethodPOST ()) {
        std::string checked_key;
        std::string checked_value;
        std::vector <std::string> checked_values;

        std::map <std::string, zconfig_t*> roots;
        try {
            std::stringstream input (request.getBody (), std::ios_base::in);
            cxxtools::JsonDeserializer deserializer (input);
            cxxtools::SerializationInfo request_doc;
            deserializer.deserialize (request_doc);
        {
            std::lock_guard<std::mutex> lock (config_mux);

            utils::config::json2zpl (roots, request_doc, lock);

            for (const auto &it : roots) {
                zconfig_t *config = it.second;
                int rv = zconfig_save (config, it.first.c_str ());
                if (rv == -1) {
                    s_roots_destroy (roots);
                    std::string msg = "Cannot save config file " + it.first;
                    http_die ("internal-error", msg.c_str());
                }
            }
        }   // unlock the guard
</%cpp>
{}
<%cpp>
        s_roots_destroy (roots);
        return HTTP_OK;
        }
        catch (const BiosError &e) {
            s_roots_destroy (roots);
            http_die_idx(e.idx, e.what());
        }
    }
}
</%cpp>
