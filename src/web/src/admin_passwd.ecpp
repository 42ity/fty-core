<%pre>
#include <string>

#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>

#include "subprocess.h"
#include "cidr.h"
using namespace shared;

static int
s_passwd(
    const std::string& user,
    const std::string& old_passwd,
    const std::string& new_passwd,
    std::string& err)
{
    Argv args{"/usr/bin/sudo", "/usr/libexec/bios/bios-passwd"};
    std::string out;

    std::string inp = user + "\n" + old_passwd + "\n" + new_passwd + "\n";
    return output(args, out, err, inp);
}

</%pre>
<%cpp>
    std::stringstream input(request.getBody(), std::ios_base::in);
    cxxtools::SerializationInfo si;
    cxxtools::JsonDeserializer deserializer(input);
    std::string user;
    std::string old_passwd;
    std::string new_passwd;
    bool bad_request = false;
    try {
        deserializer.deserialize(si);
        si.getMember("user") >>= user;
        si.getMember("old_passwd") >>= old_passwd;
        si.getMember("new_passwd") >>= new_passwd;
    } catch (const std::exception& e) {
        bad_request = true;
    }
    if (bad_request || user.empty() || old_passwd.empty() || new_passwd.empty()) {
</%cpp>
    {"error" : "user, old_passwd or new_passwd is empty"}
<%cpp>
    return HTTP_BAD_REQUEST;
    }

    std::string err;
    int r = s_passwd(user, old_passwd, new_passwd, err);
    if (r != 0) {
        std::string msg = "changing passwd for user '" + user + "' failed with code " + std::to_string(r);
</%cpp>
{
    "error" : "<$$ msg $>"
    "stderr" : "<$$ err $>"
}
<%cpp>
    return HTTP_BAD_REQUEST;
    }
    std::string msg = "password updated successfully for user '" + user;
</%cpp>
{"passwd": "<$$ msg $>"}
