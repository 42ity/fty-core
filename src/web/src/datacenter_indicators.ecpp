<%pre>
#include "cleanup.h"
#include <czmq.h>
#include <cxxtools/split.h>

#include "asset_msg.h"
#include "assetcrud.h"
#include "data.h"
#include "calc_power.h"
#include "dbpath.h"

float total_datacenter_power(a_elmnt_id_t rack_element_id) {
    
    _scoped_zmsg_t *msg = calc_total_dc_power(url.c_str(),rack_element_id);
    if( ! msg ) { throw "no message"; }
    if( ! is_compute_msg(msg) ) {
        zmsg_destroy(&msg);
        throw "invalid message type";
    }
    _scoped_compute_msg_t* res_compute = compute_msg_decode (&msg);
    zmsg_destroy(&msg);
    compute_msg_print (res_compute);
    _scoped_zhash_t* results = compute_msg_get_results (res_compute);

    m_msrmnt_value_t value;
    m_msrmnt_scale_t scale;
    a_elmnt_id_t num_missed;
    int rv0 = compute_result_value_get(results, &value);
    int rv1 = compute_result_scale_get(results, &scale);
    int rv2 = compute_result_num_missed_get(results, &num_missed);
    compute_msg_destroy(&res_compute);
    zhash_destroy(&results);
    if ( rv0 || rv1 || rv2 ) return 0.0;
    return value * pow(10,scale);
}


float random_value(std::string value) {
    // const values for UI validation
    if( value == "min_power_last_day" ) return 1500.0;
    if( value == "avg_power_last_day" ) return 2750.0;
    if( value == "max_power_last_day" ) return 4000.0;
    if( value == "trend_power_last_day") return -0.3;
    // random values to have some events in UI
    if ( value.find("trend") != std::string::npos ) {
        return (-5.0 + (std::rand() % 100)/10.0 );
    }
    if ( value.find("power") != std::string::npos ) {
        return (1600.0 + (std::rand() % 20000)/10.0 );
    }
    if ( value.find("temperature") != std::string::npos ) {
        return (15.0 + (std::rand() % 150)/10.0 );
    }
    if ( value.find("humidity") != std::string::npos ) {
        return (5.0 + (std::rand() % 100)/10.0 );
    }
    return 0.0;
}

</%pre>
<%args>
std::string arg1;
std::string arg2;
</%args>
<%thread scope="global">
asset_manager asset_mgr;
</%thread>
<%cpp>
    // Check URL validity
    if( arg1 == "" || arg2 == "" ) {
</%cpp>
{ "error":"bad_input", "msg":"missing argument" }
<%cpp>
        return HTTP_BAD_REQUEST;
    }
    std::vector<std::string> DCs;
    std::vector<std::string> DCNames;
    std::vector<std::string> requestedParams;
    static std::vector<std::string> validParams = {
        "power",
        "avg_power_last_day",
        "avg_power_last_week",
        "avg_power_last_month",

        "min_power_last_day",
        "min_power_last_week",
        "min_power_last_month",

        "max_power_last_day",
        "max_power_last_week",
        "max_power_last_month",

        "trend_power_last_day",
        "trend_power_last_week",
        "trend_power_last_month",

        "temperature",
        "avg_temperature_last_day",
        "avg_temperature_last_week",
        "avg_temperature_last_month",

        "min_temperature_last_day",
        "min_temperature_last_week",
        "min_temperature_last_month",

        "max_temperature_last_day",
        "max_temperature_last_week",
        "max_temperature_last_month",

        "trend_temperature_last_day",
        "trend_temperature_last_week",
        "trend_temperature_last_month",

        "humidity",
        "avg_humidity_last_day",
        "avg_humidity_last_week",
        "avg_humidity_last_month",

        "min_humidity_last_day",
        "min_humidity_last_week",
        "min_humidity_last_month",

        "max_humidity_last_day",
        "max_humidity_last_week",
        "max_humidity_last_month",

        "trend_humidity_last_day",
        "trend_humidity_last_week",
        "trend_humidity_last_month"
        
    };
    cxxtools::split(",", arg1, std::back_inserter(DCs));
    // check that DC exists
for( size_t D = 0; D <DCs.size() ; ++D ) {
    _scoped_zmsg_t * msg = asset_mgr.get_item("datacenter",DCs[D]);
    if ( is_asset_msg (msg) ) {
        _scoped_asset_msg_t* element = asset_msg_decode (&msg);
        if ( asset_msg_id( element ) == ASSET_MSG_ELEMENT ) {
            DCNames.push_back(asset_msg_name(element));
        } else {
</%cpp>
{"error":"bad_input", "msg":"invalid DC id"}
<%cpp>
            asset_msg_destroy (&element);
            zmsg_destroy(&msg);
            return HTTP_BAD_REQUEST;
        }
        asset_msg_destroy (&element);
    } else {
</%cpp>
{"error":"bad_input", "msg":"invalid DC id"}
<%cpp>
        zmsg_destroy(&msg);
        return HTTP_BAD_REQUEST;
    }
    zmsg_destroy(&msg);
}
cxxtools::split(",", arg2, std::back_inserter(requestedParams));
for(std::string &param: requestedParams) {
    if( std::find( validParams.begin(), validParams.end(), param ) == validParams.end() ) {
</%cpp>
{"error":"bad_input", "msg":"invalid parameter" }
<%cpp>
      return HTTP_BAD_REQUEST;
    }
}
std::stringstream json;
try {
    json << "{\n\t\"datacenter_indicators\": [\n";
    for( size_t D = 0 ; D < DCs.size(); D++ ) {
        json << "\t\t{\n"
             << "\t\t\t\"id\": \"" << DCs[D] << "\",\n"
             << "\t\t\t\"name\": \"" << DCNames[D] << "\",\n";
        for(size_t P = 0; P < requestedParams.size(); P++ ) {
            if( requestedParams[P] == "power" ) {
                json << "\t\t\t\"power\": " << total_datacenter_power( atoi(DCs[D].c_str()) );
            } else {
                json << "\t\t\t\"" << requestedParams[P] << "\": " << random_value( requestedParams[P] );
            }
            json << ( ( P < requestedParams.size() - 1 ) ? ",\n" : "\n" ) ;
        }
        json << "\t\t}" << (  D < DCs.size() -1 ? ",\n" : "\n" );
    }
    json << "\t]\n}\n";
} catch ( const std::exception& e ) {
</%cpp>
<h1>internal server error</h1>
<$ e.what() $>
<%cpp>      
      return HTTP_INTERNAL_SERVER_ERROR;   
}
</%cpp>
<$$ json.str() $>
