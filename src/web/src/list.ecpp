<%pre>
#include "cleanup.h"
#include <czmq.h>

#include "asset_msg.h"
#include "common_msg.h"
#include "data.h"
#include "assetcrud.h"
</%pre>
<%thread scope="global">
asset_manager asset_mgr;
</%thread>
<%cpp>
    // Check URL validity
    std::string id;

    // Get data
    _scoped_zmsg_t* dta = asset_mgr.get_items (request.getArg("type"));

    // Error handling
    if ( dta == NULL ) {
</%cpp>
{ "error":"item_not_found" }
<%cpp>
        return HTTP_NOT_FOUND;
    }

    if ( is_common_msg(dta) )
    {
        common_msg_t* dtacommon = common_msg_decode (&dta);
        if ( common_msg_id (dtacommon) == COMMON_MSG_FAIL ) 
        {
            switch ( common_msg_errorno (dtacommon) ) {
                case DB_ERROR_NOTFOUND:
</%cpp>
{ "error":"item_not_found" }
<%cpp>
                    common_msg_destroy (&dtacommon);
                    return HTTP_NOT_FOUND;
                case DB_ERROR_BADINPUT:
</%cpp>
{ "error":"bad_input" }
<%cpp>
                    common_msg_destroy (&dtacommon);
                    return HTTP_BAD_REQUEST;
                default:
</%cpp>
{ "error":"internal_error" }
<%cpp>    
                    common_msg_destroy (&dtacommon);
                    return HTTP_INTERNAL_SERVER_ERROR;
            }
        }
        else
        {   // unexpected message
</%cpp>
{ "error":"internal_error" }
<%cpp>    
            common_msg_destroy (&dtacommon);
            return HTTP_INTERNAL_SERVER_ERROR;
        }
    }

    // Prepare the reply
</%cpp>
{
    "<$ request.getArg("type") $>s": [
<%cpp>
    asset_msg_t* dtaasset = asset_msg_decode (&dta);
    zhash_t *ids = asset_msg_get_element_ids (dtaasset);
    if(ids != NULL) {
        int count = zhash_size(ids);
        int i = 0;
        void *it = NULL;
        for(i = 1, it = zhash_first(ids); it != 0;
            i++,   it = zhash_next(ids) ) {
</%cpp>
        {
            "id":"<$ (char*)zhash_cursor(ids) $>",
            "name":"<$ (char*)it $>"
        }<? i != count ? "," ?>
%       }
    ]
%   }
}
%   asset_msg_destroy (&dtaasset);
%   zhash_destroy (&ids);
