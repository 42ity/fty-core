<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file license_POST.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Alena Chernikava <alenachernikava@Eaton.com>
 * \brief Accept license
 */
 #><%pre>
#include <unistd.h>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string.h>
#include <stdlib.h>

#include "utils.h"
#include "cleanup.h"
#include "helpers.h"
#include "log.h"
#include "str_defs.h" // EV_LICENSE_DIR, EV_DATA_DIR
static
char* get_current_license_version (const char* license_file)
{
    // ASSUMPTION: the symlink to the text of the licence is: /XXX
    // $ ls -l /XXX
    // lrwxrwxrwx. 1 achernikava achernikava 3 Sep 25  2015 /XXX -> 1.0
    //
    // FYI:
    // readlink() places the contents of the symbolic link pathname in the
    // buffer buf, which has size bufsiz.  readlink() does not append a null
    // byte to buf.  It will truncate the contents (to a length of bufsiz
    // characters), in case the buffer is too small to hold all of the
    // contents.
    //
    // ssize_t readlink(const char *pathname, char *buf, size_t bufsiz);

    char *buff = (char *) malloc (sizeof(char)*512);
    memset(buff, 0, sizeof(char)*512);
    int rv = readlink (license_file, buff, sizeof(char)*512);
    //
    // On success, these calls return the number of bytes placed in buf.
    // On error, -1 is returned and errno is set to indicate the error.
    //
    if ( rv == -1 ) {
        log_error ("Cannot read symlink for license");
        return NULL;
    }
    buff[rv] = '\0';
    return buff;
}
static
char *get_current_license_file (void) {
    char *current_license = NULL;
    char *env = getenv (EV_LICENSE_DIR);

    int rv = asprintf (&current_license, "%s/current", env ? env : "/usr/share/bios/license");
    if ( rv == -1 ) {
        return NULL;
    }
    return current_license;
}
char *get_accepted_license_file (void) {
    char *accepted_license = NULL;
    char *env = getenv (EV_DATA_DIR);

    if (asprintf (&accepted_license, "%s/license", env ? env : "/var/lib/bios" ) == -1) {
        return NULL;
    }
    return accepted_license;
}
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
{
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    char *license_file = get_current_license_file ();
    if ( license_file == NULL ) {
        http_die ("internal-error", "Cannot get the path to the text of the current license");
    }
    char *current_license_version = get_current_license_version (license_file);
    if ( current_license_version == NULL ) {
        free (license_file); license_file = NULL;
        http_die ("internal-error", "Cannot get version of the text of the current license");
    }

    char *accepted_license_file = get_accepted_license_file ();
    if ( accepted_license_file == NULL ) {
        free (current_license_version); current_license_version = NULL;
        free (license_file); license_file = NULL;
        http_die ("internal-error", "Cannot get the path to the actual status of the accepted license");
    }
    FILE *f = fopen (accepted_license_file, "w");
    if ( f == NULL ) {
        free (accepted_license_file); accepted_license_file = NULL;
        free (current_license_version); current_license_version = NULL;
        free (license_file); license_file = NULL;
        http_die ("internal-error", "Cannot open file with actual information about accepted license");
    }
    uint64_t tme = ::time(NULL);
    fprintf (f, "%s\n%" PRIu64 "\n%s\n", current_license_version, tme, user.login().c_str());
    fclose (f);
    log_debug("License: version='%s',tme='%" PRIu64 "',user='%s')",
                current_license_version, tme, user.login().c_str());
</%cpp>
{ "success" : "License version <$ current_license_version $> accepted." }
<%cpp>
    free (accepted_license_file); accepted_license_file = NULL;
    free (current_license_version); current_license_version = NULL;
    free (license_file); license_file = NULL;
}
</%cpp>
