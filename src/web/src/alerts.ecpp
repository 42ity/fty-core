<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #>

<#\n/*!
 * \file alerts.ecpp
 * \author Michal Vyskocil
 * \author Alena Chernikava
 * \author Tomas Halman
 * \author Karol Hrdina
 * \brief Not yet documented file
 */\n#>
<%pre>
#include <string>
#include <vector>
#include <tntdb/connection.h>

#include "db/alerts.h"
#include "utils.h"
#include "dbpath.h"
#include "data.h"

</%pre>
<%cpp>
    //TODO: checking of arguments, atm /alerts == /alerts/all == /alerts/foo/bar/baz

    tntdb::Connection conn = tntdb::connectCached(url);
    auto db_reply = persist::select_alert_all_opened(conn);
    if (db_reply.status == 0) {
</%cpp>
{
    "error" : "<$$ db_reply.msg $>"
}
<%cpp>
        return HTTP_INTERNAL_SERVER_ERROR;
    }
</%cpp>
{ "alerts":
  [
<%cpp>
    size_t cnt = 0;
    for (const auto& i : db_reply.item) {
        cnt ++;
        char t1[64];
        calendar_to_datetime(i.date_from, t1, 64); // TODO: check return value?
        auto element_name = i.rule_name;
        auto idx = element_name.find('@');
        if (idx != std::string::npos) {
            element_name = '"' + element_name.substr(idx+1) + '"';
        }
        auto sprio = "P" + std::to_string(i.priority);
</%cpp>
    {
        "id" : <$$ i.id $>,
        "source_ts" : "<$$ t1 $>",
        "application_name" : "ALERT",
        "rule_name" : "<$$ i.rule_name $>",
        "element_id" : <$$ i.device_ids.empty() ? "null" : std::to_string(i.device_ids[0]) $>,
        "element_name" : <$$ i.device_ids.empty() ? "null" : element_name $>,
        "element_type" : <$$ i.type_name.empty() ?  "null" : "\"" + i.type_name + "\"" $>, 
        "element_sub_type" : <$$ i.subtype_name.empty() ? "null" : "\"" + i.subtype_name + "\"" $>,
        "severity" : "critical",
        "priority" : "<$$ sprio $>",
        "description" : "<$$ i.description $>",
        "state" : "<$$ alert_state_to_str(static_cast<alert_state_t>(i.alert_state)) $>",
        "last_state_ts" : null
    }<$ cnt != db_reply.item.size() ? ',' : ' ' $>
%}
  ]
}
