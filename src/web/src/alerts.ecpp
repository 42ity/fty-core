<%pre>
#include <string>
#include <vector>
#include <tntdb/connection.h>

#include "alert.h"
#include "dbpath.h"
#include "data.h"

//TODO: move to utils.h
//! \brief convert unix time to rest api time
//
//  caller is responsible for allocating large enough buffer
inline int restapitime(time_t t, char* buf, size_t s) {
    struct tm* tmp = gmtime(&t);
    if (!tmp)
        return -1;
    strftime(buf, s, "%Y%m%d%H%M%SZ", tmp);
    return 0;
}
// TODO - consolidate with alerts agent once merged
inline const char* alert_state_to_string(int state) {
    switch (state) {
        case 0:
            return "no-alert";;
        case 1:
            return "ongoing";;
    }
    return "uknown";;
}


</%pre>
<%thread scope="global">
tntdb::Connection conn = tntdb::connectCached(url);
</%thread>
{ "alerts":
  [
<%cpp>

    //TODO: checking of arguments, atm /alerts == /alerts/all == /alerts/foo/bar/baz

    auto db_reply = select_alert_all_opened(conn);
    if (db_reply.status == 0) {
</%cpp>
{
    "error" : "<$$ db_reply.msg $>"
}
<%cpp>
        return HTTP_INTERNAL_SERVER_ERROR;
    }
    size_t cnt = 0;
    for (const auto& i : db_reply.item) {
        cnt ++;
        char t1[64];
        restapitime(i.date_from, t1, 64);
        auto element_name = i.rule_name;
        auto idx = element_name.find('@');
        if (idx != std::string::npos) {
            element_name = '"' + element_name.substr(idx+1) + '"';
        }
        auto sprio = "P" + std::to_string(i.priority);
</%cpp>
    {
        "id" : <$ i.id $>,
        "source_ts" : "<$ t1 $>",
        "application_name" : "ALERT",
        "rule_name" : "<$ i.rule_name $>",
        "element_id" : <$ i.device_ids.empty() ? "null" : std::to_string(i.device_ids[0]) $>,
        "element_name" : <$ i.device_ids.empty() ? "null" :element_name $>,
        "severity" : "critical",
        "priority" : "<$ sprio $>",
        "description" : "<$ i.description $>",
        "state" : "<$ alert_state_to_string(i.alert_state) $>",
        "last_state_ts" : null
    }<$ cnt != db_reply.item.size() ? ',' : ' ' $>
%}
  ]
}
