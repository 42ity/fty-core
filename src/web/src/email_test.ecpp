<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file email_test.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief Sends test email. 
 */
 #><%pre>
#include "helpers.h"
#include "tntmlm.h"
#include <stdlib.h>

        
// encode GET message for smtp agent         
static zmsg_t*
s_smtp_GET_message (const char* email)
{
    assert(email);
        
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr(msg, email);
    zmsg_addstr (msg, "Test email");                // email subject
    zmsg_addstr(msg, "This is email test.");        // body
    return msg;
}
      
</%pre>

<%cpp>
    const std::string email;
  
    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("mlm_pool.get () failed.");
        http_die ("internal-error", "mlm_pool.get () failed.");
    }

    // send message
    zmsg_t *send = s_smtp_GET_message (email.c_str());
    int rv = client->sendto ("agent-smtp", "SENDMAIL", 1000, &send);

    if (rv == -1)
    {
        // errors
    }

    // recive message  
    zmsg_t *recieve = client->recv (NULL , 5);
    if (!recieve)
    {
        log_critical ("client->recv (timeout = '5') returned NULL");
        http_die ("internal-error", "client->recv () returned NULL");
    }

    char *result = zmsg_popstr (recieve);
    if (streq (result, "SENDMAIL-ERR"))
    {
  
    } else
    if (streq (result, "SENDMAIL-OK"))
        return HTTP_OK;
    else
    {
        log_critical ("Error: invalid reply message recieved.");
        http_die ("internal-error", "client->recv () returned NULL");
    }

    zstr_free(&result);
    zmsg_destroy(&recieve);
    zmsg_destroy(&send);
  
</%cpp>


