<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file email_test.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief Sends test email. 
 */
 #><%pre>
#include "helpers.h"
#include "tntmlm.h"
#include <stdlib.h>
#include <sys/types.h>
#include <sys/syscall.h>
        
// encode GET message for smtp agent         
static zmsg_t*
s_smtp_GET_message (const char* email, zuuid_t *uuid)
{
    assert(email);
        
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    zmsg_addstr(msg, email);
    zmsg_addstr (msg, "Test email");                              // email subject
    zmsg_addstr(msg, "This is email test. Do not reply.");        // body
    return msg;
}
      
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string checked_email;
    {
        std::string email = qparam.param ("email");

        if (email.empty ())
            http_die ("request-param-required", "from");

        if (email.find ('@', 0) == std::string::npos)
            http_die ("request-param-bad", "email", email.c_str (), "valid email address");

        checked_email = email;
    }

    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("Error: mlm_pool.get () failed.");
        http_die ("internal-error", "mlm_pool.get () failed.");
    }

    // send message
    zuuid_t *uuid = zuuid_new ();
    zmsg_t *send = s_smtp_GET_message (checked_email.c_str(), uuid);
    int rv = client->sendto ("agent-smtp", "SENDMAIL", 1000, &send);

    if (rv == -1)
    {
        log_critical (
                    "Error: client->sendto (address = '%s', subject = '%s', timeout = 1000) failed.",
                        "agent-smtp", "SENDMAIL");
        http_die ("internal-error", "client->sendto () failed");
    }

    zmsg_t *recieve = client->recv (zuuid_str_canonical (uuid) , 5);
    zuuid_destroy (&uuid);
    if (!recieve)
    {
        log_critical ("Error: client->recv (timeout = '5') returned NULL");
        http_die ("internal-error", "client->recv () returned NULL");
    }

    char *err_code = zmsg_popstr (recieve);
    char *err_code = zmsg_popstr (recieve);
    char *err_message = zmsg_popstr (recieve);
    const char *msg_subject = client->subject();
    std::string status;
  
    if (streq (msg_subject, "SENDMAIL-OK"))
     {
         status = "Succeeded"; 
         return HTTP_OK;
     }   
    else
    if (streq (msg_subject, "SENDMAIL-ERR"))
    {
        status = "Failed"; 
        log_critical ("Error: client->recv (timeout = '5') returned error. code %s, msg %s.", err_code,err_message);
        http_die ("internal-error", "client->recv () returned error");
    } else
    {
        status = "Failed";
        log_critical ("Error: message recieved with invalid subject.");
        http_die ("internal-error", "client->recv () invalid message subject");
    }
  
    zmsg_destroy(&recieve);
    zmsg_destroy(&send);
    free(&msg_subject);
</%cpp>
"test_status:"
{
    "status" : <$ status $>,
    "error_code" : <$ err_code $>,
    "reason" : <$ err_message $>
}
<%cpp>

    zstr_free(&err_code);
    zstr_free(&err_message);
</%cpp>


