<#
 #
 # Copyright (C) 2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file input_power_chain.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief Returns input power chain. 
 */
 #><%pre>
#include <string>
#include <iostream>
#include <utility>
#include <cxxtools/jsonserializer.h>
#include <cxxtools/serializationinfo.h>
#include "helpers.h"
#include "dbpath.h"
#include "assettopology.h"
        
// struct for "devices" array    
struct Array_devices
{
    std::map <std::string,
              std::pair
                    <std::string,
                     std::string>> devices;
};

// struct for "powerchains" array        
struct Array_power_chain
{
    std::vector <std::tuple
                          <std::string,
                           std::string,
                           std::string,
                           std::string>> powerchains;        
};

// main json structure for json response
struct Topology
{
    std::vector <Array_devices> devices;
    std::vector <Array_power_chain> powerchains;
};

// that's how main structure is serialized 
void operator<<= (cxxtools::SerializationInfo& si, const Topology& input_power)
{
    si.addMember("devices") <<= input_power.devices;
    si.addMember("powerchains") <<= input_power.powerchains;
}

// that's how "devices" array is serialized
void operator<<= (cxxtools::SerializationInfo& si, const Array_devices& array_devices)
{
    for (const auto& device : array_devices.devices)
    {
        si.addMember ("name") <<= device.first.c_str();
        si.addMember ("id") <<= device.second.first.c_str();
        si.addMember ("syb_type") <<= device.second.second.c_str();
        // has to be c_str???
    }
}

// that's how "powerchains" array is serialized
void operator<<= (cxxtools::SerializationInfo& si, const Array_power_chain& array_power_chain)
{
    for (const auto& chain : array_power_chain.powerchains)
    {
        if (std::get <3> (chain) != "")
            si.addMember ("src-socket") <<= std::get <3> (chain).c_str();
        
        if (std::get <1> (chain) != "")        
            si.addMember ("dst-socket") <<= std::get <1> (chain).c_str();

        si.addMember ("src-id") <<= std::get <2> (chain);
        si.addMember ("dst-id") <<= std::get <0> (chain);
    }
}
        
</%pre>
<%request scope="global">
    UserInfo user;
</%request>
<%cpp>

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,         "R"},
            {BiosProfile::Dashboard,     "R"}
    };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    Topology topo;
    Array_devices devices_item;
    Array_power_chain powerchains_item;
    std::vector <Array_power_chain> powerchains_vector;
    std::vector <Array_devices> devices_vector;
  
    // test data for powerchains -- dst-id, dst-socket, src-id, src-socket
    std::vector <std::tuple <std::string, std::string, std::string, std::string>> powerchains_data;
    //powerchains_data.push_back(std::make_tuple("1","12","2",""));
    std::map <std::string, std::pair <std::string, std::string>> devices_data;
    //devices_data.emplace (std::make_pair ("name_val", std::make_pair("id_val","syb_type_val")));

    // id of datacenter retrieved from url
    std::string dc_id = request.getArg ("id");
    log_debug ("Requested parameter:  dc_id=%s\n", dc_id.c_str());

    if (dc_id.empty ())
        http_die ("request-param-bad", dc_id.c_str ());

    int rv = input_power_group_response (url, atoi (dc_id.c_str ()), devices_data, powerchains_data);
  //int rv = input_power_group_response (url, atoi (dc_id.c_str ()), devices_item.devices, powerchains_item.powerchains);
  
    if (rv == -1)    
    {    
        log_debug ("input_power_group_response = '%i'", rv);
        //http_die ("request-param-bad", rv);
    }
  
    devices_item.devices = devices_data;
    powerchains_item.powerchains = powerchains_data;
         
    // feed "powerchains" and "devices" arrays
    powerchains_vector.push_back(powerchains_item);
    powerchains_vector.push_back(powerchains_item);
    devices_vector.push_back (devices_item);
    devices_vector.push_back (devices_item);
         
    topo.devices = std::move (devices_vector);
    topo.powerchains = std::move (powerchains_vector);

    cxxtools::JsonSerializer serializer (reply.out ());
    serializer.beautify(true);
    serializer.serialize(topo).finish(); 

    return HTTP_OK;                             
</%cpp>




