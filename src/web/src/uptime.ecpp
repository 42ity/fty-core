<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file uptime.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \brief Not yet documented file
 */
 #><%pre>

#include <malamute.h>
#include <sys/types.h>
#include <sys/syscall.h>
#include <cxxtools/split.h>
#include <tntdb/error.h>
#include "data.h"
#include "dbpath.h"
#include "db/calculation.h"
#include "utils_web.h"
#include "log.h"
#include "helpers.h"

</%pre>

<%args>
std::string arg1;
</%args>

<%thread scope="global">
asset_manager asset_mgr;
</%thread>

<%cpp>
    // Input arguments checks

    // arg1 is mandatory
    if (arg1.empty ()) {
        http_die ("request-param-required", "arg1");
    }

    std::vector<std::string> DCs;
    std::vector<std::string> DCNames;
    cxxtools::split(",", arg1, std::back_inserter(DCs));

    // check that DC exists
    auto allDcsShort = asset_mgr.get_items1 ("datacenter", "");
    if (allDcsShort.status == 0) {
        http_die ("internal-error", "Error while retrieving information about datacenters.");
    }

    for (auto const& item : DCs) {
        http_errors_t errors;
        uint32_t real_id = 0;

        if (!check_element_identifier ("element_id", item, real_id, errors)) {
            http_die_error (errors);
        }

        auto it = allDcsShort.item.find(real_id);
        if (it == allDcsShort.item.end()) {
            http_die ("element-not-found", item.c_str ());
        }
        DCNames.push_back(it->second);
    }

    std::stringstream json;
    mlm_client_t *client;
    try {
        client = mlm_client_new ();
        if (!client)
            throw std::runtime_error ("Can't allocate malamute client");

        std::string name = "ui." + std::to_string (::getpid ()) + "." + std::to_string (::syscall (SYS_gettid));
        mlm_client_connect (client, "ipc://@/malamute", 1000, name.c_str());

        json << "{\n\t\"outage\": [\n";

        for ( size_t D = 0 ; D < DCs.size(); D++ )
        {

            mlm_client_sendtox (
                client,
                "uptime",
                "UPTIME",
                NULL,
                1000,
                "UPTIME",
                DCNames[D].c_str(),
                NULL);
            int r;
            char *subject, *command, *total, *offline;
            r = mlm_client_recvx (client, &subject, &command, &total, &offline, NULL);
            if (r == -1)
                throw std::runtime_error ("Can't send the request");

            //MVY: why this calculation can't be done in Javascript???
            //     exceptions will be catched below ...
            uint64_t u_total = std::stoll (total);
            uint64_t u_offline = std::stoll (offline);

            json << "\t\t{\n"
                 << "\t\t\t\"id\": \""   << DCs[D]           << "\",\n"
                 << "\t\t\t\"name\": \"" << DCNames[D]       << "\",\n"
                 << "\t\t\t\"outage\" : "<<  u_total - u_offline  <<   ",\n"
                 << "\t\t\t\"total\" : " <<  total           <<    "\n";
            json << "\t\t}" << (  D < DCs.size() -1 ? ",\n" : "\n" );
        }
        json << "\t]\n}\n";
    }
    catch (const std::exception& e) {
        mlm_client_destroy (&client);
        log_error ("%s", e.what ());
        http_die ("internal-error");
    }
</%cpp>
<$$ json.str() $>
