<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file topology_power.ecpp
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief  process power topology requests
 */
 #><%pre>
#include <string>
#include <sstream>
#include <vector>
#include <czmq.h>

#include "defs.h"
#include "dbpath.h"
#include "asset_types.h"
#include "assettopology.h"
#include "utils_web.h"
#include "log.h"
#include "cleanup.h"
#include "helpers.h"
</%pre>
<%args>
std::string from;
std::string to;
std::string filter_dc;
std::string filter_group;
</%args>
<%cpp>
{
    if (from.empty() && to.empty() && filter_dc.empty() && filter_group.empty()) {
        http_die("request-param-required", "from/to/filter_dc/filter_group");
    }

    _scoped_asset_msg_t *input_msg = NULL;
    std::string id;
    std::string parameter_name;
////////////////////////
//      FROM
////////////////////////
    if (!from.empty()) {
        if (!to.empty() || !filter_dc.empty() || !filter_group.empty()) {
            http_die("parameter-conflict", "Only one parameter can be specified at once: 'from' or 'to' or 'filter_dc' or 'filter_group'");
        }
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_FROM);
        assert (input_msg);
        id = from;
        parameter_name = "from";
    }

//////////////////
//      TO
//////////////////
     if (!to.empty()) {
        if ( !filter_dc.empty() || !filter_group.empty() || !from.empty() ) {
            http_die("parameter-conflict", "Only one parameter can be specified at once: 'from' or 'to' or 'filter_dc' or 'filter_group'");
        }
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_TO);
        assert (input_msg);
        id = to;
        parameter_name = "to";
    }

//////////////////////
//      FILTER_DC
//////////////////////
    if (!filter_dc.empty()) {
        if (!filter_group.empty() || !to.empty() || !from.empty()) {
            http_die("parameter-conflict", "Only one parameter can be specified at once: 'from' or 'to' or 'filter_dc' or 'filter_group'");
        }
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_DATACENTER);
        assert (input_msg);
        id = filter_dc;
        parameter_name = "filter_dc";
    }

//////////////////////
//      FILTER_GROUP
//////////////////////
    if (!filter_group.empty()) {
        if (!to.empty() || !from.empty() || !filter_dc.empty()) {
            http_die("parameter-conflict", "Only one parameter can be specified at once: 'from' or 'to' or 'filter_dc' or 'filter_group'");
        }
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_GROUP);
        assert (input_msg);
        id = filter_group;
        parameter_name = "filter_group";
    }

    // convert string to number
    http_errors_t errors;
    a_elmnt_id_t element_id = 0;

    if (!check_element_identifier (parameter_name.c_str (), id, element_id, errors)) {
        http_die_error (errors);
    }

   // Call persistence layer
    asset_msg_set_element_id (input_msg,  element_id);
    _scoped_zmsg_t *return_msg = process_assettopology (url.c_str(), &input_msg);
    if (return_msg == NULL) {
        log_error ("Function process_assettopology() returned a null pointer");
        LOG_END;
        http_die("internal-error");
    }

    if (is_common_msg (return_msg)) {
        _scoped_common_msg_t *common_msg = common_msg_decode (&return_msg);
        if (common_msg == NULL) {
            if (return_msg != NULL) {
                zmsg_destroy (&return_msg);
            }
            log_error ("common_msg_decode() failed");
            LOG_END;
            http_die("internal-error");
        }

        if (common_msg_id (common_msg) == COMMON_MSG_FAIL) {
            log_error ("common_msg is COMMON_MSG_FAIL");
            LOG_END;
            switch(common_msg_errorno(common_msg)) {
                case(DB_ERROR_BADINPUT):
                    log_error ("This should never happen");
                    http_die("request-param-bad", parameter_name.c_str(), id.c_str(), "integer value");
                case(DB_ERROR_NOTFOUND):
                    http_die("element-not-found", id.c_str());
                default:
                    http_die("internal-error", "");
            }
        }
        else {
            log_error ("Unexpected common_msg received. ID = %" PRIu32 , common_msg_id (common_msg));
            LOG_END;
            http_die("internal-error", "");
        }
    }
    else if (is_asset_msg (return_msg)) {
        _scoped_asset_msg_t *asset_msg = asset_msg_decode (&return_msg);

        if (asset_msg == NULL) {
            if (return_msg != NULL) {
                zmsg_destroy (&return_msg);
            }
            log_error ("asset_msg_decode() failed");
            LOG_END;
            http_die("internal-error");
        }

        if (asset_msg_id (asset_msg) == ASSET_MSG_RETURN_POWER) {
            _scoped_zlist_t *powers = asset_msg_get_powers (asset_msg);
            _scoped_zframe_t *devices = asset_msg_get_devices (asset_msg);
            asset_msg_destroy (&asset_msg);

            std::string json = "{";
            if (devices) {
                byte *buffer = zframe_data (devices);
                assert (buffer);
                _scoped_zmsg_t *zmsg = zmsg_decode ( buffer, zframe_size (devices));
                if (zmsg == NULL || !zmsg_is (zmsg)) {
                    zframe_destroy (&devices);
                    log_error ("zmsg_decode() failed");
                    LOG_END;
                    http_die("internal-error");
                }
                zframe_destroy (&devices);

                json.append ("\"devices\" : [");
                _scoped_zmsg_t *pop = NULL;
                bool first = true;
                while ((pop = zmsg_popmsg (zmsg)) != NULL) { // caller owns zmgs_t
                    if (!is_asset_msg (pop)) {
                        zmsg_destroy (&zmsg);
                        log_error ("malformed internal structure of returned message");
                        LOG_END;
                        http_die("internal-error");
                    }
                    _scoped_asset_msg_t *item = asset_msg_decode (&pop); // _scoped_zmsg_t is freed
                    if (item == NULL) {
                        if (pop != NULL) {
                            zmsg_destroy (&pop);
                        }
                        log_error ("asset_smg_decode() failed for internal messages");
                        LOG_END;
                        http_die("internal-error");
                    }

                    if (first == false) {
                        json.append (", ");
                    } else {
                        first = false;
                    }
                    json.append("{ \"name\" : \"").append(asset_msg_name (item)).append("\",");
                    json.append("\"id\" : \"").append(std::to_string(asset_msg_element_id (item))).append("\",");
                    json.append("\"sub_type\" : \"").append(asset_msg_type_name (item)).append("\"}");

                    asset_msg_destroy (&item);
                }
                zmsg_destroy (&zmsg);
                json.append ("] ");
            }

            if (powers) {
                if (json != "{") {
                    json.append (", ");
                }
                json.append ("\"powerchains\" : [");

                const char *item = (const char*) zlist_first (powers);
                bool first = true;
                while (item != NULL) {
                    if (first == false) {
                        json.append (", ");
                    } else {
                        first = false;
                    }
                    json.append ("{");
                    std::vector<std::string> tokens;
                    std::istringstream f(item);
                    std::string tmp;
                    // "src_socket:src_id:dst_socket:dst_id"
                    while (getline(f, tmp, ':')) {
                        tokens.push_back(tmp);
                    }
                    json.append("\"src-id\" : \"").append(tokens[1]).append("\",");
                    if (!tokens[0].empty() && tokens[0] != "999") {
                        json.append("\"src-socket\" : \"").append(tokens[0]).append("\",");
                    }
                    json.append("\"dst-id\" : \"").append(tokens[3]).append("\"");
                    if (!tokens[2].empty() && tokens[2] != "999") {
                        json.append(",\"dst-socket\" : \"").append(tokens[2]).append("\"");
                    }
                    json.append ("}");
                    item = (const char*) zlist_next (powers);
                }
                json.append ("] ");
            }
            json.append ("}");
</%cpp>
<$$ json $>
<%cpp>
        }
        else {
            log_error ("Unexpected asset_msg received. ID = %" PRIu32 , asset_msg_id (asset_msg));
            LOG_END;
            http_die("internal-error", "");
        }
    }
    else {
        log_error ("Unknown protocol");
        LOG_END;
        http_die("internal-error", "");
    }
}
</%cpp>
