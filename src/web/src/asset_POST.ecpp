<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_POST.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \brief Implementation of POST operation on any asset
 */
 #><%pre>
#include "data.h"
#include "configure_inform.h"
#include "asset_types.h"
#include "defs.h"
#include "utils_web.h"
#include "csv.h"
#include "inout.h"
#include <cxxtools/jsondeserializer.h>
#include <cxxtools/serializationinfo.h>
</%pre>
<%cpp>
    // Read json, transform to csv, use existing functionality
    cxxtools::SerializationInfo si;
    // read json a deserialize it
    try {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);

    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("bad-request-document");
    }

    try{
        shared::CsvMap cm = shared::CsvMap_from_serialization_info(si);

        // POST /asset is currently used to insert new datacenter from wizard
        // all you need when implementing POST for other types is to support structured error handling
        // emppty document
        if (cm.cols() == 0 || cm.rows() == 0)
            http_die("bad-request-document", "Cannot import empty document.");
        // in underlying functions like update_device
        if (!cm.hasTitle("type"))
            http_die("request-param-required", "type");
        if (cm.get(1, "type") != "datacenter")
            http_die("request-param-bad", "type", cm.get(1, "type").c_str(), "datacenter");
        if (cm.hasTitle("id"))
            http_die("action-forbidden", "Update of datacenter", "Not yet supported.");

        // actual insert - throws exceptions
        int id = persist::process_one_asset (cm);
        // process results
</%cpp>
{<$$ utils::json::jsonify ("id", std::to_string(id)) $>}
<%cpp>
            return HTTP_OK;
    }
    catch (const BiosError& e) {
        http_die_idx(e.idx, e.what());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("internal-error", e.what());
    }
</%cpp>
