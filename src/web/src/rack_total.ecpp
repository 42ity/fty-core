<#
 #
 # Copyright (C) 2015,2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rack_total.ecpp
 * \author Tomas Halman <TomasHalman@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief Not yet documented file
 */
 #><%pre>
#include <cxxtools/split.h>
#include <tntdb/error.h>
#include <exception>
#include <limits.h>

#include <biosproto.h>

#include <sys/types.h>
#include <sys/syscall.h>

#include "assetcrud.h"
#include "data.h"
#include "dbpath.h"
#include "db/measurements.h"
#include "cleanup.h"
#include "utils.h"
#include "utils++.h"
#include "utils_web.h"
#include "log.h"
#include "helpers.h"

static const std::map<std::string, const std::string> PARAM_TO_SRC = {
    {"total_power", "realpower.default"},
    {"avg_power_last_day", "realpower.default_arithmetic_mean_24h"},
    {"avg_power_last_week", "realpower.default_arithmetic_mean_7d"},
    {"avg_power_last_month", "realpower.default_arithmetic_mean_30d"},
    {"avg_power_last_year", "<zero>"}
};

// encode metric GET request
static zmsg_t*
s_rt_encode_GET (const char* name)
{
    static const char* method = "GET";

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *msg = zmsg_new ();

    zmsg_pushmem (msg, zuuid_data (uuid), zuuid_size (uuid));
    zuuid_destroy (&uuid);
    zmsg_addstr (msg, method);
    zmsg_addstr (msg, name);
    return msg;
}

static double
s_total_rack_power(
    mlm_client_t *client,
    const std::string& src,
    const std::string& name)
{
    double ret = 0.0f;

    if (src == "<zero>")
        return ret;

    zmsg_t *request = s_rt_encode_GET (name.c_str());
    mlm_client_sendto (client, "agent-rt", "latest-rt-data", NULL, 1000, &request);

    //TODO: this intentionally wait forewer, to be fixed by proper client pool
    zmsg_t *msg = mlm_client_recv (client);
    if (!msg)
        throw std::runtime_error ("no reply from broker!");

    //TODO: check if we have right uuid, to be fixed by proper client pool
    char *uuid = zmsg_popstr (msg);
    zstr_free (&uuid);

    char *result = zmsg_popstr (msg);
    if (!streq (result, "OK")) {
        log_warning ("Error reply for device '%s', result=%s", name.c_str (), result);
        zstr_free (&result);
        zmsg_destroy (&msg);
        return ret;
    }

    char *element = zmsg_popstr (msg);
    if (!streq (element, name.c_str ())) {
        log_warning ("element name (%s) from message differs from requested one (%s), ignoring", element, name.c_str ());
        zstr_free (&element);
        zmsg_destroy (&msg);
        return ret;
    }
    zstr_free (&element);

    zmsg_t *data = zmsg_popmsg (msg);
    while (data) {
        bios_proto_t *bmsg = bios_proto_decode (&data);
        if (!bmsg) {
            log_warning ("decoding bios_proto_t failed");
            continue;
        }

        if (!streq (bios_proto_type (bmsg), src.c_str ())) {
            bios_proto_destroy (&bmsg);
            data = zmsg_popmsg (msg);
            continue;
        }
        else {
            ret = std::stod (bios_proto_value (bmsg));
            bios_proto_destroy (&bmsg);
            break;
        }
    }
    zmsg_destroy (&msg);
    return ret;
}

static bool
s_is_valid_param(const std::string& p)
{
    return PARAM_TO_SRC.count(p) != 0;
}

</%pre>
<%args>
std::string arg1;
std::string arg2;
</%args>
<%thread scope="global">
asset_manager asset_mgr;
</%thread>
<%cpp>
    // Input arguments checks

    // arg1, arg2 are both mandatory
    if (arg1.empty ()) {
        http_die ("request-param-required", "arg1");
    }

    if (arg2.empty ()) {
        http_die ("request-param-required", "arg2");
    }

    // arg2 is a single value OR a comma-separated list formed from a list of permissible values (PARAM_TO_SRC)
    std::vector <std::string> requestedParams;
    cxxtools::split (",", arg2, std::back_inserter (requestedParams));

    for (const std::string& param: requestedParams) {
        if (!s_is_valid_param (param)) {
            http_die ("request-param-bad", "arg2",
                std::string ("value '").append (param).append ("'").c_str (),
                std::string ("one of the following values: [").append (utils::join_keys_map (PARAM_TO_SRC, ", ")).append ("].").c_str ());
        }
    }    

    // arg1 is a single value OR a comma-separated list of element identifiers
    std::vector<std::string> racks; // list of ids of racks from argument string
    std::vector<std::string> rackNames;
    cxxtools::split(",", arg1, std::back_inserter(racks));

    // ##################################################
    // connect to malamute
    // copy & paste from alert_ack.ecpp
    mlm_client_t *client = mlm_client_new ();
    if (!client) {
        log_critical ("mlm_client_new() failed.");
        http_die ("internal-error", "mlm_client_new() failed.");
    }

    std::string client_name ("web.metric_current.");
    client_name.append (std::to_string (getpid ())).append (".").append (std::to_string (syscall (SYS_gettid)));
    log_debug ("malamute client name = '%s'.", client_name.c_str ());

    int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
    if (rv == -1) {
        log_critical ("mlm_client_connect (endpoint = '%s', timeout = '%d', address = '%s') failed.",
                        MLM_ENDPOINT, 1000, client_name.c_str ());
        mlm_client_destroy (&client);
        http_die ("internal-error", "mlm_client_connect() failed.");
    }
    // ##################################################

    // check that racks exists
    auto allRacksShort = asset_mgr.get_items1("rack", "");
    if ( allRacksShort.status == 0 ) {
        mlm_client_destroy (&client);
        http_die ("internal-error", "Error while retrieving information about racks."); 
    }

    for (auto const& item : racks) {
        http_errors_t errors;
        uint32_t real_id = 0;

        if (!check_element_identifier ("element_id", item, real_id, errors)) {
            http_die_error (errors);
        }

        auto it = allRacksShort.item.find(real_id);
        if (it == allRacksShort.item.end()) {
            mlm_client_destroy (&client);
            http_die ("element-not-found", item.c_str ());
        }
        rackNames.push_back (it->second);
    }

    std::stringstream json;

    try {
        tntdb::Connection conn = tntdb::connectCached (url);

        json <<
"{\n"
"\t\"rack_total\": [\n";

        for( size_t R = 0 ; R < racks.size(); R++ ) {
            json <<
"\t\t{\n"
"\t\t\t\"id\": \"" << racks[R] << "\",\n"
"\t\t\t\"name\": \"" << rackNames[R] << "\",\n";
            for(size_t P = 0; P < requestedParams.size(); P++ ) {
                const std::string& key = requestedParams[P];
                const std::string& val = PARAM_TO_SRC.at(key);   //XXX: operator[] does not work here!
                json << "\t\t\t\"" << key << "\": "<< s_total_rack_power (client, val, rackNames[R]);
                json << ((P < requestedParams.size() - 1) ? "," : "" ) << "\n";
            };
            json << "\t\t}" << ( (R < racks.size() - 1) ? "," : "" ) << " \n";
        }
    json << "\t]\n}\n";
    }
    catch (const tntdb::Error& e) {
        log_error ("%s", e.what ());
        http_die ("internal-error", "Database related error.");
        mlm_client_destroy (&client);
    }
    catch (const std::runtime_error &e) {
        log_error ("%s", e.what ());
        http_die ("internal-error", e.what ());
        mlm_client_destroy (&client);
    }
    catch (const std::exception& e) {
        log_error ("%s", e.what ());
        http_die ("internal-error", "Exception caught.");
        mlm_client_destroy (&client);
    }
    mlm_client_destroy (&client);
</%cpp>
<$$ json.str() $>
