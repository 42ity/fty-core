<#
 #
 # Copyright (C) 2015-2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file time.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief  manipulating with time service
 */
 #><%pre>
#include <iostream>
#include <sstream>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>
#include "augtool.h"
#include "utils.h"
#include "utils_web.h"

</%pre>
<%cpp>
    augtool* augeas = augtool::get_instance();

    // BLOCK 1
    // input argument sanitization
    std::string checked_time;
    std::string checked_ntp;

    if(!request.isMethodGET()) {
        std::stringstream input(request.getBody(), std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer(input);
        try {
            deserializer.deserialize(si);
        } catch (const std::exception& e) {
            http_die ("bad-request-document", std::string("Expecting valid json document: ").append (e.what ()).c_str ());
        }

        std::string time;
        try {
            si.getMember("time") >>= time;
        } catch (const std::exception& e) {
            time = "";
        }

        std::string ntp;
        try {
            si.getMember("ntp") >>= ntp;
        } catch (const std::exception& e) {
            ntp = "";
        }

        if (time.empty() && ntp.empty()) {
            http_die ("request-param-required", "time' or 'ntp");
        }
        
        static cxxtools::Regex t_rex("^[1-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9]Z$");
        if(!time.empty()) {
            if (!t_rex.match (time)) {
                http_die ("request-param-bad", "time", time.c_str (), "format <YYYY>-<MM>-<DD>T<hh>:<mm>:<ss>Z (ISO 8601).");
            }
        }

        static cxxtools::Regex n_rex("^[0-9a-z_.-]*$");
        if(!ntp.empty()) {
            if(!n_rex.match (ntp)) {
                http_die ("request-param-bad", "ntp", ntp.c_str (), "any combination of alphanumeric characters, underscore (_), dot (.) and hyphen (-).");
            }
        }

        checked_time = time;
        checked_ntp = ntp;
    }
    // input arguments sanitization end

    if (!request.isMethodGET ()) {

        if (!checked_time.empty ()) {
            // Run command with arguments.  Wait for complete and return the return value.
            shared::Argv proc_cmd_dateset {"sudo", "date", "-s", checked_time};
            if ( shared::call(proc_cmd_dateset) != 0 ) {
                http_die ("internal-error", "Can't set requested OS time.");
            }
            shared::Argv proc_cmd_hwclock {"sudo", "hwclock", "--systohc"};
            if ( shared::call(proc_cmd_hwclock) != 0 ) {
                http_die ("internal-error", "Can't set requested HW time.");
            }
            shared::Argv proc_cmd_ntp1 {"sudo", "systemctl", "stop", "ntp"};
            if ( shared::call(proc_cmd_ntp1) != 0 ) {
                http_die ("internal-error", "Cannot stop ntp service");
            }
            shared::Argv proc_cmd_ntp2 {"sudo", "systemctl", "disable", "ntp"};
            if ( shared::call(proc_cmd_ntp2) != 0 ) {
                http_die ("internal-error", "Cannot disable ntp service");
            }
        }

        if(!checked_ntp.empty()) {

            augeas->run_cmd("set /files/etc/ntp.conf/server[1] " + checked_ntp);
            augeas->save();
            shared::Argv proc_cmd_ntp1 {"sudo", "systemctl", "enable", "ntp"};
            if ( shared::call(proc_cmd_ntp1) != 0 ) {
                http_die ("internal-error", "Cannot enable ntp service");
            }
            shared::Argv proc_cmd_ntp2 {"sudo", "systemctl", "restart", "ntp"};
            if ( shared::call(proc_cmd_ntp2) != 0 ) {
                http_die ("internal-error", "Cannot start ntp service");
            }
        }
    }

    char buff[32];
    if (calendar_to_datetime (time (NULL), buff, 32) == -1) {
        http_die ("internal-error", "calendar_to_datetime () failed.");
    }
    std::string ntp_out = augeas->get_cmd_out("get /files/etc/ntp.conf/server[1]");
</%cpp>
{
    <$$ utils::json::jsonify ("time", buff) $>,
    <$$ utils::json::jsonify ("ntp", ntp_out) $>
}
