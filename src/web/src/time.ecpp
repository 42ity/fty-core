<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file time.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief  manipulating with time service
 */
 #><%pre>
#include <iostream>
#include <sstream>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>
#include "augtool.h"
#include "utils.h"
#include "utils_web.h"

</%pre>
<%cpp>
	augtool* augeas = augtool::get_instance();

    if(!request.isMethodGET()) {
		std::stringstream input(request.getBody(), std::ios_base::in);
		cxxtools::SerializationInfo si;
		cxxtools::JsonDeserializer deserializer(input);
		try {
			deserializer.deserialize(si);
		} catch (const std::exception& e) {
            http_die ("bad-request-document", std::string("Expecting valid json document: ").append (e.what ()).c_str ());
		}

		std::string time;
		try {
			si.getMember("time") >>= time;
		} catch (const std::exception& e) {
			time = "";
		}

		std::string ntp;
		try {
			si.getMember("ntp") >>= ntp;
		} catch (const std::exception& e) {
			ntp = "";
		}

	    if (time.empty() && ntp.empty()) {
            http_die ("request-param-required", "time' or 'ntp");
		}

	    static cxxtools::Regex t_rex("^[1-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9]Z$");
	    if(!time.empty()) {
            if (!t_rex.match (time)) {
                http_die ("request-param-bad", "time", time.c_str (), "format <YYYY>-<MM>-<DD>T<hh>:<mm>:<ss>Z (ISO 8601).");
            }

		    if ( system((std::string("sudo date -s ") + time).c_str()) != 0) {
                http_die ("internal-error", "Can't set requested time.");
			}
			system("sudo systemctl stop ntp");
			system("sudo systemctl disable ntp");
	    }

	    static cxxtools::Regex n_rex("^[0-9a-z_.-]*$");
	    if(!ntp.empty()) {
		    if(!n_rex.match (ntp)) {
                http_die ("request-param-bad", "time", ntp.c_str (), "any combination of alphanumeric characters, underscore (_), dot (.) and hyphen (-).");
            }

            augeas->run_cmd("set /files/etc/ntp.conf/server[1] " + ntp);
            augeas->save();
            system("sudo systemctl restart ntp");
            system("sudo systemctl enable ntp");
	    }
    }

    char buff[32];
    if (calendar_to_datetime (time (NULL), buff, 32) == -1) {
        http_die ("internal-error", "calendar_to_datetime () failed.");
    }
    std::string ntp = augeas->get_cmd_out("get /files/etc/ntp.conf/server[1]");
</%cpp>
{
    <$$ utils::json::jsonify ("time", buff) $>,
    <$$ utils::json::jsonify ("ntp", ntp) $>
}
