<%pre>
#include <cstdlib>
#include <string>
#include <algorithm>
#include <czmq.h>
#include "asset_msg.h"
#include "location_helpers.h"
#include "asset_types.h"
#include "defs.h"
</%pre>
<%args>
std::string from;
std::string to;
std::string recursive;
std::string filter;
</%args>

<%cpp>
    if (request.isMethodGET() == false) {
        return HTTP_BAD_REQUEST;
    }

    if (!from.empty() && !to.empty()) {
</%cpp>
        {
            "error" :   "bad_input"
            "msg"   :   "You can specify 'from' OR 'to' variable, but not both."
        }
<%cpp>
        return HTTP_BAD_REQUEST;
    }
    if (from.empty() && to.empty()) {
</%cpp>
        {
            "error" :   "bad_input"
            "msg"   :   "You have to specify one of the following variables: 'from=<location_uri|none>', 'to=<location_uri>'."
        }
<%cpp>
        return HTTP_BAD_REQUEST;
    }

    if (!to.empty()) {
        if (!recursive.empty()) {
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Variable 'recursive' can not be specified along with 'to'."
            }
<%cpp>
            return HTTP_BAD_REQUEST;
        }

        if (!filter.empty()) {
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Variable 'filter' can not be specified along with 'to'."
            }
<%cpp>
            return HTTP_BAD_REQUEST;
        }

        std::transform (to.begin(), to.end(), to.begin(), ::tolower);
        int assettype = asset (to);

        if (assettype == asset_type::UNKNOWN || assettype == -1) {
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Error in location_uri or invalid asset type."
            }
<%cpp> 
            return HTTP_BAD_REQUEST;
        }
        int id = -1;
        int ret = element_id (to, id);
        if (ret == -1) {            
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Error in location_uri or invalid element."
            }
<%cpp> 
            return HTTP_BAD_REQUEST;
        }
        
/* TODO uncomment when process_message counterpart is ready and delete the DEBUG below
        asset_msg_t *input_msg = asset_msg_new (ASSET_MSG_GET_LOCATION_TO);
        assert (input_msg);        

        asset_msg_set_element_id (input_msg, (byte) id);
        asset_msg_set_type (input_msg, (byte) assettype);

        zsock_t * dbsock = zsock_new_req (DB_SOCK);
        assert (dbsock);

        ret = asset_msg_send (&input_msg, dbsock);
        assert (ret != -1);
        input_msg = asset_msg_recv (dbsock);
        assert (input_msg);

        zsock_destroy (&dbsock);        
*/
</%cpp>
sending ASSET_MSG_GET_LOCATION_TO:
    elemend_id: <$ id $>
    type: <$ assettype $>
<%cpp>
    }
    else if (!from.empty()) {
        std::transform (from.begin(), from.end(), from.begin(), ::tolower);
        std::transform (recursive.begin(), recursive.end(), recursive.begin(), ::tolower);
        std::transform (filter.begin(), filter.end(), filter.begin(), ::tolower);

        int is_recursive = 0;
        if (recursive == "yes") {
            is_recursive = 1;        
        } else if (!recursive.empty() && recursive != "no") {
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Unrecognized 'recursive' value. Please use 'yes' or 'no'."
            }
<%cpp>
            return HTTP_BAD_REQUEST;           
        }
        int filter_type = 0;
        if (filter.empty()) {
            filter_type = 7;
        } else {
            if (filter == "rooms") {
                filter_type = asset_type::ROOM;
            } else if (filter == "rows") {
                filter_type = asset_type::ROW;
            } else if (filter == "racks") {
                filter_type = asset_type::RACK;
            } else if (filter == "devices") {
                filter_type = asset_type::DEVICE;
            } else if (filter == "groups") {
                filter_type = asset_type::GROUP;
            } else {
                // Note: datacenter is not a valid filter parameter according to rfc-11 4.1.13
</%cpp>
                    {
                        "error" :   "bad input"
                        "msg"   :   "unrecognized or invalid filter value."
                    }
<%cpp>
                    return HTTP_BAD_REQUEST;
            }
        }
        int id = -1;
        int ret = element_id (from, id);
        if (ret == -1) {            
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Error in location_uri or invalid asset type."
            }
<%cpp> 
            return HTTP_BAD_REQUEST;
        }
        int asset_type = asset (from);
        if (asset_type == asset_type::UNKNOWN || asset_type == -1) {
</%cpp>
            {
                "error" :   "bad_input"
                "msg"   :   "Error in location_uri or invalid asset type."
            }
<%cpp> 
            return HTTP_BAD_REQUEST;
        }

/* TODO uncomment when process_message counterpart is ready and delete the DEBUG below        
        asset_msg_t *input_msg = asset_msg_new (ASSET_MSG_GET_LOCATION_FROM);
        assert (input_msg);        

        asset_msg_set_element_id (input_msg, (byte) id);
        asset_msg_set_type (input_msg, (byte) asset_type);
        asset_msg_set_recursive (input_msg, (byte) is_recursive);
        asset_msg_set_filter_type (input_msg, (byte) filter_type);

        zsock_t * dbsock = zsock_new_req (DB_SOCK);
        assert (dbsock);
        
        ret = asset_msg_send (&input_msg, dbsock);
        assert (ret != -1);
        input_msg = asset_msg_recv (dbsock);
        assert (input_msg);

        zsock_destroy (&dbsock);
*/
</%cpp>
sending ASSET_MSG_GET_LOCATION_FROM:
    elemend_id: <$ id $>
    type: <$ asset_type $>
    recursive: <$ is_recursive $>
    filter_type: <$ filter_type $>
<%cpp>
    }   
    else {
        // should never reach here
</%cpp>
        { "error" : "bad input" }
<%cpp>
        return HTTP_BAD_REQUEST;    
    }

</%cpp>

