<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file auth-verify.ecpp
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \brief  Check if token is valid or not
 */
 #><%pre>
#include "tokens.h"
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>
#include "utils_web.h"
#include "helpers.h"
#include "log.h"

#ifdef DEBUG
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#endif

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
std::string checked_access_token;
{
    // NOTE: auth_verify is not limited by CHECK_USER_PERMISSIONS_OR_DIE
    //       this is where the token is actually verified and user info
    //       fill'ed

    // sanitize check
    std::string access_token = qparam.param ("access_token");

    if(request.hasHeader(tnt::httpheader::authorization)) {
        /* Auth header overrides GET/POST parameters even if header is wrong */
        access_token = request.getHeader(tnt::httpheader::authorization);

        if(access_token.compare(0,7,"Bearer ")) {
            access_token = "";
        } else {
            access_token = access_token.substr(7);
        }
    }
    check_regex_text_or_die ("access_token", access_token, checked_access_token, "^[-/._~+/a-z0-9]{0,255}={0,10}$");
    // sanitize check end
}

/* We can get the token from header, or from GET or POST request args */
if(!checked_access_token.empty()) {
    long int uid;
    long int gid;
    char *user_name;
	if(tokens::get_instance()->verify_token(checked_access_token, &uid, &gid, &user_name)) {

        long int foo = (gid - 8000);
        if (foo != static_cast<long int> (BiosProfile::Anonymous) \
         && foo != static_cast<long int> (BiosProfile::Dashboard) \
         && foo != static_cast<long int> (BiosProfile::Admin)) {
            std::string msg {"Cannot map gid="};
            msg += std::to_string (gid) + " to user profile";
            http_die ("internal-error", msg.c_str ());
        }

        user.profile (static_cast<BiosProfile> (foo));
        user.uid (uid);
        user.gid (gid);
        user.login (user_name);
        free (user_name); user_name = NULL;
	} else {
        http_die("not-authorized");
	}
}

#ifdef DEBUG
	reply.setHeader( (std::string)"X-Auth-Token-Presented: ",
                "\"" + checked_access_token + "\"" );

	std::ostringstream os;
	os << "access_auth_level=\"" << static_cast<int> (user.profile ()) << "\"";
	reply.setHeader( (std::string)"X-Auth-Verify: ", os.str() );
#endif // DEBUG

/* Go on to next module in tntnet.xml */
return DECLINED;
</%cpp>
