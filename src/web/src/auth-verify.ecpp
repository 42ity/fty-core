<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file auth-verify.ecpp
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \brief Not yet documented file
 */
 #><%pre>
#include "tokens.h"
#include "auth_levels.h"
#include "rights.h"
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>
#include "utils_web.h"

#ifdef DEBUG
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#endif

</%pre>
<%args>
std::string access_token="";
</%args>
<%request scope="global">
int8_t access_auth_level = -1;
long int uid = 0;
long int gid = -1;
</%request>
<%cpp>
if(request.hasHeader(tnt::httpheader::authorization)) {
	/* Auth header overrides GET/POST parameters even if header is wrong */
	access_token = request.getHeader(tnt::httpheader::authorization);

	if(access_token.compare(0,7,"Bearer ")) {
		access_token = "";
	} else {
		access_token = access_token.substr(7);
	}

}

/* We can get the token from header, or from GET or POST request args */
if(!access_token.empty()) {
	if(tokens::get_instance()->verify_token(access_token, &uid, &gid)) {
		access_auth_level=gid - 8000;
	} else {
</%cpp>
{
    "error":"invalid_token"
}
<%cpp>
		return HTTP_UNAUTHORIZED;
	}
}

#ifdef DEBUG
	reply.setHeader( (std::string)"X-Auth-Token-Presented: ",
                "\"" + access_token + "\"" );

	std::ostringstream os;
	os << "access_auth_level=\"" << (int)access_auth_level << "\"";
	reply.setHeader( (std::string)"X-Auth-Verify: ", os.str() );
#endif // DEBUG

std::string test_url = request.isMethodGET() ? "R" : "W";
test_url += request.getQuery();

auto it = rights_management.upper_bound(test_url);
if(!rights_management.empty() && it != rights_management.begin()) {
	it--;
	if(test_url.find(it->first) != std::string::npos) {
		if(it->second <= access_auth_level) {
			return DECLINED;
		} else {
			http_die("not-authorized");
		}
	}
}

/* Go on to next module in tntnet.xml */
return DECLINED;
</%cpp>
