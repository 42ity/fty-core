<%pre>
#include "tokens.h"
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>

#ifdef DEBUG
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#endif

</%pre>
<%args>
std::string access_token="";
</%args>
<%request scope="global">
int8_t access_auth_level;
</%request>
<%cpp>
access_auth_level=0;
if(request.hasHeader(tnt::httpheader::authorization)) {
	access_token = request.getHeader(tnt::httpheader::authorization);
	if(access_token.compare(0,7,"Bearer ")) {
		access_token = "";
	} else {
		access_token = access_token.substr(7);
	}

	if(access_token.empty()) {
		/* Token header was presented but empty */
		access_auth_level=-1;
	}
}

/* We can get the token from header, or from GET or POST request args */
if(!access_token.empty()) {
	/* Per RFC-11, we currently implement one access level,
	    that of a power-user == 2 */
	access_auth_level=2;

	if(!tokens::get_instance()->verify_token(access_token)) {
//			"error":"invalid_token"
//			return HTTP_UNAUTHORIZED;
		access_auth_level=-2;
	}
}

#ifdef DEBUG
	std::ostringstream os;
	os << "access_auth_level=\"" << access_auth_level << "\"";
	reply.setHeader( (std::string)"X-Auth-Verify: ", os.str() );
#endif

/* Go on to next module in tntnet.xml */
return DECLINED;
</%cpp>
