<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file assets_in.ecpp
 * \author Tomas Halman <TomasHalman@Eaton.com>
 * \brief  Implementation for short list of assets in container
 */
 #><%pre>
#include <vector>
#include <string>
#include <exception>
#include <tntdb/connect.h>
#include <tntdb/error.h>
#include <cxxtools/split.h>
#include "log.h"
#include "utils_web.h"
#include "dbpath.h"
#include "asset_types.h"
#include "db/assets.h"
#include "helpers.h"

static std::string
    assets_in_container(
        tntdb::Connection &connection,
        a_elmnt_id_t container,
        const std::vector<a_elmnt_tp_id_t> &types,
        const std::vector<a_elmnt_stp_id_t> &subtypes
    )
{
    std::string result;
    auto func = [&result](const tntdb::Row& row) {
        result +=
            "{\"id\":\"" + row.getValue("asset_id").getString() + "\",\n" +
            "\"name\":\"" + row.getValue("name").getString() + "\",\n" +
            "\"type\":\"" + persist::typeid_to_type (row.getValue("type_id").getInt()) + "\",\n" +
            "\"sub_type\":\"" + persist::subtypeid_to_subtype( row.getValue("subtype_id").getInt() ) + "\"\n"
            "},";
    };
    persist::select_assets_by_container(connection, container, types, subtypes, func);
    return result.substr(0, result.size()-1);
}

</%pre>
<%args>
std::string in;
std::string type;
std::string sub_type;
</%args>
<%cpp>
{
    // check if method is allowed
    if (!request.isMethodGET()) {
        http_die ("method-not-allowed", request.getMethod().c_str());
    }
    // check if mandatory parameters are present
    if (in.empty()) http_die ("request-param-required", "in");
    if (type.empty() && sub_type.empty()) http_die ("request-param-required", "type' or 'sub_type");
    if ( !type.empty() && !sub_type.empty()) http_die ("request-param-bad", "type and sub_type", "both", "only one of them");

    std::vector<a_elmnt_stp_id_t> subtypes;
    std::vector<a_elmnt_tp_id_t> types;
    if( ! sub_type.empty() ) {
        std::vector<std::string> items;
        cxxtools::split(',', sub_type, std::back_inserter(items));
        for( auto &it : items ) {
            a_elmnt_stp_id_t sub_type = persist::subtype_to_subtypeid(it);
            if (sub_type == persist::asset_subtype::SUNKNOWN) {
                http_die ("request-param-bad", "sub_type", it.c_str(), "valid sub_type like feed, ups, etc...");
            }
            subtypes.push_back(sub_type);
        }
    } else {
        std::vector<std::string> items;
        cxxtools::split(',', type, std::back_inserter(items));
        for( auto &it : items ) {
            a_elmnt_stp_id_t type = persist::type_to_typeid(it);
            if (type == persist::asset_type::TUNKNOWN) {
                http_die ("request-param-bad", "type", it.c_str(), "valid sub_type like datacenter");
            }
            types.push_back(type);
        }
    }
    // convert the id from string to number
    a_elmnt_id_t real_id = 0;
    http_errors_t errors;
    if (!check_element_identifier ("in", in, real_id, errors)) {
        http_die_error (errors);
    }
    // create a database connection
    tntdb::Connection connection;
    try {
        connection = tntdb::connectCached (url);
    }
    catch (const tntdb::Error& e) {
        log_error ("tntdb::connectCached (url = '%s') failed: %s.", url.c_str (), e.what ());
        http_die ("internal-error", "Connecting to database failed.");
    }
    catch (const std::exception& e) {
        log_error ("Exception caught: '%s'.", e.what ());
        http_die ("internal-error", e.what ());
    }
    // do the stuff
</%cpp>
[<$$ assets_in_container(connection, real_id, types, subtypes) $>]
%}
