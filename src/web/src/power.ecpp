<%pre>
#include <cstdlib>
#include <string>
#include <algorithm>
#include <exception>
#include <stack>
#include <sstream>
#include <iostream>
#include <vector>
#include <czmq.h>
#include "defs.h"
#include "dbpath.h"
#include "common_msg.h"
#include "asset_msg.h"
#include "asset_types.h"
#include "assettopology.h"
</%pre>
<%args>
std::string from;
std::string to;
std::string filter_dc;
std::string filter_group;
</%args>
<%cpp>
    // GET requests only
    if (request.isMethodGET() == false) {
        return HTTP_BAD_REQUEST;
    }

    if (from.empty() && to.empty() && filter_dc.empty() && filter_group.empty()) {
</%cpp>
        {
            "error" :   "bad_input",
            "msg"   :   "You have to specify one of the following variables: 'filter=<dc_id|group_id>' or 'to=<device_id>' or 'from=<device_id>'."
        }
<%cpp>
        return HTTP_BAD_REQUEST;
    }

    asset_msg_t *input_msg = NULL;
////////////////////////
//      FROM
//
    if (!from.empty()) {
        if (!to.empty() || !filter_dc.empty() || !filter_group.empty()) {
</%cpp>
            {
                "error" :   "bad_input",
                "msg"   :   "You can specify only one variable."
            }
<%cpp>
            return HTTP_BAD_REQUEST;
        }
        // Try to convert string to number 
        int element_id = -1; 
        try { 
            element_id = std::stoi (from); 
        } catch (std::out_of_range& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Variable 'from' contains number that falls out of the allowed range." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::invalid_argument& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Please specify an integer value for variable 'from'." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::exception& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Error while converting <$ from $> to integer value: <$ e.what() $>." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST;
        } 
        // Call persistence layer
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_FROM);
        assert (input_msg);
        asset_msg_set_element_id (input_msg,  element_id);

    } // from block

//////////////////
//      TO
//
     if (!to.empty()) {
        if (!from.empty() || !filter_dc.empty() || !filter_group.empty()) {
</%cpp>
            {
                "error" :   "bad_input",
                "msg"   :   "You can specify only one variable."
            }
<%cpp>
            return HTTP_BAD_REQUEST;
        }
        // Try to convert string to number 
        int element_id = -1; 
        try { 
            element_id = std::stoi (to); 
        } catch (std::out_of_range& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Variable 'to' contains number that falls out of the allowed range." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::invalid_argument& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Please specify an integer value for variable 'from'." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::exception& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Error while converting <$ from $> to integer value: <$ e.what() $>." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST;
        }
    // Call persistence layer
    input_msg = asset_msg_new (ASSET_MSG_GET_POWER_TO);
    assert (input_msg);
    asset_msg_set_element_id (input_msg, element_id);


    } // to block   

//////////////////////
//      FILTER_DC
//
    if (!filter_dc.empty()) {
        if (!to.empty() || !from.empty() || !filter_group.empty()) {
</%cpp>
            {
                "error" :   "bad_input",
                "msg"   :   "You can specify only one variable."
            }
<%cpp>
            return HTTP_BAD_REQUEST;
        }
        // Try to convert string to number 
        int element_id = -1; 
        try { 
            element_id = std::stoi (filter_dc); 
        } catch (std::out_of_range& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Variable 'filter_dc' contains number that falls out of the allowed range." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::invalid_argument& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Please specify an integer value for variable 'filter_dc'." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::exception& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Error while converting <$ filter_dc $> to integer value: <$ e.what() $>." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST;
        }
        // Call persistence layer
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_DATACENTER);
        assert (input_msg);
        asset_msg_set_element_id (input_msg, element_id);

    } // filter_dc block

//////////////////////
//      FILTER_GROUP
//
    if (!filter_group.empty()) {
        if (!to.empty() || !from.empty() || !filter_dc.empty()) {
</%cpp>
            {
                "error" :   "bad_input",
                "msg"   :   "You can specify only one variable."
            }
<%cpp>
            return HTTP_BAD_REQUEST;
        }
        // Try to convert string to number 
        int element_id = -1; 
        try { 
            element_id = std::stoi (filter_group); 
        } catch (std::out_of_range& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Variable 'filter_group' contains number that falls out of the allowed range." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::invalid_argument& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Please specify an integer value for variable 'filter_group'." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST; 
        } catch (std::exception& e) { 
</%cpp>
            { 
                "error" :   "bad_input", 
                "msg"   :   "Error while converting <$ filter_group $> to integer value: <$ e.what() $>." 
            } 
<%cpp>
            return HTTP_BAD_REQUEST;
        }

        // Call persistence layer
        input_msg = asset_msg_new (ASSET_MSG_GET_POWER_GROUP);
        assert (input_msg);
        asset_msg_set_element_id (input_msg, element_id);

    } // filter_group block


    zmsg_t *return_msg = process_assettopology (url.c_str(), &input_msg);
    if (return_msg == NULL) {
</%cpp>
        {
            "error" :   "internal_error",
            "msg"   :   "Function process_assettopology() returned a null pointer."
        }
<%cpp>
        return HTTP_INTERNAL_SERVER_ERROR;
    }
    assert (input_msg == NULL);

    if (is_common_msg (return_msg)) {
        common_msg_t *common_msg = common_msg_decode (&return_msg);
        if (common_msg == NULL) {
            if (return_msg != NULL) {
                zmsg_destroy (&return_msg);
            }
</%cpp>
            {
                "error" :   "internal_error",
                "msg"   :   "common_msg_decode() failed."
            }
<%cpp>
            return HTTP_INTERNAL_SERVER_ERROR;
        }

        if (common_msg_id (common_msg) == COMMON_MSG_FAIL) {
</%cpp>
        {
            "msg"   :   "<$ common_msg_errmsg (common_msg) $>",
            "errtype"   :  "<$ static_cast<int> (common_msg_errtype (common_msg)) $>",
            "errorno"   :   "<$ static_cast<int> (common_msg_errorno (common_msg)) $>"
        }
<%cpp>
            switch(common_msg_errorno(common_msg)) {
                case(DB_ERROR_BADINPUT):
                    return HTTP_BAD_REQUEST;
                case(DB_ERROR_NOTFOUND):
                    return HTTP_NOT_FOUND;
                default:
                    return HTTP_INTERNAL_SERVER_ERROR;
            }
        }
        else {
</%cpp>
        {
            "error" :   "internal_error",
            "msg"   :   "Unexpected common_msg received. Message ID = <$ common_msg_id (common_msg) $>"
        }
<%cpp>
                return HTTP_INTERNAL_SERVER_ERROR;
        }
    }
    else if (is_asset_msg (return_msg)) {
        asset_msg_t *asset_msg = asset_msg_decode (&return_msg);
        if (asset_msg == NULL) {
            if (return_msg != NULL) {
                zmsg_destroy (&return_msg);
            }
</%cpp>
            {
                "error" :   "internal_error",
                "msg"   :   "asset_msg_decode() failed."
            }
<%cpp>
            return HTTP_INTERNAL_SERVER_ERROR;
        }

        if (asset_msg_id (asset_msg) == ASSET_MSG_RETURN_POWER) {
            zlist_t *powers = asset_msg_get_powers (asset_msg);
            zframe_t *devices = asset_msg_get_devices (asset_msg);
            asset_msg_destroy (&asset_msg);
    
            std::string json = "{";
            if (devices) {
                byte *buffer = zframe_data (devices);
                assert (buffer);
                zmsg_t *zmsg = zmsg_decode ( buffer, zframe_size (devices));
                if (zmsg == NULL || !zmsg_is (zmsg)) {
                    zframe_destroy (&devices);
</%cpp>
                    {
                        "error" :   "internal_error",
                        "msg"   :   "zmsg_decode() failed."
                    }
<%cpp>
                    return HTTP_INTERNAL_SERVER_ERROR;
                }
                zframe_destroy (&devices);

                json.append ("\"devices\" : [");

                zmsg_t *pop = NULL;
                bool first = true;
                while ((pop = zmsg_popmsg (zmsg)) != NULL) { // caller owns zmgs_t
                    if (!is_asset_msg (pop)) {
                        zmsg_destroy (&zmsg);
                        // TODO internal error
                        return HTTP_INTERNAL_SERVER_ERROR; 
                    }
                    asset_msg_t *item = asset_msg_decode (&pop); // zmsg_t is freed
                    if (item == NULL) {
                        if (pop != NULL) {
                            zmsg_destroy (&pop);
                        }
</%cpp>
                        {
                            "error" :   "internal_error",
                            "msg"   :   "asset_msg_decode() failed."
                        }
<%cpp>
                        return HTTP_INTERNAL_SERVER_ERROR;
                    }

                    if (first == false) {
                        json.append (", ");
                    } else {
                        first = false;
                    }
                    json.append("{ \"name\" : \"").append(asset_msg_name (item)).append("\",");
                    json.append("\"id\" : \"").append(std::to_string(asset_msg_element_id (item))).append("\",");
                    json.append("\"type\" : \"").append(asset_msg_type_name (item)).append("\"}");

                    asset_msg_destroy (&item);
                }
                zmsg_destroy (&zmsg);
            
                json.append ("] ");
            }

            if (powers) {
                if (devices) {
                    json.append (", ");
                }
                json.append ("\"powerchains\" : [");

                //
                const char *item = (const char*) zlist_first (powers);
                bool first = true;
                while (item != NULL) {
                    if (first == false) {
                        json.append (", ");
                    } else {
                        first = false;
                    }
                    json.append ("{");
                    std::vector<std::string> tokens;
                    std::istringstream f(item);
                    std::string tmp;    
                    while (getline(f, tmp, ':')) {
                        tokens.push_back(tmp);
                    }
                    json.append("\"src-id\" : \"").append(tokens[1]).append("\",");
                    if (!(tokens[0].empty() || tokens[2]=="999")) {
                        json.append("\"src-socket\" : ").append(tokens[0]).append(",");
                    }
                    json.append("\"dst-id\" : \"").append(tokens[3]).append("\"");
                    if (!(tokens[2].empty() || tokens[2]=="999")) {
                        json.append(",\"dst-socket\" : ").append(tokens[2]);
                    }
                    json.append ("}");
                    item = (const char*) zlist_next (powers);
                }

                json.append ("] ");
            }

            json.append ("}");            
</%cpp>
    <$$ json $>
<%cpp>
        }
        else {            
</%cpp>
            {
                "error" :   "internal_error",
                "msg"   :   "Unexpected asset_msg received. Message ID = <$ asset_msg_id (asset_msg) $>"
            }
<%cpp>
            return HTTP_INTERNAL_SERVER_ERROR;
        }
    }
    else {
</%cpp>
            {
                "error" :   "internal_error",
                "msg"   :   "Uknown protocol!"
            }
<%cpp>
        return HTTP_INTERNAL_SERVER_ERROR;
    }


</%cpp>
