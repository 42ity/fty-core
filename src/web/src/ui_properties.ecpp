<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #>

<#\n/*!
 * \file ui_properties.ecpp
 * \author Michal Vyskocil
 * \author Alena Chernikava
 * \brief Not yet documented file
 */\n#>
<%pre>
#include <string>
#include <cxxtools/jsondeserializer.h>

#include "data.h"
</%pre>
<%thread scope="global">
ui_props_manager mgr;
</%thread>
<%cpp>
    std::string method = request.getMethod();

    if ( method == "GET") {

        std::string res;
        int rv = mgr.get(res);
        if ( rv != 0 ) {
</%cpp>
{
    "error" : "<$$ res $>"
}
<%cpp>
            return HTTP_INTERNAL_SERVER_ERROR;
        }
</%cpp>
<$$ res $>
<%cpp>

    }
    else if ( method == "PUT") {

        std::stringstream input(request.getBody(), std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer(input);

//FIXME: this does not work
        try {
            deserializer.deserialize(si);
        } catch (const std::exception& e) {
</%cpp>
{
  "error" : "invalid JSON content",
  "what" : "<$$ e.what() $>",
  "content" : "<$$ request.getBody() $>"
}
<%cpp>
        return HTTP_BAD_REQUEST;
        }
        std::string errmsg = "";
        int rv = mgr.put(request.getBody(), errmsg);
        if ( rv != 0 ) {
</%cpp>
{
    "error" : "<$$ errmsg $>"
}
<%cpp>
            return HTTP_INTERNAL_SERVER_ERROR;
        }
    }
    else {
</%cpp>
{
    "error" : "invalid request method"
}
<%cpp>
        return HTTP_METHOD_NOT_ALLOWED;
    }
</%cpp>
