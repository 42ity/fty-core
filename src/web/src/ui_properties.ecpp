<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file ui_properties.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \brief GET/PUT for REST API call /usr/properties
 */
 #><%pre>
#include <string>
#include <sstream>
#include <cxxtools/jsondeserializer.h>

#include "log.h"
#include "agentstate.h"
#include "helpers.h"

#define UI_PROPERTIES "UI_PROPERTIES"
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
{
    // check user permissions
    // This is DEPRECATED CALL, will be replaced with my_profile.ecpp
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "RU"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string method = request.getMethod();

    if ( method == "GET") {

        std::string res;
        int rv = persist::load_agent_info(UI_PROPERTIES, res);
        if ( rv != 0 ) {
            http_die("internal-error");
        }
        //mitigate the situation DB content is empty - most of the json parsers don't deal well with empty strings
        if (res.empty()) {
            res = "{}";
        }
        // there is no official way to save "not JSON"
        // so there is no check here
</%cpp>
<$$ res $>
<%cpp>
    }
    else if ( method == "PUT")
    {
        std::stringstream input(request.getBody(), std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer(input);
        log_debug("ui/properties: '''%s'''", input.str().c_str());

        // check, if we got a correct JSON
        try {
            deserializer.deserialize(si);
        } catch (const std::exception& e) {
            LOG_END_ABNORMAL(e);
            http_die("bad-request-document");
        }
        // JSON is correct, try to save it
        int rv = persist::save_agent_info (UI_PROPERTIES, request.getBody());
        if ( rv != 0 ) {
            //come error occured
            http_die("internal-error");
        }
        // everything is ok
</%cpp>
{}
<%cpp>
    }
    else {
        http_die("method-not-allowed");
    }
}
</%cpp>
