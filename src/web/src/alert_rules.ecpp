<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 \file alert_rules_detail.ecpp
 \author Karol Hrdina <KarolHrdina@Eaton.com>
 \brief Implementation of REST API call for alerts/rules/<name>
*/
#><%pre>
#include <exception>
#include <cxxtools/jsondeserializer.h>
#include <cxxtools/regex.h>
#include <vector>
#include <string>
#include <malamute.h>
#include <sys/types.h>
#include <sys/syscall.h>

#include "log.h"
#include "utils_web.h"
#include "str_defs.h"
</%pre>
<%cpp>
// sanity check
if (request.getMethod () != "POST" && request.getMethod () != "PUT")
    http_die ("method-not-allowed", request.getMethod ().c_str ());

std::string name = request.getArg ("name");

log_debug ("method = '%s'.", request.getMethod ().c_str ());
log_debug ("requested rule name = '%s'.", name.c_str ());

// Let's take a look at payload
cxxtools::SerializationInfo si;
std::string json_rule_name;
try {
    std::stringstream input (request.getBody(), std::ios_base::in); 
    cxxtools::JsonDeserializer deserializer (input);
    deserializer.deserialize (si);
    si.getMember ("rule_name") >>= json_rule_name;
    if (json_rule_name.empty ())
        throw std::runtime_error ("property 'rule_name' has empty value");
}
catch (const std::exception& e) {
    log_debug ("Bad request document - invalid json: %s", e.what ());
    http_die ("bad-request-document", "Please check RFC-11 for valid rule json schema description.");
}
log_debug ("json 'rule_name' property = '%s'.", json_rule_name.c_str ());
// json is valid as far as rest api is concerned
// input args check
if ((request.getMethod () == "POST" && !name.empty ()) ||
    (request.getMethod () == "PUT" && name.empty ())) {
    return DECLINED;
}

// connect to malamute
mlm_client_t *client = mlm_client_new ();
if (!client) {
    log_critical ("mlm_client_new() failed.");
    http_die ("internal-error", "mlm_client_new() failed.");
}

std::string client_name ("alert_rules.");
client_name.append (std::to_string (getpid ())).append (".").append (std::to_string (syscall (SYS_gettid)));
log_debug ("malamute client name = '%s'.", client_name.c_str ());

int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
if (rv == -1) {
    log_critical ("mlm_client_connect (endpoint = '%s', timeout = '%d', address = '%s') failed.",
                    MLM_ENDPOINT, 1000, client_name.c_str ());
    http_die ("internal-error", "mlm_client_connect() failed.");
}

// prepare rfc-evaluator-rules ADD message
zmsg_t *send_msg = zmsg_new ();
if (!send_msg) {
    log_critical ("zmsg_new() failed.");
    http_die ("internal-error", "zmsg_new() failed.");
}
zmsg_addstr (send_msg, "ADD");
zmsg_addstr (send_msg, request.getBody().c_str ());
if (request.getMethod () == "PUT" && name.compare (json_rule_name) != 0) {
    zmsg_addstr (send_msg, name.c_str ());
}

// send it
if (mlm_client_sendto (client, BIOS_AGENT_NAME_ALERT_AGENT, "rfc-evaluator-rules", NULL, 1000, &send_msg) != 0) {
    log_debug ("mlm_client_sendto (address = '%s', subject = '%s', tracker = NULL, timeout = '%d') failed.",
        BIOS_AGENT_NAME_ALERT_AGENT, "rfc-evaluator-rules", 1000);
    zmsg_destroy (&send_msg);
    mlm_client_destroy (&client);
    http_die ("internal-error", "mlm_client_sendto() failed.");
}

zmsg_t *recv_msg = NULL;
// TODO: blocking mlm_client_recv
while (true) {
    recv_msg = mlm_client_recv (client);
    if (!recv_msg) {
        log_error ("mlm_client_recv() failed.");
        mlm_client_destroy (&client);
        http_die ("internal-error", "mlm_client_recv() failed.");
    }
    if (streq (mlm_client_sender (client), BIOS_AGENT_NAME_ALERT_AGENT))
        break;
    zmsg_destroy (&recv_msg);
}

// Got it
// Check subject
if (!streq (mlm_client_subject (client), "rfc-evaluator-rules")) {
    log_error ("Unexpected reply from '%s'. Subject expected = '%s', received = '%s'.",
        mlm_client_sender (client), "rfc-evaluator-rules", mlm_client_subject (client));
    zmsg_destroy (&recv_msg);
    mlm_client_destroy (&client);
    http_die ("internal-error", "Bad message.");
}
// Check command. Can be OK or ERROR
char *part = zmsg_popstr (recv_msg);
if (streq (part, "OK")) {
    free (part);
    part = zmsg_popstr (recv_msg);
    if (!part) {
        log_error ("Unexpected reply from '%s'. Expected OK/json. Got OK/(null).", mlm_client_sender (client));
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("internal-error", "Bad message.");
    }
// Note: Assumption: EVALUATOR returns valid json
</%cpp>
<$$ part $>
<%cpp>
    free (part);
    zmsg_destroy (&recv_msg);
    mlm_client_destroy (&client);
    return HTTP_OK;
}
if (streq (part, "ERROR")) {
    free (part);
    part = zmsg_popstr (recv_msg);
    if (!part) {
        log_error ("Unexpected reply from '%s'. Expected ERROR/reason. Got ERROR/(null).", mlm_client_sender (client));
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("internal-error", "Bad message.");
    }
    if (streq (part, "NOT_FOUND")) {
        free (part);
        log_error ("Rule name '%s' does not exist.", name.c_str ());
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("not-found", std::string ("Rule name '").append (name).append ("'").c_str ());
    }
    if (streq (part, "BAD_JSON")) {
        free (part);
        log_error ("Request document not valid json or does not adhere to specified schema.");
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("bad-request-document", "Please check RFC-11 for valid rule json schema description.");
    }
    log_error ("%s", part);
    std::string reason = part;
    free (part);
    zmsg_destroy (&recv_msg);
    mlm_client_destroy (&client);
    http_die ("internal-error",
        std::string ("Error while retrieving details of rule name = '").append (name).append ("': ").
        append (reason).append(".").c_str ());
}
// Message does not conform to protocol
free (part);
log_error ("Unexptected reply from  '%s'. Does not conform to rfc-evaluator-rules.",
    mlm_client_sender (client));
zmsg_destroy (&recv_msg);
mlm_client_destroy (&client);
http_die ("internal-error", "Bad message.");
</%cpp>
