<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 \file alert_rules_list.ecpp
 \author Karol Hrdina <KarolHrdina@Eaton.com>
 \brief Implementation of REST API call for alerts/rules
*/
#><%pre>
#include <cxxtools/jsondeserializer.h>
#include <vector>
#include <string>
#include <malamute.h>
#include <sys/types.h>
#include <sys/syscall.h>

#include "log.h"
#include "utils_web.h"
#include "str_defs.h"

</%pre>
<%args>
std::string type;
std::string rule_class;
</%args>
<%cpp>
// sanity check
if (!request.isMethodGET ())
    http_die ("method-not-allowed", request.getMethod ().c_str ());

if (type.empty ()) {
    type = "all";
}
if (type != "threshold" && type != "single" && type != "pattern" && type != "all") { // unknown parameter 'type'
    http_die ("request-param-bad", "type", std::string ("'").append (type).append ("'").c_str (),
              "one of the following values [ 'threshold', 'single', 'pattern', 'all' ] or empty");
}

// connect to malamute
mlm_client_t *client = mlm_client_new ();
if (!client) {
    log_critical ("mlm_client_new() failed.");
    http_die ("internal-error", "mlm_client_new() failed.");
}

std::string client_name ("web.alert_rules_list.");
client_name.append (std::to_string (getpid ())).append (".").append (std::to_string (syscall (SYS_gettid)));
log_debug ("malamute client name = '%s'.", client_name.c_str ());

int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
if (rv == -1) {
    log_critical ("mlm_client_connect (endpoint = '%s', timeout = '%d', address = '%s') failed.",
                    MLM_ENDPOINT, 1000, client_name.c_str ());
    http_die ("internal-error", "mlm_client_connect() failed.");
}

// prepare rfc-evaluator-rules LIST message
zmsg_t *send_msg = zmsg_new ();
if (!send_msg) {
    log_critical ("zmsg_new() failed.");
    http_die ("internal-error", "zmsg_new() failed.");
}
zmsg_addstr (send_msg, "LIST");
zmsg_addstr (send_msg, type.c_str ());
zmsg_addstr (send_msg, rule_class.c_str ());

// send it
if (mlm_client_sendto (client, BIOS_AGENT_NAME_ALERT_AGENT, "rfc-evaluator-rules", NULL, 1000, &send_msg) != 0) {
    log_debug ("mlm_client_sendto (address = '%s', subject = '%s', tracker = NULL, timeout = '%d') failed.",
        BIOS_AGENT_NAME_ALERT_AGENT, "rfc-evaluator-rules", 1000);
    zmsg_destroy (&send_msg);
    mlm_client_destroy (&client);
    http_die ("internal-error", "mlm_client_sendto() failed.");
}

zmsg_t *recv_msg = NULL;
zsock_t *pipe = mlm_client_msgpipe (client);
if (!pipe) {
    log_critical ("mlm_client_msgpipe() failed.");
    http_die ("internal-error", "mlm_client_msgpipe() failed.");
}
zpoller_t *poller = zpoller_new (pipe, NULL);
if (!poller) {
    log_critical ("zpoller_new() failed.");
    http_die ("internal-error", "zpoller_new() failed.");
}
while (true) {
    zsock_t *which = (zsock_t *) zpoller_wait (poller, 5000);
    if (which) {
        recv_msg = mlm_client_recv (client);
    }
    if (!recv_msg) {
        if (zpoller_expired (poller)) {
            log_error ("zpoller_wait(timeout = 5000) timed out waiting for message.");
            mlm_client_destroy (&client);
            zpoller_destroy (&poller);
            http_die ("internal-error", "Timed out waiting for message.");
        }
        log_error ("mlm_client_recv() failed.");
        zpoller_destroy (&poller);
        mlm_client_destroy (&client);
        http_die ("internal-error", "mlm_client_recv() failed.");
    }
    if (streq (mlm_client_sender (client), BIOS_AGENT_NAME_ALERT_AGENT))
        break;
    zmsg_destroy (&recv_msg);
}
// Got it
// Check subject
if (!streq (mlm_client_subject (client), "rfc-evaluator-rules")) {
    log_error ("Unexpected reply from '%s'. Subject expected = '%s', received = '%s'.",
        mlm_client_sender (client), "rfc-evaluator-rules", mlm_client_subject (client));
    zmsg_destroy (&recv_msg);
    mlm_client_destroy (&client);
    http_die ("internal-error", "Bad message.");
}
// Check command. Can be LIST or ERROR
char *part = zmsg_popstr (recv_msg);
if (streq (part, "LIST")) {
    free (part);
    part = zmsg_popstr (recv_msg);
    // type received must be equal to type requested
    if (type.compare (part) != 0) {
        log_error ("Unexpected reply from '%s'. Type expected = '%s', received = '%s' . Protocol: rfc-evaluator-rules; message: 1) LIST.",
            mlm_client_sender (client), type.c_str (), part);
        free (part);
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("internal-error", "Received type != expected one!");
    }
    part = zmsg_popstr (recv_msg);
    // class received must be equal to type requested
    if (rule_class.compare (part) != 0) {
        log_error ("Unexpected reply from '%s'. rule_class expected = '%s', received = '%s' . Protocol: rfc-evaluator-rules; message: 1) LIST.",
            mlm_client_sender (client), rule_class.c_str (), part);
        free (part);
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("internal-error", "Received rule_class != expected one!");
    }
    free (part);
    part = zmsg_popstr (recv_msg);
    bool first = true;
    </%cpp>
[
% while (part) {
%   if (first) {
    <$$ part $> 
%     first = false;
%   }
%   else {
,   <$$ part $>
%   }
% free (part);
% part = zmsg_popstr (recv_msg);
% }
]
    <%cpp>
    zmsg_destroy (&recv_msg);
    mlm_client_destroy (&client);
    return HTTP_OK;
}
if (streq (part, "ERROR")) {
    free (part);
    part = zmsg_popstr (recv_msg);
    if (!part) {
        log_error ("Unexpected reply from '%s'. Expected ERROR/reason. Got ERROR/(null).", mlm_client_sender (client));
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("internal-error", "Bad message.");
    }
    if (streq (part, "NOT_FOUND")) {
        free (part);
        log_error ("Rule type '%s' does not exist.", type.c_str ());
        zmsg_destroy (&recv_msg);
        mlm_client_destroy (&client);
        http_die ("request-param-bad", "type", std::string ("'").append (type).append ("'").c_str (),
                  "one of the following values [ 'threshold', 'single', 'pattern', 'all' ] or empty");
    }
    log_error ("%s", part);
    std::string reason = part;
    free (part);
    zmsg_destroy (&recv_msg);
    mlm_client_destroy (&client);
    http_die ("internal-error", 
        std::string ("Error while retrieving list of rules with type = '").append (type).append ("': ").
        append (reason).append(".").c_str ());
}
// Message does not conform to protocol
free (part);
log_error ("Unexptected reply from  '%s'. Does not conform to rfc-evaluator-rules.",
    mlm_client_sender (client));
zmsg_destroy (&recv_msg);
mlm_client_destroy (&client);
http_die ("internal-error", "Bad message.");
</%cpp>
