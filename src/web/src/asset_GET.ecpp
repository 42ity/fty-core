<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_GET.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Implementation of GET operation on any asset
 */
 #><%pre>
#include <cxxtools/regex.h>

#include "data.h"
#include "asset_types.h"
#include "defs.h"
#include "utils_web.h"
#include "asset_computed_impl.h"
#include "helpers.h"

#include "log.h"
#include <biosproto.h>

#include <sys/types.h>
#include <sys/syscall.h>

struct Outlet {
    std::string label;
    bool label_r;
    std::string type;
    bool type_r;
    std::string group;
    bool group_r;
};

std::string getOutletNumber (const std::string &extAttributeName)
{
    auto dot1 = extAttributeName.find_first_of(".");
    std::string oNumber = extAttributeName.substr(dot1 + 1);
    auto dot2 = oNumber.find_first_of(".");
    oNumber = oNumber.substr(0, dot2);
    return oNumber;
}

// encode metric GET request
static zmsg_t*
s_rt_encode_GET (const char* name)
{
    static const char* method = "GET";

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *msg = zmsg_new ();

    zmsg_pushmem (msg, zuuid_data (uuid), zuuid_size (uuid));
    zuuid_destroy (&uuid);
    zmsg_addstr (msg, method);
    zmsg_addstr (msg, name);
    return msg;
}

static double
s_rack_realpower_nominal (
    mlm_client_t *client,
    const std::string& name)
{
    double ret = 0.0f;

    zmsg_t *request = s_rt_encode_GET (name.c_str());
    mlm_client_sendto (client, "agent-rt", "latest-rt-data", NULL, 1000, &request);

    //TODO: this intentionally wait forewer, to be fixed by proper client pool
    zmsg_t *msg = mlm_client_recv (client);
    if (!msg)
        throw std::runtime_error ("no reply from broker!");

    //TODO: check if we have right uuid, to be fixed by proper client pool
    char *uuid = zmsg_popstr (msg);
    zstr_free (&uuid);

    char *result = zmsg_popstr (msg);
    if (!streq (result, "OK")) {
        log_warning ("Error reply for device '%s', result=%s", name.c_str (), result);
        zstr_free (&result);
        zmsg_destroy (&msg);
        return ret;
    }

    char *element = zmsg_popstr (msg);
    if (!streq (element, name.c_str ())) {
        log_warning ("element name (%s) from message differs from requested one (%s), ignoring", element, name.c_str ());
        zstr_free (&element);
        zmsg_destroy (&msg);
        return ret;
    }
    zstr_free (&element);

    zmsg_t *data = zmsg_popmsg (msg);
    while (data) {
        bios_proto_t *bmsg = bios_proto_decode (&data);
        if (!bmsg) {
            log_warning ("decoding bios_proto_t failed");
            continue;
        }

        if (!streq (bios_proto_type (bmsg), "realpower.nominal")) {
            bios_proto_destroy (&bmsg);
            data = zmsg_popmsg (msg);
            continue;
        }
        else {
            ret = std::stod (bios_proto_value (bmsg));
            bios_proto_destroy (&bmsg);
            break;
        }
    }
    zmsg_destroy (&msg);
    return ret;
}

</%pre>

<%thread scope="global">
asset_manager     asset_mgr;
</%thread>

<%cpp>
    // checked parameters
    uint32_t checked_id = 0;
    std::string checked_type;

    // ##################################################
    // BLOCK 1
    // Sanity parameter check
    {
        // dirty parameters
        // Arguments parsed from URL: -> request.getArg("agrgumentName")
        // Real parameters  in URL (after '?': -> qparam.param("parameterName")
        std::string id = request.getArg("id");
        std::string type = request.getArg("type");
        log_debug ("Request parameters - Initial tainted values received:\n\tid = '%s'\n\ttype = '%s'\n",
                id.c_str (), type.c_str ());

        http_errors_t errors;
        if (!check_element_identifier ("id", id, checked_id, errors)) {
            http_die_error (errors);
        }

        if ( !persist::type_to_typeid (type) ) {
            http_die("request-param-bad", "type", type.c_str(), "one of datacenter/room/row/rack/group/device");
        }
        else {
            checked_type = type;
        }
    }
    // Sanity check end

    // ##################################################
    // BLOCK 2
    // Receive data and check arguments
    if ( checked_id == 0 ) {
        http_die("request-param-required", "id");
    }

    auto tmp = asset_mgr.get_item1 (checked_id);
    if ( tmp.status == 0 )
    {
        switch ( tmp.errsubtype )
        {
            case DB_ERROR_NOTFOUND:
                http_die("element-not-found", "%d", checked_id);
            case DB_ERROR_BADINPUT:
            case DB_ERROR_INTERNAL:
            default:
                http_die("internal-error", "Internal database error");
        }
    }
    // TODO: the call /asset/type/id is deprecated. This check should be removed soon
    if ( !checked_type.empty() &&
            (tmp.item.basic.type_id != persist::type_to_typeid (checked_type) ) )
    {
        http_die("request-param-bad", "type", checked_type.c_str(), tmp.item.basic.type_name.c_str());
    }
    // end argument check


    // ##################################################
    // BLOCK 3
    // connect to malamute
    // copy & paste from alert_ack.ecpp
    mlm_client_t *client = mlm_client_new ();
    if (!client) {
        log_critical ("mlm_client_new() failed.");
        http_die ("internal-error", "mlm_client_new() failed.");
    }

    std::string client_name ("web.asset_get.");
    client_name.append (std::to_string (getpid ())).append (".").append (std::to_string (syscall (SYS_gettid)));
    log_debug ("malamute client name = '%s'.", client_name.c_str ());

    int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
    if (rv == -1) {
        log_critical ("mlm_client_connect (endpoint = '%s', timeout = '%d', address = '%s') failed.",
                        MLM_ENDPOINT, 1000, client_name.c_str ());
        mlm_client_destroy (&client);
        http_die ("internal-error", "mlm_client_connect() failed.");
    }
    // end connect to malamute

// Prepare the reply
</%cpp>
{
      "id": "<$$ tmp.item.basic.id $>"
    , "power_devices_in_uri": "/api/v1/assets?in=<$$ tmp.item.basic.id $>&sub_type=epdu,pdu,feed,genset,ups"
    , "name": "<$$ tmp.item.basic.name $>"
    , "status": "<$$ tmp.item.basic.status $>"
    , "priority": "P<$$ tmp.item.basic.priority $>"
    , "type": "<$$ tmp.item.basic.type_name $>"
<%cpp>
// if element is located, then show the location
if ( tmp.item.basic.parent_id != 0 ) {
</%cpp>
    , "location_uri":"<$$ "/api/v1/asset/" +
           persist::typeid_to_type(tmp.item.basic.parent_type_id) + "/" +
           std::to_string (tmp.item.basic.parent_id) $>"
    , "location_id":"<$$ tmp.item.basic.parent_id $>"
    , "location":"<$$ tmp.item.basic.parent_name $>"
<%cpp>
}
else {
</%cpp>
    , "location":""
<%cpp>
}
</%cpp>
, "groups": [
<%cpp>
// every element (except groups) can be placed in some group
if ( !tmp.item.groups.empty() )
{
    uint32_t group_count = tmp.item.groups.size();
    uint32_t i = 1;
    for ( auto &oneGroup : tmp.item.groups )
    {
</%cpp>
{
    "id"  : "<$$ oneGroup.first $>",
    "name": "<$$ oneGroup.second $>"
} <? i != group_count ? "," ?>
<%cpp>
        i++;
    }
}
</%cpp>
]
<%cpp>
// Device is special element with more attributes
if ( tmp.item.basic.type_id == persist::asset_type::DEVICE )
{

</%cpp>
, "powers": [
<%cpp>
    if ( !tmp.item.powers.empty() )
    {
        uint32_t power_count = tmp.item.powers.size();
        uint32_t i = 1;
        for ( auto &oneLink : tmp.item.powers )
        {
</%cpp>
{"src_id":"<$$ oneLink.src_id $>",
 "src_name":"<$$ oneLink.src_name $>"
<%cpp>
            if ( !oneLink.src_socket.empty() )
            {
</%cpp>
,"src_socket":"<$$ oneLink.src_socket $>"
<%cpp>
            }
            if ( !oneLink.dest_socket.empty() )
            {
</%cpp>
,"dest_socket":"<$$ oneLink.dest_socket $>"
%                   }
}<? i != power_count ? "," ?>
<%cpp>
            i++;
        }
    }
</%cpp>
]
<%cpp>
}
// ACE: to be consistent with RFC-11 this was put here
if ( tmp.item.basic.type_id == persist::asset_type::GROUP )
{
    auto it = tmp.item.ext.find("type");
    if ( it != tmp.item.ext.end() )
    {
</%cpp>
, "sub_type":"<$$ it->second.first $>"
<%cpp>
        tmp.item.ext.erase(it);
    }
}
else {
</%cpp>
, "sub_type": "<$$ tmp.item.basic.subtype_name $>"
<%cpp>
}
</%cpp>
, "ext" : [
% bool isExtCommaNeeded = false;
% if ( !tmp.item.basic.asset_tag.empty() ) {
{"asset_tag": "<$$ tmp.item.basic.asset_tag $>", "read_only": true }
% isExtCommaNeeded = true;
%}
<%cpp>
std::map<std::string, Outlet> outlets{};
std::vector<std::string> ips{};
std::vector<std::string> macs{};
std::vector<std::string> fqdns{};
std::vector<std::string> hostnames{};
if ( !tmp.item.ext.empty() )
{
    static cxxtools::Regex r_outlet_label("^outlet\\.[0-9][0-9]*\\.label$");
    static cxxtools::Regex r_outlet_group("^outlet\\.[0-9][0-9]*\\.group$");
    static cxxtools::Regex r_outlet_type("^outlet\\.[0-9][0-9]*\\.type$");
    static cxxtools::Regex r_ip("^ip\\.[0-9][0-9]*$");
    static cxxtools::Regex r_mac("^mac\\.[0-9][0-9]*$");
    static cxxtools::Regex r_hostname("^hostname\\.[0-9][0-9]*$");
    static cxxtools::Regex r_fqdn("^fqdn\\.[0-9][0-9]*$");
    for ( auto &oneExt : tmp.item.ext )
    {
        auto &attrName = oneExt.first;
        auto &attrValue = oneExt.second.first;
        auto isReadOnly= oneExt.second.second;
        if ( r_outlet_label.match(attrName) ) {
            auto oNumber = getOutletNumber(attrName);
            auto it = outlets.find(oNumber);
            if ( it == outlets.cend() ) {
                auto r = outlets.emplace(oNumber,Outlet());
                it = r.first;
            }
            it->second.label = attrValue;
            it->second.label_r = isReadOnly;
            continue;
        }
        else if ( r_outlet_group.match(attrName) ) {
            auto oNumber = getOutletNumber(attrName);
            auto it = outlets.find(oNumber);
            if ( it == outlets.cend() ) {
                auto r = outlets.emplace(oNumber,Outlet());
                it = r.first;
            }
            it->second.group = attrValue;
            it->second.group_r = isReadOnly;
            continue;
        }
        else if ( r_outlet_type.match(attrName) ) {
            auto oNumber = getOutletNumber(attrName);
            auto it = outlets.find(oNumber);
            if ( it == outlets.cend() ) {
                auto r = outlets.emplace(oNumber,Outlet());
                it = r.first;
            }
            it->second.type = attrValue;
            it->second.type_r = isReadOnly;
            continue;
        }
        else if ( r_ip.match(attrName) ) {
            // read_only property is ignored
            ips.push_back (attrValue);
            continue;
        }
        else if ( r_mac.match(attrName) ) {
            // read_only property is ignored
            macs.push_back (attrValue);
            continue;
        }
        else if ( r_fqdn.match(attrName) ) {
            // read_only property is ignored
            fqdns.push_back (attrValue);
            continue;
        }
        else if ( r_hostname.match(attrName) ) {
            // read_only property is ignored
            hostnames.push_back (attrValue);
            continue;
        }
        // If we are here -> then this attribute is not special and should be returned as "ext"
</%cpp>
<$$ isExtCommaNeeded ? "," :""$> {"<$$ oneExt.first $>":"<$$ oneExt.second.first $>","read_only": <$$ oneExt.second.second? "true":"false" $> }
<%cpp>
        isExtCommaNeeded = true;
    } // end of for each loop for ext attribute

}
</%cpp>
]
%    // Print "ips"
%    if ( !ips.empty() ) {
, "ips" : [
%        int i = 1;
%        int max_size = ips.size();
%        for ( auto &oneIp : ips ) {
            "<$$ oneIp $>" <$$ max_size == i ? "":"," $>
%            i++;
%        }
]
%    }
%    // Print "macs"
%    if ( !macs.empty() ) {
, "macs" : [
%        int i = 1;
%        int max_size = macs.size();
%        for ( auto &oneMac : macs ) {
            "<$$ oneMac $>" <$$ max_size == i ? "":"," $>
%            i++;
%        }
]
%    }
%    // Print "fqdns"
%    if ( !fqdns.empty() ) {
, "fqdns" : [
%        int i = 1;
%        int max_size = fqdns.size();
%        for ( auto &oneFqdn : fqdns ) {
            "<$$ oneFqdn $>" <$$ max_size == i ? "":"," $>
%            i++;
%        }
]
%    }
%    // Print "fqdns"
%    if ( !hostnames.empty() ) {
, "hostnames" : [
%        int i = 1;
%        int max_size = hostnames.size();
%        for ( auto &oneHostname : hostnames ) {
            "<$$ oneHostname $>" <$$ max_size == i ? "":"," $>
%            i++;
%        }
]
%    }
%    // Print "outlets"
%    if ( !outlets.empty() ) {
, "outlets": {
%        int i = 1;
%        int max_size = outlets.size();
%        for ( auto &oneOutlet : outlets ) {
%           bool isCommaNeeded = false;
            "<$$ oneOutlet.first$>" : [
%           if ( !oneOutlet.second.label.empty() ) {
                {
                    "name":"label",
                    "value": "<$$ oneOutlet.second.label $>" ,
                    "read_only":<$$ oneOutlet.second.label_r ? "true":"false" $>
                }
%               isCommaNeeded = true;
%           }
%           if ( !oneOutlet.second.group.empty() ) {
%                if ( isCommaNeeded ) {
                    ,
%                }
                {
                    "name":"group",
                    "value": "<$$ oneOutlet.second.group $>",
                    "read_only":<$$ oneOutlet.second.group_r ? "true":"false" $>
                }
%               isCommaNeeded = true;
%           }
%           if ( !oneOutlet.second.type.empty() ) {
%                if ( isCommaNeeded ) {
                    ,
%                }
                {
                    "name":"type",
                    "value":"<$$ oneOutlet.second.type $>",
                    "read_only":<$$ oneOutlet.second.type_r ? "true":"false" $>
                }
%           }
            ]
            <$$ max_size == i ? "":"," $>
%           i++;
%        }
    }
%    }

, "computed" : {
%       if (persist::is_rack(tmp.item.basic.type_id)) {
%           int freeusize = free_u_size(tmp.item.basic.id);
%           double realpower_nominal = s_rack_realpower_nominal (client, tmp.item.basic.name.c_str ());
    "freeusize" : <$ freeusize >= 0 ? std::to_string(freeusize) : "null" $>,
    "realpower.nominal" : <$ realpower_nominal != NAN ? std::to_string(realpower_nominal) : "null" $>,
    "outlet.available" : {
%           std::map<std::string, int> res;
%           rack_outlets_available(tmp.item.basic.id, res);
%           size_t i=1;
%           for (const auto &it : res) {
%               std::string val = it.second >= 0 ? std::to_string(it.second) : "null";
%               std::string comma = i == res.size() ? "" : ","; i++;
        "<$ it.first $>" : <$ val $><$ comma $>
%           } // for it : res
    }
%       }   // rack
%   mlm_client_destroy (&client);
}
}
