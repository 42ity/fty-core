
RFC-Evaluator-Rules  -  Evaluator rules protocol
================================================
Connects USER peer to EVALUATOR peer.

The USER peer sends one of the following messages using MAILBOX SEND to
EVALUATOR peer:

. LIST/type - request list of rule names
. ADD/json - add (create/update) new rule

where '/' indicates a multipart string message, 'json' is valid json
document(1), 'type' is one of [ ALL | THRESHOLDS | PATTERNS | RULES ] and
'subject' of the message is "rfc-evaluator-rules".

The EVALUATOR peer MUST send the appropriate message message back to USER peer
using MAILBOX SEND:

. LIST/type/rule_1[/rule_2]...[/rule_N]
. OK/json
. ERROR/reason

where '/' indicates a multipart string message, 'json' is valid json document(1),
'reason' is error string and 'subject' of the message is "rfc-evaluator-rules".


(1)
There are the three different json formats that are accepted

{
    "threshold" : {
        "rule_name" :   "<rule_name>",
        "severity"  :   "<severity>",
        "metric"    :   "<metric_name>",
        "type"      :   "<type>",
        "element"   :   "<element_name>",
        "value"     :   "<value>",
        "action"    :   ["<action_1", ..., "<action_N>"]
    }
}

{
    "pattern" : {
        "rule_name"     :   "<rule_name>",
        "severity"      :   "<severity>",
        "in_rex"        :   "<regex>",
        "evaluation"    :   "<lua_function>"
    }
}

{
    "single" : {
        "rule_name"     :   "<rule_name>",
        "severity"      :   "<severity>",
        "in"            :   [ "<topic_1>, ..., "<topic_N>"],
        "evaluation"    :   "<lua_function>",
        "element"       :   "<element_name>"
    }
}

where
    * <rule_name>       unique rule name
    * <severity>        one of [ INFO | WARNING | CRITICAL ] and determines the resulting alert severity
    * <lua_function>    lua function that evaluates trigger conditions
    * <topic_X>         metric topic
    * <element_name>    name of element
    * <metric_name>     name of metric
    * <type>            one of [ LOW | HIGH ]
    * <regex>           regular expression
    * <value>           number (integer, floating-point)
    * <action_X>        one of [ EMAIL | SMS ] and determines the resulting alert action

The semantics is as follows:

THRESHOLD:
   If value of metric <metric_name> on element <element_name> is smaller
("type" == "low") or bigger ("type" == "high") than <value>, trigger alert for
element <element_name> with state ACTIVE, severity <severity> and action states
<action_1>, ..., <action_N>. When the condition no longer holds true, trigger
the same alert with state RESOLVED.

PATTERN:
    Value of metric, whose name matches regular expression <regex>, becomes
input to <lua_function> that triggers alert for element that was matched by
<regex> with state ACTIVE, severity <severity>. When the condition no longer
holds true, trigger the same alert with state RESOVED.

SINGLE:
    Value of any metric defined among <topic_1>, ..., <topic_N> becomes
input to <lua_function> that triggers alert for element <element_name> with
state ACTIVE, severity <severity>. When the condition no longer holds true,
trigger the same alert with state RESOVED.

 

