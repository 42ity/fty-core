
RFC-Evaluator-Rules  -  Evaluator rules protocol
================================================
Connects USER peer to EVALUATOR peer.

The USER peer sends one of the following messages using MAILBOX SEND to
EVALUATOR peer:

1) LIST/type - request list of rule names of specified 'type'
2) GET/name - request detail of rule 'name'
3) ADD/json[/old_name] - create new rule or update existing rule. If optional
part 'old_name' is specified, perform additional rename of rule name
'old_name' to name specified in json property "rule_name" : "<new_name>".

where '/' indicates a multipart string message, 'json' is valid json
document(1), 'type' is one of [ all | threshold | pattern | single ], 'name',
'old_name' is rule name and 'subject' of the message is
"rfc-evaluator-rules".

The EVALUATOR peer MUST send the appropriate message back to USER peer
using MAILBOX SEND.

For message 1) EVALUTATOR peer MUST respond with one of the following messages:
a) LIST/type/rule_1[/rule_2]...[/rule_N]
c) ERROR/reason


For messages 2) and 3) EVALUATOR peer MUST respond with one of the following messages:
b) OK/json
c) ERROR/reason

where '/' indicates a multipart string message, 'json' is valid json
document(1), 'reason' is error string, 'type' is one of [ all | threshold |
pattern | single ] and its value MUST be the same as the value of 'type'
received in 1) message, 'subject' of the message is "rfc-evaluator-rules".

For messages 1), 2), 3) if the requested 'type', 'name' or 'old_name' does not
exist the EVALUATOR peer MUST assign NOT_FOUND string as reason.



(1)
There are three different json formats that are accepted

{
    "threshold" : {
        "rule_name"     :   "<rule_name>",
        "target"        :   <metric_specification>,
        "element"       :   "<element_name>",
        "values"        :   [ { "low_critical"  : "<value>" },
                              { "low_warning"   : "<value>" },
                              { "high_warning"  : "<value>" },
                              { "high_critical" : "<value>" } ],
        "results"       :   [ { "low_critical"  : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }},
                              { "low_warning"   : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }},
                              { "high_warning"  : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }},
                              { "high_critical" : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }} ],
        "evaluation"    :   "<lua_function>"
    }
}

{
    "pattern" : {
        "rule_name"     :   "<rule_name>",
        "target"        :   "<regex>",
        "values"        :   [ { "<value_name_1>"  : "<value>" },
                               ...,
                              { "<value_name_N>"  : "<value>" } ],
        "results"       :   [ { "<result_name_1>"  : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }},
                              ...
                              { "<result_name_N>" : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }} ],
        "evaluation"    :   "<lua_function>",
    }
}

{
    "single" : {
        "rule_name"     :   "<rule_name>",
        "target"        :   [ "<topic_1>", ... , "<topic_N>"],
        "values"        :   [ { "<value_name_1>"  : "<value>" },
                               ...,
                              { "<value_name_N>"  : "<value>" } ],
        "element"       :   "<element_name>",
        "results"       :   [ { "<result_name_1>"  : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }},
                              ...
                              { "<result_name_N>" : { "action" : ["<action_1>", ..., "<action_N>"], "severity" : "<severity>", "description" : "<description>" }} ],
        "evaluation"    :   "<lua_function>",
    }
}

where 
    * <rule_name>       unique rule name, CASE SENSITIVE
    * <metric_specification>       string value representing name of metric OR array of string values 
                        representing metric names     
    * <element_name>    name of element
    * <value>           number (integer, floating-point)
    * <action_X>        one of [ EMAIL | SMS ] and determines the resulting alert action
    * <severity>        one of [ INFO | WARNING | CRITICAL ] and determines the resulting alert severity
    * <lua_function>    lua function that evaluates trigger conditions
    * <topic_X>         metric topic
    * <regex>           regular expression
    * <value_name_X>    unique name (identifier) of value within given rule definition.
    * <result_name_X>   unique name (identifier) of result within given rule definition


For threshold rule:
If <metric_specification> is single string value then property "evaluation" :
"<lua_function>" is ignored. If <metric_specification> is array then property "evaluation" :
"<lua_function>" is expected and in case it is missing, only the first value
from <metric_specification> is taken. For further details please consult the
section describing semantics.


The semantics is as follows (WIP):

THRESHOLD:
   If value of metric <metric_name> on element <element_name> is smaller
("type" == "low") or bigger ("type" == "high") than <value>, trigger alert for
element <element_name> with state ACTIVE, severity <severity> and action states
<action_1>, ..., <action_N>. When the condition no longer holds true, trigger
the same alert with state RESOLVED.

PATTERN:
    Value of metric, whose name matches regular expression <regex>, becomes
input to <lua_function> that triggers alert for element that was matched by
<regex> with state ACTIVE, severity <severity> and action states <action_1>,
..., <action_N> if property "action" is specified, EMAIL action otherwise. When
the condition no longer holds true, trigger the same alert with state RESOLVED.

SINGLE:
    Value of any metric defined among <topic_1>, ..., <topic_N> becomes
input to <lua_function> that triggers alert for element <element_name> with
state ACTIVE, severity <severity> and action states <action_1>, 
..., <action_N> if property "action" is specified, EMAIL action otherwise. When
the condition no longer holds true, trigger the same alert with state RESOVED.

