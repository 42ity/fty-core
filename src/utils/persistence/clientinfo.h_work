#pragma once

#ifndef MODULEINFO_H_
#define MODULEINFO_H_


#include "databaseobject.h"
#include "cidr.h"


namespace utils {

class ClientInfo : public DataBaseObject
{
    public:

        /**
         * \brief Creates a new object with specified connection
         */
        ClientInfo(std::string url);

        /** 
         * \brief creates a new object with specified connection for a client clientName
         */
        ClientInfo(std::string url, std::string clientName);

        std::string toString();
        
        void clear(){};
        /**
         * \brief  Selects last information about device deviceDiscoveredId 
         * provided by client with clientId(clientName) stored in this object
         *
         * Takes existing clientId and deviceDiscoveredId
         * \return Returns a number of selected rows
         */
        unsigned int selectLastRecord();
  unsigned int selectById(unsigned int id){};

        /**
         * \brief  Selects last information about device deviceDiscoveredId 
         * provided by client with clientId
         *
         * Takes clientId and deviceDiscoveredId as parameters.
         * In case of success (one row found) rewrite all object 
         * and put it in state OS_SELECTED. In other cases nothing to change.
         * 
         * \return Returns a number of selected rows
         */
        unsigned int selectLastRecord(int clientId, int deviceDiscoveredId);

        unsigned int selectLastRecord(std::string clientName, int deviceDiscoveredId);

        bool selectLastRecord(std::string ClientName, CIDRAddress ip); // load info from client-name for deviceDiscovered, that has ip

        bool selectLastRecord(std::string ClientName, std::string ip); // load info from client-name for deviceDiscovered, that has ip

        ~ClientInfo();

    protected:
        
        /**
         * \brief TODO if need
         */
        bool check(){};

        /**
         *  \brief inserts a row.
         *
         *  All necessary pre-actions are made in dbsave
         */
        unsigned int db_insert();
        
        /**
         *  \brief updates a row.
         *
         *  All necessary pre-actions are made in dbsave
         */
        unsigned int db_update();
        
        /**
         *  \brief deletes a row.
         *
         *  All necessary pre-actions are made in dbdelete
         */
        unsigned int db_delete();
    

    private:
        /////////////////////////////////
        /* fields from the DB*/
        /////////////////////////////////

        /**
         * \brief Id of the client who gathered this info
         */
        int _clientId;

        /**
         * \brief An id of the discovered device which was scanned
         */
        int _deviceDiscoveredId;

        /**
         * \brief date of gathering information
         *
         * it is a date of inserting the row in the table
         * it is not valid, until the state is OS_SELECTED.
         */
        time_t _date;

        /**
         * \brief an information in unknown format. We don't care.
         */
        std::string _blobData;


        /////////////////////////////////
        /* calculateed fields */
        ////////////////////////////////

        /**
         * \brief Name of the client who gathered this info
         *
         * Calculates automatically. Cannot be changed manually.
         */
        std::string _clientName;
};

} // end of namespace utils

#endif // MODULEINFO_H_
